quote
$(Expr(:toplevel, :($(Expr(:module, true, :GConstants, quote 
    $(Expr(:export, :GThreadError, :GOnceStatus, :GBookmarkFileError, :GChecksumType, :GConvertError, :GDateDMY, :GDateWeekday, :GDateMonth, :GTimeType, :GFileError, :GFileTest, :GTraverseFlags, :GTraverseType, :GHookFlagMask, :GIOCondition, :GUnicodeType, :GUnicodeBreakType, :GUnicodeScript, :GNormalizeMode, :GUserDirectory, :GFormatSizeFlags, :GIOError, :GIOChannelError, :GIOStatus, :GSeekType, :GIOFlags, :GKeyFileError, :GKeyFileFlags, :GMarkupError, :GMarkupParseFlags, :GMarkupCollectType, :GLogLevelFlags, :GOptionFlags, :GOptionArg, :GOptionError, :GRegexError, :GRegexCompileFlags, :GRegexMatchFlags, :GErrorType, :GTokenType, :GShellError, :GSliceConfig, :GSpawnError, :GSpawnFlags, :GAsciiType, :GTestTrapFlags, :GTestSubprocessFlags, :GTestLogType, :GTestFileType, :GVariantClass, :GVariantParseError, :GThreadPriority, :GTypeDebugFlags, :GTypeFundamentalFlags, :GTypeFlags, :GParamFlags, :GSignalFlags, :GConnectFlags, :GSignalMatchType, :GBindingFlags, :GAppInfoCreateFlags, :GConverterFlags, :GConverterResult, :GDataStreamByteOrder, :GDataStreamNewlineType, :GFileAttributeType, :GFileAttributeInfoFlags, :GFileAttributeStatus, :GFileQueryInfoFlags, :GFileCreateFlags, :GFileMeasureFlags, :GMountMountFlags, :GMountUnmountFlags, :GDriveStartFlags, :GDriveStartStopType, :GFileCopyFlags, :GFileMonitorFlags, :GFileType, :GFilesystemPreviewType, :GFileMonitorEvent, :GIOErrorEnum, :GAskPasswordFlags, :GPasswordSave, :GMountOperationResult, :GOutputStreamSpliceFlags, :GIOStreamSpliceFlags, :GEmblemOrigin, :GResolverError, :GResolverRecordType, :GResourceError, :GResourceFlags, :GResourceLookupFlags, :GSocketFamily, :GSocketType, :GSocketMsgFlags, :GSocketProtocol, :GZlibCompressorFormat, :GUnixSocketAddressType, :GBusType, :GBusNameOwnerFlags, :GBusNameWatcherFlags, :GDBusProxyFlags, :GDBusError, :GDBusConnectionFlags, :GDBusCapabilityFlags, :GDBusCallFlags, :GDBusMessageType, :GDBusMessageFlags, :GDBusMessageHeaderField, :GDBusPropertyInfoFlags, :GDBusSubtreeFlags, :GDBusServerFlags, :GDBusSignalFlags, :GDBusSendMessageFlags, :GCredentialsType, :GDBusMessageByteOrder, :GApplicationFlags, :GTlsError, :GTlsCertificateFlags, :GTlsAuthenticationMode, :GTlsRehandshakeMode, :GTlsPasswordFlags, :GTlsInteractionResult, :GDBusInterfaceSkeletonFlags, :GDBusObjectManagerClientFlags, :GTlsDatabaseVerifyFlags, :GTlsDatabaseLookupFlags, :GTlsCertificateRequestFlags, :GIOModuleScopeFlags, :GSocketClientEvent, :GTestDBusFlags, :GSubprocessFlags, :GModuleFlags, :GSettingsBindFlags, :GdkByteOrder, :GdkModifierType, :GdkInputCondition, :GdkStatus, :GdkGrabStatus, :GdkDragAction, :GdkDragProtocol, :GdkExtensionMode, :GdkInputSource, :GdkInputMode, :GdkAxisUse, :GdkFilterReturn, :GdkEventType, :GdkEventMask, :GdkVisibilityState, :GdkScrollDirection, :GdkNotifyType, :GdkCrossingMode, :GdkPropertyState, :GdkWindowState, :GdkSettingAction, :GdkOwnerChange, :GdkRgbDither, :GdkPixbufAlphaMode, :GdkColorspace, :GdkPixbufError, :GdkInterpType, :GdkPixbufRotation, :GdkCursorType, :GdkCapStyle, :GdkFill, :GdkFunction, :GdkJoinStyle, :GdkLineStyle, :GdkSubwindowMode, :GdkGCValuesMask, :GdkFontType, :GdkImageType, :GdkPropMode, :GdkFillRule, :GdkOverlapType, :GdkWindowClass, :GdkWindowType, :GdkWindowAttributesType, :GdkWindowHints, :GdkWindowTypeHint, :GdkWMDecoration, :GdkWMFunction, :GdkGravity, :GdkWindowEdge, :GdkVisualType, :GtkAnchorType, :GtkArrowPlacement, :GtkArrowType, :GtkAttachOptions, :GtkButtonBoxStyle, :GtkCurveType, :GtkDeleteType, :GtkDirectionType, :GtkExpanderStyle, :GtkIconSize, :GtkSensitivityType, :GtkSideType, :GtkTextDirection, :GtkJustification, :GtkMatchType, :GtkMenuDirectionType, :GtkMessageType, :GtkMetricType, :GtkMovementStep, :GtkScrollStep, :GtkOrientation, :GtkCornerType, :GtkPackType, :GtkPathPriorityType, :GtkPathType, :GtkPolicyType, :GtkPositionType, :GtkPreviewType, :GtkReliefStyle, :GtkResizeMode, :GtkSignalRunType, :GtkScrollType, :GtkSelectionMode, :GtkShadowType, :GtkStateType, :GtkSubmenuDirection, :GtkSubmenuPlacement, :GtkToolbarStyle, :GtkUpdateType, :GtkVisibility, :GtkWindowPosition, :GtkWindowType, :GtkWrapMode, :GtkSortType, :GtkIMPreeditStyle, :GtkIMStatusStyle, :GtkPackDirection, :GtkPrintPages, :GtkPageSet, :GtkNumberUpLayout, :GtkPageOrientation, :GtkPrintQuality, :GtkPrintDuplex, :GtkUnit, :GtkTreeViewGridLines, :GtkDragResult, :GtkAccelFlags, :GtkDebugFlag, :GtkObjectFlags, :GtkArgFlags, :GtkRcFlags, :GtkRcTokenType, :GtkWidgetFlags, :GtkWidgetHelpType, :GtkDialogFlags, :GtkResponseType, :GtkAssistantPageType, :GtkBuilderError, :GtkImageType, :GtkCalendarDisplayOptions, :GtkCellRendererState, :GtkCellRendererMode, :GtkTreeModelFlags, :GtkTreeViewColumnSizing, :GtkCellRendererAccelMode, :GtkTextSearchFlags, :GtkDestDefaults, :GtkTargetFlags, :GtkEntryIconPosition, :GtkTreeViewDropPosition, :GtkFileFilterFlags, :GtkFileChooserAction, :GtkFileChooserConfirmation, :GtkFileChooserError, :GtkIconLookupFlags, :GtkIconThemeError, :GtkIconViewDropPosition, :GtkSizeGroupMode, :GtkButtonsType, :GtkNotebookTab, :GtkPrintStatus, :GtkPrintOperationResult, :GtkPrintOperationAction, :GtkPrintError, :GtkProgressBarStyle, :GtkProgressBarOrientation, :GtkRecentManagerError, :GtkRecentFilterFlags, :GtkRecentSortType, :GtkRecentChooserError, :GtkSpinButtonUpdatePolicy, :GtkSpinType, :GtkTextBufferTargetInfo, :GtkTextWindowType, :GtkToolbarChildType, :GtkToolbarSpaceStyle, :GtkToolPaletteDragTargets, :GtkUIManagerItemType, :GtkCellType, :GtkCListDragPos, :GtkButtonAction, :GtkCTreePos, :GtkCTreeLineStyle, :GtkCTreeExpanderStyle, :GtkCTreeExpansionType))
    $(Expr(:toplevel, :($(Expr(:module, false, :GThreadError, quote 
    const AGAIN = const G_THREAD_ERROR_AGAIN = Main.Base.int32(0)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GOnceStatus, quote 
    const NOTCALLED = const G_ONCE_STATUS_NOTCALLED = Main.Base.int32(0)
    const PROGRESS = const G_ONCE_STATUS_PROGRESS = Main.Base.int32(1)
    const READY = const G_ONCE_STATUS_READY = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GBookmarkFileError, quote 
    const INVALID_URI = const G_BOOKMARK_FILE_ERROR_INVALID_URI = Main.Base.int32(0)
    const INVALID_VALUE = const G_BOOKMARK_FILE_ERROR_INVALID_VALUE = Main.Base.int32(1)
    const APP_NOT_REGISTERED = const G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = Main.Base.int32(2)
    const URI_NOT_FOUND = const G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = Main.Base.int32(3)
    const READ = const G_BOOKMARK_FILE_ERROR_READ = Main.Base.int32(4)
    const UNKNOWN_ENCODING = const G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = Main.Base.int32(5)
    const WRITE = const G_BOOKMARK_FILE_ERROR_WRITE = Main.Base.int32(6)
    const FILE_NOT_FOUND = const G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GChecksumType, quote 
    const MD5 = const G_CHECKSUM_MD5 = Main.Base.int32(0)
    const SHA1 = const G_CHECKSUM_SHA1 = Main.Base.int32(1)
    const SHA256 = const G_CHECKSUM_SHA256 = Main.Base.int32(2)
    const SHA512 = const G_CHECKSUM_SHA512 = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GConvertError, quote 
    const NO_CONVERSION = const G_CONVERT_ERROR_NO_CONVERSION = Main.Base.int32(0)
    const ILLEGAL_SEQUENCE = const G_CONVERT_ERROR_ILLEGAL_SEQUENCE = Main.Base.int32(1)
    const FAILED = const G_CONVERT_ERROR_FAILED = Main.Base.int32(2)
    const PARTIAL_INPUT = const G_CONVERT_ERROR_PARTIAL_INPUT = Main.Base.int32(3)
    const BAD_URI = const G_CONVERT_ERROR_BAD_URI = Main.Base.int32(4)
    const NOT_ABSOLUTE_PATH = const G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = Main.Base.int32(5)
    const NO_MEMORY = const G_CONVERT_ERROR_NO_MEMORY = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDateDMY, quote 
    const DAY = const G_DATE_DAY = Main.Base.int32(0)
    const MONTH = const G_DATE_MONTH = Main.Base.int32(1)
    const YEAR = const G_DATE_YEAR = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDateWeekday, quote 
    const BAD_WEEKDAY = const G_DATE_BAD_WEEKDAY = Main.Base.int32(0)
    const MONDAY = const G_DATE_MONDAY = Main.Base.int32(1)
    const TUESDAY = const G_DATE_TUESDAY = Main.Base.int32(2)
    const WEDNESDAY = const G_DATE_WEDNESDAY = Main.Base.int32(3)
    const THURSDAY = const G_DATE_THURSDAY = Main.Base.int32(4)
    const FRIDAY = const G_DATE_FRIDAY = Main.Base.int32(5)
    const SATURDAY = const G_DATE_SATURDAY = Main.Base.int32(6)
    const SUNDAY = const G_DATE_SUNDAY = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDateMonth, quote 
    const BAD_MONTH = const G_DATE_BAD_MONTH = Main.Base.int32(0)
    const JANUARY = const G_DATE_JANUARY = Main.Base.int32(1)
    const FEBRUARY = const G_DATE_FEBRUARY = Main.Base.int32(2)
    const MARCH = const G_DATE_MARCH = Main.Base.int32(3)
    const APRIL = const G_DATE_APRIL = Main.Base.int32(4)
    const MAY = const G_DATE_MAY = Main.Base.int32(5)
    const JUNE = const G_DATE_JUNE = Main.Base.int32(6)
    const JULY = const G_DATE_JULY = Main.Base.int32(7)
    const AUGUST = const G_DATE_AUGUST = Main.Base.int32(8)
    const SEPTEMBER = const G_DATE_SEPTEMBER = Main.Base.int32(9)
    const OCTOBER = const G_DATE_OCTOBER = Main.Base.int32(10)
    const NOVEMBER = const G_DATE_NOVEMBER = Main.Base.int32(11)
    const DECEMBER = const G_DATE_DECEMBER = Main.Base.int32(12)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTimeType, quote 
    const STANDARD = const G_TIME_TYPE_STANDARD = Main.Base.int32(0)
    const DAYLIGHT = const G_TIME_TYPE_DAYLIGHT = Main.Base.int32(1)
    const UNIVERSAL = const G_TIME_TYPE_UNIVERSAL = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileError, quote 
    const EXIST = const G_FILE_ERROR_EXIST = Main.Base.int32(0)
    const ISDIR = const G_FILE_ERROR_ISDIR = Main.Base.int32(1)
    const ACCES = const G_FILE_ERROR_ACCES = Main.Base.int32(2)
    const NAMETOOLONG = const G_FILE_ERROR_NAMETOOLONG = Main.Base.int32(3)
    const NOENT = const G_FILE_ERROR_NOENT = Main.Base.int32(4)
    const NOTDIR = const G_FILE_ERROR_NOTDIR = Main.Base.int32(5)
    const NXIO = const G_FILE_ERROR_NXIO = Main.Base.int32(6)
    const NODEV = const G_FILE_ERROR_NODEV = Main.Base.int32(7)
    const ROFS = const G_FILE_ERROR_ROFS = Main.Base.int32(8)
    const TXTBSY = const G_FILE_ERROR_TXTBSY = Main.Base.int32(9)
    const FAULT = const G_FILE_ERROR_FAULT = Main.Base.int32(10)
    const LOOP = const G_FILE_ERROR_LOOP = Main.Base.int32(11)
    const NOSPC = const G_FILE_ERROR_NOSPC = Main.Base.int32(12)
    const NOMEM = const G_FILE_ERROR_NOMEM = Main.Base.int32(13)
    const MFILE = const G_FILE_ERROR_MFILE = Main.Base.int32(14)
    const NFILE = const G_FILE_ERROR_NFILE = Main.Base.int32(15)
    const BADF = const G_FILE_ERROR_BADF = Main.Base.int32(16)
    const INVAL = const G_FILE_ERROR_INVAL = Main.Base.int32(17)
    const PIPE = const G_FILE_ERROR_PIPE = Main.Base.int32(18)
    const AGAIN = const G_FILE_ERROR_AGAIN = Main.Base.int32(19)
    const INTR = const G_FILE_ERROR_INTR = Main.Base.int32(20)
    const IO = const G_FILE_ERROR_IO = Main.Base.int32(21)
    const PERM = const G_FILE_ERROR_PERM = Main.Base.int32(22)
    const NOSYS = const G_FILE_ERROR_NOSYS = Main.Base.int32(23)
    const FAILED = const G_FILE_ERROR_FAILED = Main.Base.int32(24)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileTest, quote 
    const IS_REGULAR = const G_FILE_TEST_IS_REGULAR = Main.Base.int32(1)
    const IS_SYMLINK = const G_FILE_TEST_IS_SYMLINK = Main.Base.int32(2)
    const IS_DIR = const G_FILE_TEST_IS_DIR = Main.Base.int32(4)
    const IS_EXECUTABLE = const G_FILE_TEST_IS_EXECUTABLE = Main.Base.int32(8)
    const EXISTS = const G_FILE_TEST_EXISTS = Main.Base.int32(16)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTraverseFlags, quote 
    const LEAVES = const G_TRAVERSE_LEAVES = Main.Base.int32(1)
    const NON_LEAVES = const G_TRAVERSE_NON_LEAVES = Main.Base.int32(2)
    const ALL = const G_TRAVERSE_ALL = Main.Base.int32(3)
    const MASK = const G_TRAVERSE_MASK = Main.Base.int32(3)
    const LEAFS = const G_TRAVERSE_LEAFS = Main.Base.int32(1)
    const NON_LEAFS = const G_TRAVERSE_NON_LEAFS = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTraverseType, quote 
    const IN_ORDER = const G_IN_ORDER = Main.Base.int32(0)
    const PRE_ORDER = const G_PRE_ORDER = Main.Base.int32(1)
    const POST_ORDER = const G_POST_ORDER = Main.Base.int32(2)
    const LEVEL_ORDER = const G_LEVEL_ORDER = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GHookFlagMask, quote 
    const ACTIVE = const G_HOOK_FLAG_ACTIVE = Main.Base.int32(1)
    const IN_CALL = const G_HOOK_FLAG_IN_CALL = Main.Base.int32(2)
    const MASK = const G_HOOK_FLAG_MASK = Main.Base.int32(15)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GIOCondition, quote 
    const IN = const G_IO_IN = Main.Base.int32(1)
    const OUT = const G_IO_OUT = Main.Base.int32(4)
    const PRI = const G_IO_PRI = Main.Base.int32(2)
    const ERR = const G_IO_ERR = Main.Base.int32(8)
    const HUP = const G_IO_HUP = Main.Base.int32(16)
    const NVAL = const G_IO_NVAL = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GUnicodeType, quote 
    const CONTROL = const G_UNICODE_CONTROL = Main.Base.int32(0)
    const FORMAT = const G_UNICODE_FORMAT = Main.Base.int32(1)
    const UNASSIGNED = const G_UNICODE_UNASSIGNED = Main.Base.int32(2)
    const PRIVATE_USE = const G_UNICODE_PRIVATE_USE = Main.Base.int32(3)
    const SURROGATE = const G_UNICODE_SURROGATE = Main.Base.int32(4)
    const LOWERCASE_LETTER = const G_UNICODE_LOWERCASE_LETTER = Main.Base.int32(5)
    const MODIFIER_LETTER = const G_UNICODE_MODIFIER_LETTER = Main.Base.int32(6)
    const OTHER_LETTER = const G_UNICODE_OTHER_LETTER = Main.Base.int32(7)
    const TITLECASE_LETTER = const G_UNICODE_TITLECASE_LETTER = Main.Base.int32(8)
    const UPPERCASE_LETTER = const G_UNICODE_UPPERCASE_LETTER = Main.Base.int32(9)
    const SPACING_MARK = const G_UNICODE_SPACING_MARK = Main.Base.int32(10)
    const ENCLOSING_MARK = const G_UNICODE_ENCLOSING_MARK = Main.Base.int32(11)
    const NON_SPACING_MARK = const G_UNICODE_NON_SPACING_MARK = Main.Base.int32(12)
    const DECIMAL_NUMBER = const G_UNICODE_DECIMAL_NUMBER = Main.Base.int32(13)
    const LETTER_NUMBER = const G_UNICODE_LETTER_NUMBER = Main.Base.int32(14)
    const OTHER_NUMBER = const G_UNICODE_OTHER_NUMBER = Main.Base.int32(15)
    const CONNECT_PUNCTUATION = const G_UNICODE_CONNECT_PUNCTUATION = Main.Base.int32(16)
    const DASH_PUNCTUATION = const G_UNICODE_DASH_PUNCTUATION = Main.Base.int32(17)
    const CLOSE_PUNCTUATION = const G_UNICODE_CLOSE_PUNCTUATION = Main.Base.int32(18)
    const FINAL_PUNCTUATION = const G_UNICODE_FINAL_PUNCTUATION = Main.Base.int32(19)
    const INITIAL_PUNCTUATION = const G_UNICODE_INITIAL_PUNCTUATION = Main.Base.int32(20)
    const OTHER_PUNCTUATION = const G_UNICODE_OTHER_PUNCTUATION = Main.Base.int32(21)
    const OPEN_PUNCTUATION = const G_UNICODE_OPEN_PUNCTUATION = Main.Base.int32(22)
    const CURRENCY_SYMBOL = const G_UNICODE_CURRENCY_SYMBOL = Main.Base.int32(23)
    const MODIFIER_SYMBOL = const G_UNICODE_MODIFIER_SYMBOL = Main.Base.int32(24)
    const MATH_SYMBOL = const G_UNICODE_MATH_SYMBOL = Main.Base.int32(25)
    const OTHER_SYMBOL = const G_UNICODE_OTHER_SYMBOL = Main.Base.int32(26)
    const LINE_SEPARATOR = const G_UNICODE_LINE_SEPARATOR = Main.Base.int32(27)
    const PARAGRAPH_SEPARATOR = const G_UNICODE_PARAGRAPH_SEPARATOR = Main.Base.int32(28)
    const SPACE_SEPARATOR = const G_UNICODE_SPACE_SEPARATOR = Main.Base.int32(29)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GUnicodeBreakType, quote 
    const MANDATORY = const G_UNICODE_BREAK_MANDATORY = Main.Base.int32(0)
    const CARRIAGE_RETURN = const G_UNICODE_BREAK_CARRIAGE_RETURN = Main.Base.int32(1)
    const LINE_FEED = const G_UNICODE_BREAK_LINE_FEED = Main.Base.int32(2)
    const COMBINING_MARK = const G_UNICODE_BREAK_COMBINING_MARK = Main.Base.int32(3)
    const SURROGATE = const G_UNICODE_BREAK_SURROGATE = Main.Base.int32(4)
    const ZERO_WIDTH_SPACE = const G_UNICODE_BREAK_ZERO_WIDTH_SPACE = Main.Base.int32(5)
    const INSEPARABLE = const G_UNICODE_BREAK_INSEPARABLE = Main.Base.int32(6)
    const NON_BREAKING_GLUE = const G_UNICODE_BREAK_NON_BREAKING_GLUE = Main.Base.int32(7)
    const CONTINGENT = const G_UNICODE_BREAK_CONTINGENT = Main.Base.int32(8)
    const SPACE = const G_UNICODE_BREAK_SPACE = Main.Base.int32(9)
    const AFTER = const G_UNICODE_BREAK_AFTER = Main.Base.int32(10)
    const BEFORE = const G_UNICODE_BREAK_BEFORE = Main.Base.int32(11)
    const BEFORE_AND_AFTER = const G_UNICODE_BREAK_BEFORE_AND_AFTER = Main.Base.int32(12)
    const HYPHEN = const G_UNICODE_BREAK_HYPHEN = Main.Base.int32(13)
    const NON_STARTER = const G_UNICODE_BREAK_NON_STARTER = Main.Base.int32(14)
    const OPEN_PUNCTUATION = const G_UNICODE_BREAK_OPEN_PUNCTUATION = Main.Base.int32(15)
    const CLOSE_PUNCTUATION = const G_UNICODE_BREAK_CLOSE_PUNCTUATION = Main.Base.int32(16)
    const QUOTATION = const G_UNICODE_BREAK_QUOTATION = Main.Base.int32(17)
    const EXCLAMATION = const G_UNICODE_BREAK_EXCLAMATION = Main.Base.int32(18)
    const IDEOGRAPHIC = const G_UNICODE_BREAK_IDEOGRAPHIC = Main.Base.int32(19)
    const NUMERIC = const G_UNICODE_BREAK_NUMERIC = Main.Base.int32(20)
    const INFIX_SEPARATOR = const G_UNICODE_BREAK_INFIX_SEPARATOR = Main.Base.int32(21)
    const SYMBOL = const G_UNICODE_BREAK_SYMBOL = Main.Base.int32(22)
    const ALPHABETIC = const G_UNICODE_BREAK_ALPHABETIC = Main.Base.int32(23)
    const PREFIX = const G_UNICODE_BREAK_PREFIX = Main.Base.int32(24)
    const POSTFIX = const G_UNICODE_BREAK_POSTFIX = Main.Base.int32(25)
    const COMPLEX_CONTEXT = const G_UNICODE_BREAK_COMPLEX_CONTEXT = Main.Base.int32(26)
    const AMBIGUOUS = const G_UNICODE_BREAK_AMBIGUOUS = Main.Base.int32(27)
    const UNKNOWN = const G_UNICODE_BREAK_UNKNOWN = Main.Base.int32(28)
    const NEXT_LINE = const G_UNICODE_BREAK_NEXT_LINE = Main.Base.int32(29)
    const WORD_JOINER = const G_UNICODE_BREAK_WORD_JOINER = Main.Base.int32(30)
    const HANGUL_L_JAMO = const G_UNICODE_BREAK_HANGUL_L_JAMO = Main.Base.int32(31)
    const HANGUL_V_JAMO = const G_UNICODE_BREAK_HANGUL_V_JAMO = Main.Base.int32(32)
    const HANGUL_T_JAMO = const G_UNICODE_BREAK_HANGUL_T_JAMO = Main.Base.int32(33)
    const HANGUL_LV_SYLLABLE = const G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = Main.Base.int32(34)
    const HANGUL_LVT_SYLLABLE = const G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = Main.Base.int32(35)
    const CLOSE_PARANTHESIS = const G_UNICODE_BREAK_CLOSE_PARANTHESIS = Main.Base.int32(36)
    const CONDITIONAL_JAPANESE_STARTER = const G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = Main.Base.int32(37)
    const HEBREW_LETTER = const G_UNICODE_BREAK_HEBREW_LETTER = Main.Base.int32(38)
    const REGIONAL_INDICATOR = const G_UNICODE_BREAK_REGIONAL_INDICATOR = Main.Base.int32(39)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GUnicodeScript, quote 
    const INVALID_CODE = const G_UNICODE_SCRIPT_INVALID_CODE = Main.Base.int32(-1)
    const COMMON = const G_UNICODE_SCRIPT_COMMON = Main.Base.int32(0)
    const INHERITED = const G_UNICODE_SCRIPT_INHERITED = Main.Base.int32(1)
    const ARABIC = const G_UNICODE_SCRIPT_ARABIC = Main.Base.int32(2)
    const ARMENIAN = const G_UNICODE_SCRIPT_ARMENIAN = Main.Base.int32(3)
    const BENGALI = const G_UNICODE_SCRIPT_BENGALI = Main.Base.int32(4)
    const BOPOMOFO = const G_UNICODE_SCRIPT_BOPOMOFO = Main.Base.int32(5)
    const CHEROKEE = const G_UNICODE_SCRIPT_CHEROKEE = Main.Base.int32(6)
    const COPTIC = const G_UNICODE_SCRIPT_COPTIC = Main.Base.int32(7)
    const CYRILLIC = const G_UNICODE_SCRIPT_CYRILLIC = Main.Base.int32(8)
    const DESERET = const G_UNICODE_SCRIPT_DESERET = Main.Base.int32(9)
    const DEVANAGARI = const G_UNICODE_SCRIPT_DEVANAGARI = Main.Base.int32(10)
    const ETHIOPIC = const G_UNICODE_SCRIPT_ETHIOPIC = Main.Base.int32(11)
    const GEORGIAN = const G_UNICODE_SCRIPT_GEORGIAN = Main.Base.int32(12)
    const GOTHIC = const G_UNICODE_SCRIPT_GOTHIC = Main.Base.int32(13)
    const GREEK = const G_UNICODE_SCRIPT_GREEK = Main.Base.int32(14)
    const GUJARATI = const G_UNICODE_SCRIPT_GUJARATI = Main.Base.int32(15)
    const GURMUKHI = const G_UNICODE_SCRIPT_GURMUKHI = Main.Base.int32(16)
    const HAN = const G_UNICODE_SCRIPT_HAN = Main.Base.int32(17)
    const HANGUL = const G_UNICODE_SCRIPT_HANGUL = Main.Base.int32(18)
    const HEBREW = const G_UNICODE_SCRIPT_HEBREW = Main.Base.int32(19)
    const HIRAGANA = const G_UNICODE_SCRIPT_HIRAGANA = Main.Base.int32(20)
    const KANNADA = const G_UNICODE_SCRIPT_KANNADA = Main.Base.int32(21)
    const KATAKANA = const G_UNICODE_SCRIPT_KATAKANA = Main.Base.int32(22)
    const KHMER = const G_UNICODE_SCRIPT_KHMER = Main.Base.int32(23)
    const LAO = const G_UNICODE_SCRIPT_LAO = Main.Base.int32(24)
    const LATIN = const G_UNICODE_SCRIPT_LATIN = Main.Base.int32(25)
    const MALAYALAM = const G_UNICODE_SCRIPT_MALAYALAM = Main.Base.int32(26)
    const MONGOLIAN = const G_UNICODE_SCRIPT_MONGOLIAN = Main.Base.int32(27)
    const MYANMAR = const G_UNICODE_SCRIPT_MYANMAR = Main.Base.int32(28)
    const OGHAM = const G_UNICODE_SCRIPT_OGHAM = Main.Base.int32(29)
    const OLD_ITALIC = const G_UNICODE_SCRIPT_OLD_ITALIC = Main.Base.int32(30)
    const ORIYA = const G_UNICODE_SCRIPT_ORIYA = Main.Base.int32(31)
    const RUNIC = const G_UNICODE_SCRIPT_RUNIC = Main.Base.int32(32)
    const SINHALA = const G_UNICODE_SCRIPT_SINHALA = Main.Base.int32(33)
    const SYRIAC = const G_UNICODE_SCRIPT_SYRIAC = Main.Base.int32(34)
    const TAMIL = const G_UNICODE_SCRIPT_TAMIL = Main.Base.int32(35)
    const TELUGU = const G_UNICODE_SCRIPT_TELUGU = Main.Base.int32(36)
    const THAANA = const G_UNICODE_SCRIPT_THAANA = Main.Base.int32(37)
    const THAI = const G_UNICODE_SCRIPT_THAI = Main.Base.int32(38)
    const TIBETAN = const G_UNICODE_SCRIPT_TIBETAN = Main.Base.int32(39)
    const CANADIAN_ABORIGINAL = const G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = Main.Base.int32(40)
    const YI = const G_UNICODE_SCRIPT_YI = Main.Base.int32(41)
    const TAGALOG = const G_UNICODE_SCRIPT_TAGALOG = Main.Base.int32(42)
    const HANUNOO = const G_UNICODE_SCRIPT_HANUNOO = Main.Base.int32(43)
    const BUHID = const G_UNICODE_SCRIPT_BUHID = Main.Base.int32(44)
    const TAGBANWA = const G_UNICODE_SCRIPT_TAGBANWA = Main.Base.int32(45)
    const BRAILLE = const G_UNICODE_SCRIPT_BRAILLE = Main.Base.int32(46)
    const CYPRIOT = const G_UNICODE_SCRIPT_CYPRIOT = Main.Base.int32(47)
    const LIMBU = const G_UNICODE_SCRIPT_LIMBU = Main.Base.int32(48)
    const OSMANYA = const G_UNICODE_SCRIPT_OSMANYA = Main.Base.int32(49)
    const SHAVIAN = const G_UNICODE_SCRIPT_SHAVIAN = Main.Base.int32(50)
    const LINEAR_B = const G_UNICODE_SCRIPT_LINEAR_B = Main.Base.int32(51)
    const TAI_LE = const G_UNICODE_SCRIPT_TAI_LE = Main.Base.int32(52)
    const UGARITIC = const G_UNICODE_SCRIPT_UGARITIC = Main.Base.int32(53)
    const NEW_TAI_LUE = const G_UNICODE_SCRIPT_NEW_TAI_LUE = Main.Base.int32(54)
    const BUGINESE = const G_UNICODE_SCRIPT_BUGINESE = Main.Base.int32(55)
    const GLAGOLITIC = const G_UNICODE_SCRIPT_GLAGOLITIC = Main.Base.int32(56)
    const TIFINAGH = const G_UNICODE_SCRIPT_TIFINAGH = Main.Base.int32(57)
    const SYLOTI_NAGRI = const G_UNICODE_SCRIPT_SYLOTI_NAGRI = Main.Base.int32(58)
    const OLD_PERSIAN = const G_UNICODE_SCRIPT_OLD_PERSIAN = Main.Base.int32(59)
    const KHAROSHTHI = const G_UNICODE_SCRIPT_KHAROSHTHI = Main.Base.int32(60)
    const UNKNOWN = const G_UNICODE_SCRIPT_UNKNOWN = Main.Base.int32(61)
    const BALINESE = const G_UNICODE_SCRIPT_BALINESE = Main.Base.int32(62)
    const CUNEIFORM = const G_UNICODE_SCRIPT_CUNEIFORM = Main.Base.int32(63)
    const PHOENICIAN = const G_UNICODE_SCRIPT_PHOENICIAN = Main.Base.int32(64)
    const PHAGS_PA = const G_UNICODE_SCRIPT_PHAGS_PA = Main.Base.int32(65)
    const NKO = const G_UNICODE_SCRIPT_NKO = Main.Base.int32(66)
    const KAYAH_LI = const G_UNICODE_SCRIPT_KAYAH_LI = Main.Base.int32(67)
    const LEPCHA = const G_UNICODE_SCRIPT_LEPCHA = Main.Base.int32(68)
    const REJANG = const G_UNICODE_SCRIPT_REJANG = Main.Base.int32(69)
    const SUNDANESE = const G_UNICODE_SCRIPT_SUNDANESE = Main.Base.int32(70)
    const SAURASHTRA = const G_UNICODE_SCRIPT_SAURASHTRA = Main.Base.int32(71)
    const CHAM = const G_UNICODE_SCRIPT_CHAM = Main.Base.int32(72)
    const OL_CHIKI = const G_UNICODE_SCRIPT_OL_CHIKI = Main.Base.int32(73)
    const VAI = const G_UNICODE_SCRIPT_VAI = Main.Base.int32(74)
    const CARIAN = const G_UNICODE_SCRIPT_CARIAN = Main.Base.int32(75)
    const LYCIAN = const G_UNICODE_SCRIPT_LYCIAN = Main.Base.int32(76)
    const LYDIAN = const G_UNICODE_SCRIPT_LYDIAN = Main.Base.int32(77)
    const AVESTAN = const G_UNICODE_SCRIPT_AVESTAN = Main.Base.int32(78)
    const BAMUM = const G_UNICODE_SCRIPT_BAMUM = Main.Base.int32(79)
    const EGYPTIAN_HIEROGLYPHS = const G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = Main.Base.int32(80)
    const IMPERIAL_ARAMAIC = const G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = Main.Base.int32(81)
    const INSCRIPTIONAL_PAHLAVI = const G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = Main.Base.int32(82)
    const INSCRIPTIONAL_PARTHIAN = const G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = Main.Base.int32(83)
    const JAVANESE = const G_UNICODE_SCRIPT_JAVANESE = Main.Base.int32(84)
    const KAITHI = const G_UNICODE_SCRIPT_KAITHI = Main.Base.int32(85)
    const LISU = const G_UNICODE_SCRIPT_LISU = Main.Base.int32(86)
    const MEETEI_MAYEK = const G_UNICODE_SCRIPT_MEETEI_MAYEK = Main.Base.int32(87)
    const OLD_SOUTH_ARABIAN = const G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = Main.Base.int32(88)
    const OLD_TURKIC = const G_UNICODE_SCRIPT_OLD_TURKIC = Main.Base.int32(89)
    const SAMARITAN = const G_UNICODE_SCRIPT_SAMARITAN = Main.Base.int32(90)
    const TAI_THAM = const G_UNICODE_SCRIPT_TAI_THAM = Main.Base.int32(91)
    const TAI_VIET = const G_UNICODE_SCRIPT_TAI_VIET = Main.Base.int32(92)
    const BATAK = const G_UNICODE_SCRIPT_BATAK = Main.Base.int32(93)
    const BRAHMI = const G_UNICODE_SCRIPT_BRAHMI = Main.Base.int32(94)
    const MANDAIC = const G_UNICODE_SCRIPT_MANDAIC = Main.Base.int32(95)
    const CHAKMA = const G_UNICODE_SCRIPT_CHAKMA = Main.Base.int32(96)
    const MEROITIC_CURSIVE = const G_UNICODE_SCRIPT_MEROITIC_CURSIVE = Main.Base.int32(97)
    const MEROITIC_HIEROGLYPHS = const G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = Main.Base.int32(98)
    const MIAO = const G_UNICODE_SCRIPT_MIAO = Main.Base.int32(99)
    const SHARADA = const G_UNICODE_SCRIPT_SHARADA = Main.Base.int32(100)
    const SORA_SOMPENG = const G_UNICODE_SCRIPT_SORA_SOMPENG = Main.Base.int32(101)
    const TAKRI = const G_UNICODE_SCRIPT_TAKRI = Main.Base.int32(102)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GNormalizeMode, quote 
    const DEFAULT = const G_NORMALIZE_DEFAULT = Main.Base.int32(0)
    const NFD = const G_NORMALIZE_NFD = Main.Base.int32(0)
    const DEFAULT_COMPOSE = const G_NORMALIZE_DEFAULT_COMPOSE = Main.Base.int32(1)
    const NFC = const G_NORMALIZE_NFC = Main.Base.int32(1)
    const ALL = const G_NORMALIZE_ALL = Main.Base.int32(2)
    const NFKD = const G_NORMALIZE_NFKD = Main.Base.int32(2)
    const ALL_COMPOSE = const G_NORMALIZE_ALL_COMPOSE = Main.Base.int32(3)
    const NFKC = const G_NORMALIZE_NFKC = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GUserDirectory, quote 
    const DIRECTORY_DESKTOP = const G_USER_DIRECTORY_DESKTOP = Main.Base.int32(0)
    const DIRECTORY_DOCUMENTS = const G_USER_DIRECTORY_DOCUMENTS = Main.Base.int32(1)
    const DIRECTORY_DOWNLOAD = const G_USER_DIRECTORY_DOWNLOAD = Main.Base.int32(2)
    const DIRECTORY_MUSIC = const G_USER_DIRECTORY_MUSIC = Main.Base.int32(3)
    const DIRECTORY_PICTURES = const G_USER_DIRECTORY_PICTURES = Main.Base.int32(4)
    const DIRECTORY_PUBLIC_SHARE = const G_USER_DIRECTORY_PUBLIC_SHARE = Main.Base.int32(5)
    const DIRECTORY_TEMPLATES = const G_USER_DIRECTORY_TEMPLATES = Main.Base.int32(6)
    const DIRECTORY_VIDEOS = const G_USER_DIRECTORY_VIDEOS = Main.Base.int32(7)
    const N_DIRECTORIES = const G_USER_N_DIRECTORIES = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFormatSizeFlags, quote 
    const DEFAULT = const G_FORMAT_SIZE_DEFAULT = Main.Base.int32(0)
    const LONG_FORMAT = const G_FORMAT_SIZE_LONG_FORMAT = Main.Base.int32(1)
    const IEC_UNITS = const G_FORMAT_SIZE_IEC_UNITS = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GIOError, quote 
    const NONE = const G_IO_ERROR_NONE = Main.Base.int32(0)
    const AGAIN = const G_IO_ERROR_AGAIN = Main.Base.int32(1)
    const INVAL = const G_IO_ERROR_INVAL = Main.Base.int32(2)
    const UNKNOWN = const G_IO_ERROR_UNKNOWN = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GIOChannelError, quote 
    const FBIG = const G_IO_CHANNEL_ERROR_FBIG = Main.Base.int32(0)
    const INVAL = const G_IO_CHANNEL_ERROR_INVAL = Main.Base.int32(1)
    const IO = const G_IO_CHANNEL_ERROR_IO = Main.Base.int32(2)
    const ISDIR = const G_IO_CHANNEL_ERROR_ISDIR = Main.Base.int32(3)
    const NOSPC = const G_IO_CHANNEL_ERROR_NOSPC = Main.Base.int32(4)
    const NXIO = const G_IO_CHANNEL_ERROR_NXIO = Main.Base.int32(5)
    const OVERFLOW = const G_IO_CHANNEL_ERROR_OVERFLOW = Main.Base.int32(6)
    const PIPE = const G_IO_CHANNEL_ERROR_PIPE = Main.Base.int32(7)
    const FAILED = const G_IO_CHANNEL_ERROR_FAILED = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GIOStatus, quote 
    const ERROR = const G_IO_STATUS_ERROR = Main.Base.int32(0)
    const NORMAL = const G_IO_STATUS_NORMAL = Main.Base.int32(1)
    const EOF = const G_IO_STATUS_EOF = Main.Base.int32(2)
    const AGAIN = const G_IO_STATUS_AGAIN = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSeekType, quote 
    const CUR = const G_SEEK_CUR = Main.Base.int32(0)
    const SET = const G_SEEK_SET = Main.Base.int32(1)
    const END = const G_SEEK_END = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GIOFlags, quote 
    const APPEND = const G_IO_FLAG_APPEND = Main.Base.int32(1)
    const NONBLOCK = const G_IO_FLAG_NONBLOCK = Main.Base.int32(2)
    const IS_READABLE = const G_IO_FLAG_IS_READABLE = Main.Base.int32(4)
    const IS_WRITABLE = const G_IO_FLAG_IS_WRITABLE = Main.Base.int32(8)
    const IS_WRITEABLE = const G_IO_FLAG_IS_WRITEABLE = Main.Base.int32(8)
    const IS_SEEKABLE = const G_IO_FLAG_IS_SEEKABLE = Main.Base.int32(16)
    const MASK = const G_IO_FLAG_MASK = Main.Base.int32(31)
    const GET_MASK = const G_IO_FLAG_GET_MASK = Main.Base.int32(31)
    const SET_MASK = const G_IO_FLAG_SET_MASK = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GKeyFileError, quote 
    const UNKNOWN_ENCODING = const G_KEY_FILE_ERROR_UNKNOWN_ENCODING = Main.Base.int32(0)
    const PARSE = const G_KEY_FILE_ERROR_PARSE = Main.Base.int32(1)
    const NOT_FOUND = const G_KEY_FILE_ERROR_NOT_FOUND = Main.Base.int32(2)
    const KEY_NOT_FOUND = const G_KEY_FILE_ERROR_KEY_NOT_FOUND = Main.Base.int32(3)
    const GROUP_NOT_FOUND = const G_KEY_FILE_ERROR_GROUP_NOT_FOUND = Main.Base.int32(4)
    const INVALID_VALUE = const G_KEY_FILE_ERROR_INVALID_VALUE = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GKeyFileFlags, quote 
    const NONE = const G_KEY_FILE_NONE = Main.Base.int32(0)
    const KEEP_COMMENTS = const G_KEY_FILE_KEEP_COMMENTS = Main.Base.int32(1)
    const KEEP_TRANSLATIONS = const G_KEY_FILE_KEEP_TRANSLATIONS = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GMarkupError, quote 
    const BAD_UTF8 = const G_MARKUP_ERROR_BAD_UTF8 = Main.Base.int32(0)
    const EMPTY = const G_MARKUP_ERROR_EMPTY = Main.Base.int32(1)
    const PARSE = const G_MARKUP_ERROR_PARSE = Main.Base.int32(2)
    const UNKNOWN_ELEMENT = const G_MARKUP_ERROR_UNKNOWN_ELEMENT = Main.Base.int32(3)
    const UNKNOWN_ATTRIBUTE = const G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = Main.Base.int32(4)
    const INVALID_CONTENT = const G_MARKUP_ERROR_INVALID_CONTENT = Main.Base.int32(5)
    const MISSING_ATTRIBUTE = const G_MARKUP_ERROR_MISSING_ATTRIBUTE = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GMarkupParseFlags, quote 
    const DO_NOT_USE_THIS_UNSUPPORTED_FLAG = const G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = Main.Base.int32(1)
    const TREAT_CDATA_AS_TEXT = const G_MARKUP_TREAT_CDATA_AS_TEXT = Main.Base.int32(2)
    const PREFIX_ERROR_POSITION = const G_MARKUP_PREFIX_ERROR_POSITION = Main.Base.int32(4)
    const IGNORE_QUALIFIED = const G_MARKUP_IGNORE_QUALIFIED = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GMarkupCollectType, quote 
    const INVALID = const G_MARKUP_COLLECT_INVALID = Main.Base.int32(0)
    const STRING = const G_MARKUP_COLLECT_STRING = Main.Base.int32(1)
    const STRDUP = const G_MARKUP_COLLECT_STRDUP = Main.Base.int32(2)
    const BOOLEAN = const G_MARKUP_COLLECT_BOOLEAN = Main.Base.int32(3)
    const TRISTATE = const G_MARKUP_COLLECT_TRISTATE = Main.Base.int32(4)
    const OPTIONAL = const G_MARKUP_COLLECT_OPTIONAL = Main.Base.int32(65536)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GLogLevelFlags, quote 
    const FLAG_RECURSION = const G_LOG_FLAG_RECURSION = Main.Base.int32(1)
    const FLAG_FATAL = const G_LOG_FLAG_FATAL = Main.Base.int32(2)
    const LEVEL_ERROR = const G_LOG_LEVEL_ERROR = Main.Base.int32(4)
    const LEVEL_CRITICAL = const G_LOG_LEVEL_CRITICAL = Main.Base.int32(8)
    const LEVEL_WARNING = const G_LOG_LEVEL_WARNING = Main.Base.int32(16)
    const LEVEL_MESSAGE = const G_LOG_LEVEL_MESSAGE = Main.Base.int32(32)
    const LEVEL_INFO = const G_LOG_LEVEL_INFO = Main.Base.int32(64)
    const LEVEL_DEBUG = const G_LOG_LEVEL_DEBUG = Main.Base.int32(128)
    const LEVEL_MASK = const G_LOG_LEVEL_MASK = Main.Base.int32(-4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GOptionFlags, quote 
    const HIDDEN = const G_OPTION_FLAG_HIDDEN = Main.Base.int32(1)
    const IN_MAIN = const G_OPTION_FLAG_IN_MAIN = Main.Base.int32(2)
    const REVERSE = const G_OPTION_FLAG_REVERSE = Main.Base.int32(4)
    const NO_ARG = const G_OPTION_FLAG_NO_ARG = Main.Base.int32(8)
    const FILENAME = const G_OPTION_FLAG_FILENAME = Main.Base.int32(16)
    const OPTIONAL_ARG = const G_OPTION_FLAG_OPTIONAL_ARG = Main.Base.int32(32)
    const NOALIAS = const G_OPTION_FLAG_NOALIAS = Main.Base.int32(64)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GOptionArg, quote 
    const NONE = const G_OPTION_ARG_NONE = Main.Base.int32(0)
    const STRING = const G_OPTION_ARG_STRING = Main.Base.int32(1)
    const INT = const G_OPTION_ARG_INT = Main.Base.int32(2)
    const CALLBACK = const G_OPTION_ARG_CALLBACK = Main.Base.int32(3)
    const FILENAME = const G_OPTION_ARG_FILENAME = Main.Base.int32(4)
    const STRING_ARRAY = const G_OPTION_ARG_STRING_ARRAY = Main.Base.int32(5)
    const FILENAME_ARRAY = const G_OPTION_ARG_FILENAME_ARRAY = Main.Base.int32(6)
    const DOUBLE = const G_OPTION_ARG_DOUBLE = Main.Base.int32(7)
    const INT64 = const G_OPTION_ARG_INT64 = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GOptionError, quote 
    const UNKNOWN_OPTION = const G_OPTION_ERROR_UNKNOWN_OPTION = Main.Base.int32(0)
    const BAD_VALUE = const G_OPTION_ERROR_BAD_VALUE = Main.Base.int32(1)
    const FAILED = const G_OPTION_ERROR_FAILED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GRegexError, quote 
    const COMPILE = const G_REGEX_ERROR_COMPILE = Main.Base.int32(0)
    const OPTIMIZE = const G_REGEX_ERROR_OPTIMIZE = Main.Base.int32(1)
    const REPLACE = const G_REGEX_ERROR_REPLACE = Main.Base.int32(2)
    const MATCH = const G_REGEX_ERROR_MATCH = Main.Base.int32(3)
    const INTERNAL = const G_REGEX_ERROR_INTERNAL = Main.Base.int32(4)
    const STRAY_BACKSLASH = const G_REGEX_ERROR_STRAY_BACKSLASH = Main.Base.int32(101)
    const MISSING_CONTROL_CHAR = const G_REGEX_ERROR_MISSING_CONTROL_CHAR = Main.Base.int32(102)
    const UNRECOGNIZED_ESCAPE = const G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = Main.Base.int32(103)
    const QUANTIFIERS_OUT_OF_ORDER = const G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = Main.Base.int32(104)
    const QUANTIFIER_TOO_BIG = const G_REGEX_ERROR_QUANTIFIER_TOO_BIG = Main.Base.int32(105)
    const UNTERMINATED_CHARACTER_CLASS = const G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = Main.Base.int32(106)
    const INVALID_ESCAPE_IN_CHARACTER_CLASS = const G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = Main.Base.int32(107)
    const RANGE_OUT_OF_ORDER = const G_REGEX_ERROR_RANGE_OUT_OF_ORDER = Main.Base.int32(108)
    const NOTHING_TO_REPEAT = const G_REGEX_ERROR_NOTHING_TO_REPEAT = Main.Base.int32(109)
    const UNRECOGNIZED_CHARACTER = const G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = Main.Base.int32(112)
    const POSIX_NAMED_CLASS_OUTSIDE_CLASS = const G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = Main.Base.int32(113)
    const UNMATCHED_PARENTHESIS = const G_REGEX_ERROR_UNMATCHED_PARENTHESIS = Main.Base.int32(114)
    const INEXISTENT_SUBPATTERN_REFERENCE = const G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = Main.Base.int32(115)
    const UNTERMINATED_COMMENT = const G_REGEX_ERROR_UNTERMINATED_COMMENT = Main.Base.int32(118)
    const EXPRESSION_TOO_LARGE = const G_REGEX_ERROR_EXPRESSION_TOO_LARGE = Main.Base.int32(120)
    const MEMORY_ERROR = const G_REGEX_ERROR_MEMORY_ERROR = Main.Base.int32(121)
    const VARIABLE_LENGTH_LOOKBEHIND = const G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = Main.Base.int32(125)
    const MALFORMED_CONDITION = const G_REGEX_ERROR_MALFORMED_CONDITION = Main.Base.int32(126)
    const TOO_MANY_CONDITIONAL_BRANCHES = const G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = Main.Base.int32(127)
    const ASSERTION_EXPECTED = const G_REGEX_ERROR_ASSERTION_EXPECTED = Main.Base.int32(128)
    const UNKNOWN_POSIX_CLASS_NAME = const G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = Main.Base.int32(130)
    const POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = const G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = Main.Base.int32(131)
    const HEX_CODE_TOO_LARGE = const G_REGEX_ERROR_HEX_CODE_TOO_LARGE = Main.Base.int32(134)
    const INVALID_CONDITION = const G_REGEX_ERROR_INVALID_CONDITION = Main.Base.int32(135)
    const SINGLE_BYTE_MATCH_IN_LOOKBEHIND = const G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = Main.Base.int32(136)
    const INFINITE_LOOP = const G_REGEX_ERROR_INFINITE_LOOP = Main.Base.int32(140)
    const MISSING_SUBPATTERN_NAME_TERMINATOR = const G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = Main.Base.int32(142)
    const DUPLICATE_SUBPATTERN_NAME = const G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = Main.Base.int32(143)
    const MALFORMED_PROPERTY = const G_REGEX_ERROR_MALFORMED_PROPERTY = Main.Base.int32(146)
    const UNKNOWN_PROPERTY = const G_REGEX_ERROR_UNKNOWN_PROPERTY = Main.Base.int32(147)
    const SUBPATTERN_NAME_TOO_LONG = const G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = Main.Base.int32(148)
    const TOO_MANY_SUBPATTERNS = const G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = Main.Base.int32(149)
    const INVALID_OCTAL_VALUE = const G_REGEX_ERROR_INVALID_OCTAL_VALUE = Main.Base.int32(151)
    const TOO_MANY_BRANCHES_IN_DEFINE = const G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = Main.Base.int32(154)
    const DEFINE_REPETION = const G_REGEX_ERROR_DEFINE_REPETION = Main.Base.int32(155)
    const INCONSISTENT_NEWLINE_OPTIONS = const G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = Main.Base.int32(156)
    const MISSING_BACK_REFERENCE = const G_REGEX_ERROR_MISSING_BACK_REFERENCE = Main.Base.int32(157)
    const INVALID_RELATIVE_REFERENCE = const G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = Main.Base.int32(158)
    const BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = const G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = Main.Base.int32(159)
    const UNKNOWN_BACKTRACKING_CONTROL_VERB = const G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = Main.Base.int32(160)
    const NUMBER_TOO_BIG = const G_REGEX_ERROR_NUMBER_TOO_BIG = Main.Base.int32(161)
    const MISSING_SUBPATTERN_NAME = const G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = Main.Base.int32(162)
    const MISSING_DIGIT = const G_REGEX_ERROR_MISSING_DIGIT = Main.Base.int32(163)
    const INVALID_DATA_CHARACTER = const G_REGEX_ERROR_INVALID_DATA_CHARACTER = Main.Base.int32(164)
    const EXTRA_SUBPATTERN_NAME = const G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = Main.Base.int32(165)
    const BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = const G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = Main.Base.int32(166)
    const INVALID_CONTROL_CHAR = const G_REGEX_ERROR_INVALID_CONTROL_CHAR = Main.Base.int32(168)
    const MISSING_NAME = const G_REGEX_ERROR_MISSING_NAME = Main.Base.int32(169)
    const NOT_SUPPORTED_IN_CLASS = const G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = Main.Base.int32(171)
    const TOO_MANY_FORWARD_REFERENCES = const G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = Main.Base.int32(172)
    const NAME_TOO_LONG = const G_REGEX_ERROR_NAME_TOO_LONG = Main.Base.int32(175)
    const CHARACTER_VALUE_TOO_LARGE = const G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = Main.Base.int32(176)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GRegexCompileFlags, quote 
    const CASELESS = const G_REGEX_CASELESS = Main.Base.int32(1)
    const MULTILINE = const G_REGEX_MULTILINE = Main.Base.int32(2)
    const DOTALL = const G_REGEX_DOTALL = Main.Base.int32(4)
    const EXTENDED = const G_REGEX_EXTENDED = Main.Base.int32(8)
    const ANCHORED = const G_REGEX_ANCHORED = Main.Base.int32(16)
    const DOLLAR_ENDONLY = const G_REGEX_DOLLAR_ENDONLY = Main.Base.int32(32)
    const UNGREEDY = const G_REGEX_UNGREEDY = Main.Base.int32(512)
    const RAW = const G_REGEX_RAW = Main.Base.int32(2048)
    const NO_AUTO_CAPTURE = const G_REGEX_NO_AUTO_CAPTURE = Main.Base.int32(4096)
    const OPTIMIZE = const G_REGEX_OPTIMIZE = Main.Base.int32(8192)
    const FIRSTLINE = const G_REGEX_FIRSTLINE = Main.Base.int32(262144)
    const DUPNAMES = const G_REGEX_DUPNAMES = Main.Base.int32(524288)
    const NEWLINE_CR = const G_REGEX_NEWLINE_CR = Main.Base.int32(1048576)
    const NEWLINE_LF = const G_REGEX_NEWLINE_LF = Main.Base.int32(2097152)
    const NEWLINE_CRLF = const G_REGEX_NEWLINE_CRLF = Main.Base.int32(3145728)
    const NEWLINE_ANYCRLF = const G_REGEX_NEWLINE_ANYCRLF = Main.Base.int32(5242880)
    const BSR_ANYCRLF = const G_REGEX_BSR_ANYCRLF = Main.Base.int32(8388608)
    const JAVASCRIPT_COMPAT = const G_REGEX_JAVASCRIPT_COMPAT = Main.Base.int32(33554432)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GRegexMatchFlags, quote 
    const ANCHORED = const G_REGEX_MATCH_ANCHORED = Main.Base.int32(16)
    const NOTBOL = const G_REGEX_MATCH_NOTBOL = Main.Base.int32(128)
    const NOTEOL = const G_REGEX_MATCH_NOTEOL = Main.Base.int32(256)
    const NOTEMPTY = const G_REGEX_MATCH_NOTEMPTY = Main.Base.int32(1024)
    const PARTIAL = const G_REGEX_MATCH_PARTIAL = Main.Base.int32(32768)
    const NEWLINE_CR = const G_REGEX_MATCH_NEWLINE_CR = Main.Base.int32(1048576)
    const NEWLINE_LF = const G_REGEX_MATCH_NEWLINE_LF = Main.Base.int32(2097152)
    const NEWLINE_CRLF = const G_REGEX_MATCH_NEWLINE_CRLF = Main.Base.int32(3145728)
    const NEWLINE_ANY = const G_REGEX_MATCH_NEWLINE_ANY = Main.Base.int32(4194304)
    const NEWLINE_ANYCRLF = const G_REGEX_MATCH_NEWLINE_ANYCRLF = Main.Base.int32(5242880)
    const BSR_ANYCRLF = const G_REGEX_MATCH_BSR_ANYCRLF = Main.Base.int32(8388608)
    const BSR_ANY = const G_REGEX_MATCH_BSR_ANY = Main.Base.int32(16777216)
    const PARTIAL_SOFT = const G_REGEX_MATCH_PARTIAL_SOFT = Main.Base.int32(32768)
    const PARTIAL_HARD = const G_REGEX_MATCH_PARTIAL_HARD = Main.Base.int32(134217728)
    const NOTEMPTY_ATSTART = const G_REGEX_MATCH_NOTEMPTY_ATSTART = Main.Base.int32(268435456)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GErrorType, quote 
    const UNKNOWN = const G_ERR_UNKNOWN = Main.Base.int32(0)
    const UNEXP_EOF = const G_ERR_UNEXP_EOF = Main.Base.int32(1)
    const UNEXP_EOF_IN_STRING = const G_ERR_UNEXP_EOF_IN_STRING = Main.Base.int32(2)
    const UNEXP_EOF_IN_COMMENT = const G_ERR_UNEXP_EOF_IN_COMMENT = Main.Base.int32(3)
    const NON_DIGIT_IN_CONST = const G_ERR_NON_DIGIT_IN_CONST = Main.Base.int32(4)
    const DIGIT_RADIX = const G_ERR_DIGIT_RADIX = Main.Base.int32(5)
    const FLOAT_RADIX = const G_ERR_FLOAT_RADIX = Main.Base.int32(6)
    const FLOAT_MALFORMED = const G_ERR_FLOAT_MALFORMED = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTokenType, quote 
    const EOF = const G_TOKEN_EOF = Main.Base.int32(0)
    const LEFT_PAREN = const G_TOKEN_LEFT_PAREN = Main.Base.int32(40)
    const RIGHT_PAREN = const G_TOKEN_RIGHT_PAREN = Main.Base.int32(41)
    const LEFT_CURLY = const G_TOKEN_LEFT_CURLY = Main.Base.int32(123)
    const RIGHT_CURLY = const G_TOKEN_RIGHT_CURLY = Main.Base.int32(125)
    const LEFT_BRACE = const G_TOKEN_LEFT_BRACE = Main.Base.int32(91)
    const RIGHT_BRACE = const G_TOKEN_RIGHT_BRACE = Main.Base.int32(93)
    const EQUAL_SIGN = const G_TOKEN_EQUAL_SIGN = Main.Base.int32(61)
    const COMMA = const G_TOKEN_COMMA = Main.Base.int32(44)
    const NONE = const G_TOKEN_NONE = Main.Base.int32(256)
    const ERROR = const G_TOKEN_ERROR = Main.Base.int32(257)
    const CHAR = const G_TOKEN_CHAR = Main.Base.int32(258)
    const BINARY = const G_TOKEN_BINARY = Main.Base.int32(259)
    const OCTAL = const G_TOKEN_OCTAL = Main.Base.int32(260)
    const INT = const G_TOKEN_INT = Main.Base.int32(261)
    const HEX = const G_TOKEN_HEX = Main.Base.int32(262)
    const FLOAT = const G_TOKEN_FLOAT = Main.Base.int32(263)
    const STRING = const G_TOKEN_STRING = Main.Base.int32(264)
    const SYMBOL = const G_TOKEN_SYMBOL = Main.Base.int32(265)
    const IDENTIFIER = const G_TOKEN_IDENTIFIER = Main.Base.int32(266)
    const IDENTIFIER_NULL = const G_TOKEN_IDENTIFIER_NULL = Main.Base.int32(267)
    const COMMENT_SINGLE = const G_TOKEN_COMMENT_SINGLE = Main.Base.int32(268)
    const COMMENT_MULTI = const G_TOKEN_COMMENT_MULTI = Main.Base.int32(269)
    const LAST = const G_TOKEN_LAST = Main.Base.int32(270)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GShellError, quote 
    const BAD_QUOTING = const G_SHELL_ERROR_BAD_QUOTING = Main.Base.int32(0)
    const EMPTY_STRING = const G_SHELL_ERROR_EMPTY_STRING = Main.Base.int32(1)
    const FAILED = const G_SHELL_ERROR_FAILED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSliceConfig, quote 
    const ALWAYS_MALLOC = const G_SLICE_CONFIG_ALWAYS_MALLOC = Main.Base.int32(1)
    const BYPASS_MAGAZINES = const G_SLICE_CONFIG_BYPASS_MAGAZINES = Main.Base.int32(2)
    const WORKING_SET_MSECS = const G_SLICE_CONFIG_WORKING_SET_MSECS = Main.Base.int32(3)
    const COLOR_INCREMENT = const G_SLICE_CONFIG_COLOR_INCREMENT = Main.Base.int32(4)
    const CHUNK_SIZES = const G_SLICE_CONFIG_CHUNK_SIZES = Main.Base.int32(5)
    const CONTENTION_COUNTER = const G_SLICE_CONFIG_CONTENTION_COUNTER = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSpawnError, quote 
    const FORK = const G_SPAWN_ERROR_FORK = Main.Base.int32(0)
    const READ = const G_SPAWN_ERROR_READ = Main.Base.int32(1)
    const CHDIR = const G_SPAWN_ERROR_CHDIR = Main.Base.int32(2)
    const ACCES = const G_SPAWN_ERROR_ACCES = Main.Base.int32(3)
    const PERM = const G_SPAWN_ERROR_PERM = Main.Base.int32(4)
    const TOO_BIG = const G_SPAWN_ERROR_TOO_BIG = Main.Base.int32(5)
    const G_SPAWN_ERROR_2BIG = Main.Base.int32(5)
    const NOEXEC = const G_SPAWN_ERROR_NOEXEC = Main.Base.int32(6)
    const NAMETOOLONG = const G_SPAWN_ERROR_NAMETOOLONG = Main.Base.int32(7)
    const NOENT = const G_SPAWN_ERROR_NOENT = Main.Base.int32(8)
    const NOMEM = const G_SPAWN_ERROR_NOMEM = Main.Base.int32(9)
    const NOTDIR = const G_SPAWN_ERROR_NOTDIR = Main.Base.int32(10)
    const LOOP = const G_SPAWN_ERROR_LOOP = Main.Base.int32(11)
    const TXTBUSY = const G_SPAWN_ERROR_TXTBUSY = Main.Base.int32(12)
    const IO = const G_SPAWN_ERROR_IO = Main.Base.int32(13)
    const NFILE = const G_SPAWN_ERROR_NFILE = Main.Base.int32(14)
    const MFILE = const G_SPAWN_ERROR_MFILE = Main.Base.int32(15)
    const INVAL = const G_SPAWN_ERROR_INVAL = Main.Base.int32(16)
    const ISDIR = const G_SPAWN_ERROR_ISDIR = Main.Base.int32(17)
    const LIBBAD = const G_SPAWN_ERROR_LIBBAD = Main.Base.int32(18)
    const FAILED = const G_SPAWN_ERROR_FAILED = Main.Base.int32(19)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSpawnFlags, quote 
    const DEFAULT = const G_SPAWN_DEFAULT = Main.Base.int32(0)
    const LEAVE_DESCRIPTORS_OPEN = const G_SPAWN_LEAVE_DESCRIPTORS_OPEN = Main.Base.int32(1)
    const DO_NOT_REAP_CHILD = const G_SPAWN_DO_NOT_REAP_CHILD = Main.Base.int32(2)
    const SEARCH_PATH = const G_SPAWN_SEARCH_PATH = Main.Base.int32(4)
    const STDOUT_TO_DEV_NULL = const G_SPAWN_STDOUT_TO_DEV_NULL = Main.Base.int32(8)
    const STDERR_TO_DEV_NULL = const G_SPAWN_STDERR_TO_DEV_NULL = Main.Base.int32(16)
    const CHILD_INHERITS_STDIN = const G_SPAWN_CHILD_INHERITS_STDIN = Main.Base.int32(32)
    const FILE_AND_ARGV_ZERO = const G_SPAWN_FILE_AND_ARGV_ZERO = Main.Base.int32(64)
    const SEARCH_PATH_FROM_ENVP = const G_SPAWN_SEARCH_PATH_FROM_ENVP = Main.Base.int32(128)
    const CLOEXEC_PIPES = const G_SPAWN_CLOEXEC_PIPES = Main.Base.int32(256)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GAsciiType, quote 
    const ALNUM = const G_ASCII_ALNUM = Main.Base.int32(1)
    const ALPHA = const G_ASCII_ALPHA = Main.Base.int32(2)
    const CNTRL = const G_ASCII_CNTRL = Main.Base.int32(4)
    const DIGIT = const G_ASCII_DIGIT = Main.Base.int32(8)
    const GRAPH = const G_ASCII_GRAPH = Main.Base.int32(16)
    const LOWER = const G_ASCII_LOWER = Main.Base.int32(32)
    const PRINT = const G_ASCII_PRINT = Main.Base.int32(64)
    const PUNCT = const G_ASCII_PUNCT = Main.Base.int32(128)
    const SPACE = const G_ASCII_SPACE = Main.Base.int32(256)
    const UPPER = const G_ASCII_UPPER = Main.Base.int32(512)
    const XDIGIT = const G_ASCII_XDIGIT = Main.Base.int32(1024)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTestTrapFlags, quote 
    const SILENCE_STDOUT = const G_TEST_TRAP_SILENCE_STDOUT = Main.Base.int32(128)
    const SILENCE_STDERR = const G_TEST_TRAP_SILENCE_STDERR = Main.Base.int32(256)
    const INHERIT_STDIN = const G_TEST_TRAP_INHERIT_STDIN = Main.Base.int32(512)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTestSubprocessFlags, quote 
    const STDIN = const G_TEST_SUBPROCESS_INHERIT_STDIN = Main.Base.int32(1)
    const STDOUT = const G_TEST_SUBPROCESS_INHERIT_STDOUT = Main.Base.int32(2)
    const STDERR = const G_TEST_SUBPROCESS_INHERIT_STDERR = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTestLogType, quote 
    const NONE = const G_TEST_LOG_NONE = Main.Base.int32(0)
    const ERROR = const G_TEST_LOG_ERROR = Main.Base.int32(1)
    const START_BINARY = const G_TEST_LOG_START_BINARY = Main.Base.int32(2)
    const LIST_CASE = const G_TEST_LOG_LIST_CASE = Main.Base.int32(3)
    const SKIP_CASE = const G_TEST_LOG_SKIP_CASE = Main.Base.int32(4)
    const START_CASE = const G_TEST_LOG_START_CASE = Main.Base.int32(5)
    const STOP_CASE = const G_TEST_LOG_STOP_CASE = Main.Base.int32(6)
    const MIN_RESULT = const G_TEST_LOG_MIN_RESULT = Main.Base.int32(7)
    const MAX_RESULT = const G_TEST_LOG_MAX_RESULT = Main.Base.int32(8)
    const MESSAGE = const G_TEST_LOG_MESSAGE = Main.Base.int32(9)
    const START_SUITE = const G_TEST_LOG_START_SUITE = Main.Base.int32(10)
    const STOP_SUITE = const G_TEST_LOG_STOP_SUITE = Main.Base.int32(11)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTestFileType, quote 
    const DIST = const G_TEST_DIST = Main.Base.int32(0)
    const BUILT = const G_TEST_BUILT = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GVariantClass, quote 
    const BOOLEAN = const G_VARIANT_CLASS_BOOLEAN = Main.Base.int32(98)
    const BYTE = const G_VARIANT_CLASS_BYTE = Main.Base.int32(121)
    const INT16 = const G_VARIANT_CLASS_INT16 = Main.Base.int32(110)
    const UINT16 = const G_VARIANT_CLASS_UINT16 = Main.Base.int32(113)
    const INT32 = const G_VARIANT_CLASS_INT32 = Main.Base.int32(105)
    const UINT32 = const G_VARIANT_CLASS_UINT32 = Main.Base.int32(117)
    const INT64 = const G_VARIANT_CLASS_INT64 = Main.Base.int32(120)
    const UINT64 = const G_VARIANT_CLASS_UINT64 = Main.Base.int32(116)
    const HANDLE = const G_VARIANT_CLASS_HANDLE = Main.Base.int32(104)
    const DOUBLE = const G_VARIANT_CLASS_DOUBLE = Main.Base.int32(100)
    const STRING = const G_VARIANT_CLASS_STRING = Main.Base.int32(115)
    const OBJECT_PATH = const G_VARIANT_CLASS_OBJECT_PATH = Main.Base.int32(111)
    const SIGNATURE = const G_VARIANT_CLASS_SIGNATURE = Main.Base.int32(103)
    const VARIANT = const G_VARIANT_CLASS_VARIANT = Main.Base.int32(118)
    const MAYBE = const G_VARIANT_CLASS_MAYBE = Main.Base.int32(109)
    const ARRAY = const G_VARIANT_CLASS_ARRAY = Main.Base.int32(97)
    const TUPLE = const G_VARIANT_CLASS_TUPLE = Main.Base.int32(40)
    const DICT_ENTRY = const G_VARIANT_CLASS_DICT_ENTRY = Main.Base.int32(123)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GVariantParseError, quote 
    const FAILED = const G_VARIANT_PARSE_ERROR_FAILED = Main.Base.int32(0)
    const BASIC_TYPE_EXPECTED = const G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = Main.Base.int32(1)
    const CANNOT_INFER_TYPE = const G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = Main.Base.int32(2)
    const DEFINITE_TYPE_EXPECTED = const G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = Main.Base.int32(3)
    const INPUT_NOT_AT_END = const G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = Main.Base.int32(4)
    const INVALID_CHARACTER = const G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = Main.Base.int32(5)
    const INVALID_FORMAT_STRING = const G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = Main.Base.int32(6)
    const INVALID_OBJECT_PATH = const G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = Main.Base.int32(7)
    const INVALID_SIGNATURE = const G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = Main.Base.int32(8)
    const INVALID_TYPE_STRING = const G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = Main.Base.int32(9)
    const NO_COMMON_TYPE = const G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = Main.Base.int32(10)
    const NUMBER_OUT_OF_RANGE = const G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = Main.Base.int32(11)
    const NUMBER_TOO_BIG = const G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = Main.Base.int32(12)
    const TYPE_ERROR = const G_VARIANT_PARSE_ERROR_TYPE_ERROR = Main.Base.int32(13)
    const UNEXPECTED_TOKEN = const G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = Main.Base.int32(14)
    const UNKNOWN_KEYWORD = const G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = Main.Base.int32(15)
    const UNTERMINATED_STRING_CONSTANT = const G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = Main.Base.int32(16)
    const VALUE_EXPECTED = const G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = Main.Base.int32(17)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GThreadPriority, quote 
    const LOW = const G_THREAD_PRIORITY_LOW = Main.Base.int32(0)
    const NORMAL = const G_THREAD_PRIORITY_NORMAL = Main.Base.int32(1)
    const HIGH = const G_THREAD_PRIORITY_HIGH = Main.Base.int32(2)
    const URGENT = const G_THREAD_PRIORITY_URGENT = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTypeDebugFlags, quote 
    const NONE = const G_TYPE_DEBUG_NONE = Main.Base.int32(0)
    const OBJECTS = const G_TYPE_DEBUG_OBJECTS = Main.Base.int32(1)
    const SIGNALS = const G_TYPE_DEBUG_SIGNALS = Main.Base.int32(2)
    const MASK = const G_TYPE_DEBUG_MASK = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTypeFundamentalFlags, quote 
    const CLASSED = const G_TYPE_FLAG_CLASSED = Main.Base.int32(1)
    const INSTANTIATABLE = const G_TYPE_FLAG_INSTANTIATABLE = Main.Base.int32(2)
    const DERIVABLE = const G_TYPE_FLAG_DERIVABLE = Main.Base.int32(4)
    const DEEP_DERIVABLE = const G_TYPE_FLAG_DEEP_DERIVABLE = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTypeFlags, quote 
    const ABSTRACT = const G_TYPE_FLAG_ABSTRACT = Main.Base.int32(16)
    const VALUE_ABSTRACT = const G_TYPE_FLAG_VALUE_ABSTRACT = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GParamFlags, quote 
    const READABLE = const G_PARAM_READABLE = Main.Base.int32(1)
    const WRITABLE = const G_PARAM_WRITABLE = Main.Base.int32(2)
    const CONSTRUCT = const G_PARAM_CONSTRUCT = Main.Base.int32(4)
    const CONSTRUCT_ONLY = const G_PARAM_CONSTRUCT_ONLY = Main.Base.int32(8)
    const LAX_VALIDATION = const G_PARAM_LAX_VALIDATION = Main.Base.int32(16)
    const STATIC_NAME = const G_PARAM_STATIC_NAME = Main.Base.int32(32)
    const PRIVATE = const G_PARAM_PRIVATE = Main.Base.int32(32)
    const STATIC_NICK = const G_PARAM_STATIC_NICK = Main.Base.int32(64)
    const STATIC_BLURB = const G_PARAM_STATIC_BLURB = Main.Base.int32(128)
    const DEPRECATED = const G_PARAM_DEPRECATED = Main.Base.int32(-2147483648)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSignalFlags, quote 
    const RUN_FIRST = const G_SIGNAL_RUN_FIRST = Main.Base.int32(1)
    const RUN_LAST = const G_SIGNAL_RUN_LAST = Main.Base.int32(2)
    const RUN_CLEANUP = const G_SIGNAL_RUN_CLEANUP = Main.Base.int32(4)
    const NO_RECURSE = const G_SIGNAL_NO_RECURSE = Main.Base.int32(8)
    const DETAILED = const G_SIGNAL_DETAILED = Main.Base.int32(16)
    const ACTION = const G_SIGNAL_ACTION = Main.Base.int32(32)
    const NO_HOOKS = const G_SIGNAL_NO_HOOKS = Main.Base.int32(64)
    const MUST_COLLECT = const G_SIGNAL_MUST_COLLECT = Main.Base.int32(128)
    const DEPRECATED = const G_SIGNAL_DEPRECATED = Main.Base.int32(256)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GConnectFlags, quote 
    const AFTER = const G_CONNECT_AFTER = Main.Base.int32(1)
    const SWAPPED = const G_CONNECT_SWAPPED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSignalMatchType, quote 
    const ID = const G_SIGNAL_MATCH_ID = Main.Base.int32(1)
    const DETAIL = const G_SIGNAL_MATCH_DETAIL = Main.Base.int32(2)
    const CLOSURE = const G_SIGNAL_MATCH_CLOSURE = Main.Base.int32(4)
    const FUNC = const G_SIGNAL_MATCH_FUNC = Main.Base.int32(8)
    const DATA = const G_SIGNAL_MATCH_DATA = Main.Base.int32(16)
    const UNBLOCKED = const G_SIGNAL_MATCH_UNBLOCKED = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GBindingFlags, quote 
    const DEFAULT = const G_BINDING_DEFAULT = Main.Base.int32(0)
    const BIDIRECTIONAL = const G_BINDING_BIDIRECTIONAL = Main.Base.int32(1)
    const SYNC_CREATE = const G_BINDING_SYNC_CREATE = Main.Base.int32(2)
    const INVERT_BOOLEAN = const G_BINDING_INVERT_BOOLEAN = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GAppInfoCreateFlags, quote 
    const NONE = const G_APP_INFO_CREATE_NONE = Main.Base.int32(0)
    const NEEDS_TERMINAL = const G_APP_INFO_CREATE_NEEDS_TERMINAL = Main.Base.int32(1)
    const SUPPORTS_URIS = const G_APP_INFO_CREATE_SUPPORTS_URIS = Main.Base.int32(2)
    const SUPPORTS_STARTUP_NOTIFICATION = const G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GConverterFlags, quote 
    const NO_FLAGS = const G_CONVERTER_NO_FLAGS = Main.Base.int32(0)
    const INPUT_AT_END = const G_CONVERTER_INPUT_AT_END = Main.Base.int32(1)
    const FLUSH = const G_CONVERTER_FLUSH = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GConverterResult, quote 
    const ERROR = const G_CONVERTER_ERROR = Main.Base.int32(0)
    const CONVERTED = const G_CONVERTER_CONVERTED = Main.Base.int32(1)
    const FINISHED = const G_CONVERTER_FINISHED = Main.Base.int32(2)
    const FLUSHED = const G_CONVERTER_FLUSHED = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDataStreamByteOrder, quote 
    const BIG_ENDIAN = const G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = Main.Base.int32(0)
    const LITTLE_ENDIAN = const G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = Main.Base.int32(1)
    const HOST_ENDIAN = const G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDataStreamNewlineType, quote 
    const LF = const G_DATA_STREAM_NEWLINE_TYPE_LF = Main.Base.int32(0)
    const CR = const G_DATA_STREAM_NEWLINE_TYPE_CR = Main.Base.int32(1)
    const CR_LF = const G_DATA_STREAM_NEWLINE_TYPE_CR_LF = Main.Base.int32(2)
    const ANY = const G_DATA_STREAM_NEWLINE_TYPE_ANY = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileAttributeType, quote 
    const INVALID = const G_FILE_ATTRIBUTE_TYPE_INVALID = Main.Base.int32(0)
    const STRING = const G_FILE_ATTRIBUTE_TYPE_STRING = Main.Base.int32(1)
    const BYTE_STRING = const G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = Main.Base.int32(2)
    const BOOLEAN = const G_FILE_ATTRIBUTE_TYPE_BOOLEAN = Main.Base.int32(3)
    const UINT32 = const G_FILE_ATTRIBUTE_TYPE_UINT32 = Main.Base.int32(4)
    const INT32 = const G_FILE_ATTRIBUTE_TYPE_INT32 = Main.Base.int32(5)
    const UINT64 = const G_FILE_ATTRIBUTE_TYPE_UINT64 = Main.Base.int32(6)
    const INT64 = const G_FILE_ATTRIBUTE_TYPE_INT64 = Main.Base.int32(7)
    const OBJECT = const G_FILE_ATTRIBUTE_TYPE_OBJECT = Main.Base.int32(8)
    const STRINGV = const G_FILE_ATTRIBUTE_TYPE_STRINGV = Main.Base.int32(9)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileAttributeInfoFlags, quote 
    const NONE = const G_FILE_ATTRIBUTE_INFO_NONE = Main.Base.int32(0)
    const COPY_WITH_FILE = const G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = Main.Base.int32(1)
    const COPY_WHEN_MOVED = const G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileAttributeStatus, quote 
    const UNSET = const G_FILE_ATTRIBUTE_STATUS_UNSET = Main.Base.int32(0)
    const SET = const G_FILE_ATTRIBUTE_STATUS_SET = Main.Base.int32(1)
    const ERROR_SETTING = const G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileQueryInfoFlags, quote 
    const NONE = const G_FILE_QUERY_INFO_NONE = Main.Base.int32(0)
    const NOFOLLOW_SYMLINKS = const G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileCreateFlags, quote 
    const NONE = const G_FILE_CREATE_NONE = Main.Base.int32(0)
    const PRIVATE = const G_FILE_CREATE_PRIVATE = Main.Base.int32(1)
    const REPLACE_DESTINATION = const G_FILE_CREATE_REPLACE_DESTINATION = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileMeasureFlags, quote 
    const NONE = const G_FILE_MEASURE_NONE = Main.Base.int32(0)
    const REPORT_ANY_ERROR = const G_FILE_MEASURE_REPORT_ANY_ERROR = Main.Base.int32(2)
    const APPARENT_SIZE = const G_FILE_MEASURE_APPARENT_SIZE = Main.Base.int32(4)
    const NO_XDEV = const G_FILE_MEASURE_NO_XDEV = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GMountMountFlags, quote 
    const NONE = const G_MOUNT_MOUNT_NONE = Main.Base.int32(0)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GMountUnmountFlags, quote 
    const NONE = const G_MOUNT_UNMOUNT_NONE = Main.Base.int32(0)
    const FORCE = const G_MOUNT_UNMOUNT_FORCE = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDriveStartFlags, quote 
    const NONE = const G_DRIVE_START_NONE = Main.Base.int32(0)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDriveStartStopType, quote 
    const UNKNOWN = const G_DRIVE_START_STOP_TYPE_UNKNOWN = Main.Base.int32(0)
    const SHUTDOWN = const G_DRIVE_START_STOP_TYPE_SHUTDOWN = Main.Base.int32(1)
    const NETWORK = const G_DRIVE_START_STOP_TYPE_NETWORK = Main.Base.int32(2)
    const MULTIDISK = const G_DRIVE_START_STOP_TYPE_MULTIDISK = Main.Base.int32(3)
    const PASSWORD = const G_DRIVE_START_STOP_TYPE_PASSWORD = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileCopyFlags, quote 
    const NONE = const G_FILE_COPY_NONE = Main.Base.int32(0)
    const OVERWRITE = const G_FILE_COPY_OVERWRITE = Main.Base.int32(1)
    const BACKUP = const G_FILE_COPY_BACKUP = Main.Base.int32(2)
    const NOFOLLOW_SYMLINKS = const G_FILE_COPY_NOFOLLOW_SYMLINKS = Main.Base.int32(4)
    const ALL_METADATA = const G_FILE_COPY_ALL_METADATA = Main.Base.int32(8)
    const NO_FALLBACK_FOR_MOVE = const G_FILE_COPY_NO_FALLBACK_FOR_MOVE = Main.Base.int32(16)
    const TARGET_DEFAULT_PERMS = const G_FILE_COPY_TARGET_DEFAULT_PERMS = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileMonitorFlags, quote 
    const NONE = const G_FILE_MONITOR_NONE = Main.Base.int32(0)
    const WATCH_MOUNTS = const G_FILE_MONITOR_WATCH_MOUNTS = Main.Base.int32(1)
    const SEND_MOVED = const G_FILE_MONITOR_SEND_MOVED = Main.Base.int32(2)
    const WATCH_HARD_LINKS = const G_FILE_MONITOR_WATCH_HARD_LINKS = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileType, quote 
    const UNKNOWN = const G_FILE_TYPE_UNKNOWN = Main.Base.int32(0)
    const REGULAR = const G_FILE_TYPE_REGULAR = Main.Base.int32(1)
    const DIRECTORY = const G_FILE_TYPE_DIRECTORY = Main.Base.int32(2)
    const SYMBOLIC_LINK = const G_FILE_TYPE_SYMBOLIC_LINK = Main.Base.int32(3)
    const SPECIAL = const G_FILE_TYPE_SPECIAL = Main.Base.int32(4)
    const SHORTCUT = const G_FILE_TYPE_SHORTCUT = Main.Base.int32(5)
    const MOUNTABLE = const G_FILE_TYPE_MOUNTABLE = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFilesystemPreviewType, quote 
    const IF_ALWAYS = const G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = Main.Base.int32(0)
    const IF_LOCAL = const G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = Main.Base.int32(1)
    const NEVER = const G_FILESYSTEM_PREVIEW_TYPE_NEVER = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GFileMonitorEvent, quote 
    const CHANGED = const G_FILE_MONITOR_EVENT_CHANGED = Main.Base.int32(0)
    const CHANGES_DONE_HINT = const G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = Main.Base.int32(1)
    const DELETED = const G_FILE_MONITOR_EVENT_DELETED = Main.Base.int32(2)
    const CREATED = const G_FILE_MONITOR_EVENT_CREATED = Main.Base.int32(3)
    const ATTRIBUTE_CHANGED = const G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = Main.Base.int32(4)
    const PRE_UNMOUNT = const G_FILE_MONITOR_EVENT_PRE_UNMOUNT = Main.Base.int32(5)
    const UNMOUNTED = const G_FILE_MONITOR_EVENT_UNMOUNTED = Main.Base.int32(6)
    const MOVED = const G_FILE_MONITOR_EVENT_MOVED = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GIOErrorEnum, quote 
    const FAILED = const G_IO_ERROR_FAILED = Main.Base.int32(0)
    const NOT_FOUND = const G_IO_ERROR_NOT_FOUND = Main.Base.int32(1)
    const EXISTS = const G_IO_ERROR_EXISTS = Main.Base.int32(2)
    const IS_DIRECTORY = const G_IO_ERROR_IS_DIRECTORY = Main.Base.int32(3)
    const NOT_DIRECTORY = const G_IO_ERROR_NOT_DIRECTORY = Main.Base.int32(4)
    const NOT_EMPTY = const G_IO_ERROR_NOT_EMPTY = Main.Base.int32(5)
    const NOT_REGULAR_FILE = const G_IO_ERROR_NOT_REGULAR_FILE = Main.Base.int32(6)
    const NOT_SYMBOLIC_LINK = const G_IO_ERROR_NOT_SYMBOLIC_LINK = Main.Base.int32(7)
    const NOT_MOUNTABLE_FILE = const G_IO_ERROR_NOT_MOUNTABLE_FILE = Main.Base.int32(8)
    const FILENAME_TOO_LONG = const G_IO_ERROR_FILENAME_TOO_LONG = Main.Base.int32(9)
    const INVALID_FILENAME = const G_IO_ERROR_INVALID_FILENAME = Main.Base.int32(10)
    const TOO_MANY_LINKS = const G_IO_ERROR_TOO_MANY_LINKS = Main.Base.int32(11)
    const NO_SPACE = const G_IO_ERROR_NO_SPACE = Main.Base.int32(12)
    const INVALID_ARGUMENT = const G_IO_ERROR_INVALID_ARGUMENT = Main.Base.int32(13)
    const PERMISSION_DENIED = const G_IO_ERROR_PERMISSION_DENIED = Main.Base.int32(14)
    const NOT_SUPPORTED = const G_IO_ERROR_NOT_SUPPORTED = Main.Base.int32(15)
    const NOT_MOUNTED = const G_IO_ERROR_NOT_MOUNTED = Main.Base.int32(16)
    const ALREADY_MOUNTED = const G_IO_ERROR_ALREADY_MOUNTED = Main.Base.int32(17)
    const CLOSED = const G_IO_ERROR_CLOSED = Main.Base.int32(18)
    const CANCELLED = const G_IO_ERROR_CANCELLED = Main.Base.int32(19)
    const PENDING = const G_IO_ERROR_PENDING = Main.Base.int32(20)
    const READ_ONLY = const G_IO_ERROR_READ_ONLY = Main.Base.int32(21)
    const CANT_CREATE_BACKUP = const G_IO_ERROR_CANT_CREATE_BACKUP = Main.Base.int32(22)
    const WRONG_ETAG = const G_IO_ERROR_WRONG_ETAG = Main.Base.int32(23)
    const TIMED_OUT = const G_IO_ERROR_TIMED_OUT = Main.Base.int32(24)
    const WOULD_RECURSE = const G_IO_ERROR_WOULD_RECURSE = Main.Base.int32(25)
    const BUSY = const G_IO_ERROR_BUSY = Main.Base.int32(26)
    const WOULD_BLOCK = const G_IO_ERROR_WOULD_BLOCK = Main.Base.int32(27)
    const HOST_NOT_FOUND = const G_IO_ERROR_HOST_NOT_FOUND = Main.Base.int32(28)
    const WOULD_MERGE = const G_IO_ERROR_WOULD_MERGE = Main.Base.int32(29)
    const FAILED_HANDLED = const G_IO_ERROR_FAILED_HANDLED = Main.Base.int32(30)
    const TOO_MANY_OPEN_FILES = const G_IO_ERROR_TOO_MANY_OPEN_FILES = Main.Base.int32(31)
    const NOT_INITIALIZED = const G_IO_ERROR_NOT_INITIALIZED = Main.Base.int32(32)
    const ADDRESS_IN_USE = const G_IO_ERROR_ADDRESS_IN_USE = Main.Base.int32(33)
    const PARTIAL_INPUT = const G_IO_ERROR_PARTIAL_INPUT = Main.Base.int32(34)
    const INVALID_DATA = const G_IO_ERROR_INVALID_DATA = Main.Base.int32(35)
    const DBUS_ERROR = const G_IO_ERROR_DBUS_ERROR = Main.Base.int32(36)
    const HOST_UNREACHABLE = const G_IO_ERROR_HOST_UNREACHABLE = Main.Base.int32(37)
    const NETWORK_UNREACHABLE = const G_IO_ERROR_NETWORK_UNREACHABLE = Main.Base.int32(38)
    const CONNECTION_REFUSED = const G_IO_ERROR_CONNECTION_REFUSED = Main.Base.int32(39)
    const PROXY_FAILED = const G_IO_ERROR_PROXY_FAILED = Main.Base.int32(40)
    const PROXY_AUTH_FAILED = const G_IO_ERROR_PROXY_AUTH_FAILED = Main.Base.int32(41)
    const PROXY_NEED_AUTH = const G_IO_ERROR_PROXY_NEED_AUTH = Main.Base.int32(42)
    const PROXY_NOT_ALLOWED = const G_IO_ERROR_PROXY_NOT_ALLOWED = Main.Base.int32(43)
    const BROKEN_PIPE = const G_IO_ERROR_BROKEN_PIPE = Main.Base.int32(44)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GAskPasswordFlags, quote 
    const NEED_PASSWORD = const G_ASK_PASSWORD_NEED_PASSWORD = Main.Base.int32(1)
    const NEED_USERNAME = const G_ASK_PASSWORD_NEED_USERNAME = Main.Base.int32(2)
    const NEED_DOMAIN = const G_ASK_PASSWORD_NEED_DOMAIN = Main.Base.int32(4)
    const SAVING_SUPPORTED = const G_ASK_PASSWORD_SAVING_SUPPORTED = Main.Base.int32(8)
    const ANONYMOUS_SUPPORTED = const G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = Main.Base.int32(16)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GPasswordSave, quote 
    const NEVER = const G_PASSWORD_SAVE_NEVER = Main.Base.int32(0)
    const FOR_SESSION = const G_PASSWORD_SAVE_FOR_SESSION = Main.Base.int32(1)
    const PERMANENTLY = const G_PASSWORD_SAVE_PERMANENTLY = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GMountOperationResult, quote 
    const HANDLED = const G_MOUNT_OPERATION_HANDLED = Main.Base.int32(0)
    const ABORTED = const G_MOUNT_OPERATION_ABORTED = Main.Base.int32(1)
    const UNHANDLED = const G_MOUNT_OPERATION_UNHANDLED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GOutputStreamSpliceFlags, quote 
    const NONE = const G_OUTPUT_STREAM_SPLICE_NONE = Main.Base.int32(0)
    const CLOSE_SOURCE = const G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = Main.Base.int32(1)
    const CLOSE_TARGET = const G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GIOStreamSpliceFlags, quote 
    const NONE = const G_IO_STREAM_SPLICE_NONE = Main.Base.int32(0)
    const CLOSE_STREAM1 = const G_IO_STREAM_SPLICE_CLOSE_STREAM1 = Main.Base.int32(1)
    const CLOSE_STREAM2 = const G_IO_STREAM_SPLICE_CLOSE_STREAM2 = Main.Base.int32(2)
    const WAIT_FOR_BOTH = const G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GEmblemOrigin, quote 
    const UNKNOWN = const G_EMBLEM_ORIGIN_UNKNOWN = Main.Base.int32(0)
    const DEVICE = const G_EMBLEM_ORIGIN_DEVICE = Main.Base.int32(1)
    const LIVEMETADATA = const G_EMBLEM_ORIGIN_LIVEMETADATA = Main.Base.int32(2)
    const TAG = const G_EMBLEM_ORIGIN_TAG = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GResolverError, quote 
    const NOT_FOUND = const G_RESOLVER_ERROR_NOT_FOUND = Main.Base.int32(0)
    const TEMPORARY_FAILURE = const G_RESOLVER_ERROR_TEMPORARY_FAILURE = Main.Base.int32(1)
    const INTERNAL = const G_RESOLVER_ERROR_INTERNAL = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GResolverRecordType, quote 
    const SRV = const G_RESOLVER_RECORD_SRV = Main.Base.int32(1)
    const MX = const G_RESOLVER_RECORD_MX = Main.Base.int32(2)
    const TXT = const G_RESOLVER_RECORD_TXT = Main.Base.int32(3)
    const SOA = const G_RESOLVER_RECORD_SOA = Main.Base.int32(4)
    const NS = const G_RESOLVER_RECORD_NS = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GResourceError, quote 
    const NOT_FOUND = const G_RESOURCE_ERROR_NOT_FOUND = Main.Base.int32(0)
    const INTERNAL = const G_RESOURCE_ERROR_INTERNAL = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GResourceFlags, quote 
    const NONE = const G_RESOURCE_FLAGS_NONE = Main.Base.int32(0)
    const COMPRESSED = const G_RESOURCE_FLAGS_COMPRESSED = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GResourceLookupFlags, quote 
    const NONE = const G_RESOURCE_LOOKUP_FLAGS_NONE = Main.Base.int32(0)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSocketFamily, quote 
    const INVALID = const G_SOCKET_FAMILY_INVALID = Main.Base.int32(0)
    const UNIX = const G_SOCKET_FAMILY_UNIX = Main.Base.int32(1)
    const IPV4 = const G_SOCKET_FAMILY_IPV4 = Main.Base.int32(2)
    const IPV6 = const G_SOCKET_FAMILY_IPV6 = Main.Base.int32(30)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSocketType, quote 
    const INVALID = const G_SOCKET_TYPE_INVALID = Main.Base.int32(0)
    const STREAM = const G_SOCKET_TYPE_STREAM = Main.Base.int32(1)
    const DATAGRAM = const G_SOCKET_TYPE_DATAGRAM = Main.Base.int32(2)
    const SEQPACKET = const G_SOCKET_TYPE_SEQPACKET = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSocketMsgFlags, quote 
    const NONE = const G_SOCKET_MSG_NONE = Main.Base.int32(0)
    const OOB = const G_SOCKET_MSG_OOB = Main.Base.int32(1)
    const PEEK = const G_SOCKET_MSG_PEEK = Main.Base.int32(2)
    const DONTROUTE = const G_SOCKET_MSG_DONTROUTE = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSocketProtocol, quote 
    const UNKNOWN = const G_SOCKET_PROTOCOL_UNKNOWN = Main.Base.int32(-1)
    const DEFAULT = const G_SOCKET_PROTOCOL_DEFAULT = Main.Base.int32(0)
    const TCP = const G_SOCKET_PROTOCOL_TCP = Main.Base.int32(6)
    const UDP = const G_SOCKET_PROTOCOL_UDP = Main.Base.int32(17)
    const SCTP = const G_SOCKET_PROTOCOL_SCTP = Main.Base.int32(132)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GZlibCompressorFormat, quote 
    const ZLIB = const G_ZLIB_COMPRESSOR_FORMAT_ZLIB = Main.Base.int32(0)
    const GZIP = const G_ZLIB_COMPRESSOR_FORMAT_GZIP = Main.Base.int32(1)
    const RAW = const G_ZLIB_COMPRESSOR_FORMAT_RAW = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GUnixSocketAddressType, quote 
    const INVALID = const G_UNIX_SOCKET_ADDRESS_INVALID = Main.Base.int32(0)
    const ANONYMOUS = const G_UNIX_SOCKET_ADDRESS_ANONYMOUS = Main.Base.int32(1)
    const PATH = const G_UNIX_SOCKET_ADDRESS_PATH = Main.Base.int32(2)
    const ABSTRACT = const G_UNIX_SOCKET_ADDRESS_ABSTRACT = Main.Base.int32(3)
    const ABSTRACT_PADDED = const G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GBusType, quote 
    const STARTER = const G_BUS_TYPE_STARTER = Main.Base.int32(-1)
    const NONE = const G_BUS_TYPE_NONE = Main.Base.int32(0)
    const SYSTEM = const G_BUS_TYPE_SYSTEM = Main.Base.int32(1)
    const SESSION = const G_BUS_TYPE_SESSION = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GBusNameOwnerFlags, quote 
    const NONE = const G_BUS_NAME_OWNER_FLAGS_NONE = Main.Base.int32(0)
    const ALLOW_REPLACEMENT = const G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = Main.Base.int32(1)
    const REPLACE = const G_BUS_NAME_OWNER_FLAGS_REPLACE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GBusNameWatcherFlags, quote 
    const NONE = const G_BUS_NAME_WATCHER_FLAGS_NONE = Main.Base.int32(0)
    const AUTO_START = const G_BUS_NAME_WATCHER_FLAGS_AUTO_START = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusProxyFlags, quote 
    const NONE = const G_DBUS_PROXY_FLAGS_NONE = Main.Base.int32(0)
    const DO_NOT_LOAD_PROPERTIES = const G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = Main.Base.int32(1)
    const DO_NOT_CONNECT_SIGNALS = const G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = Main.Base.int32(2)
    const DO_NOT_AUTO_START = const G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = Main.Base.int32(4)
    const GET_INVALIDATED_PROPERTIES = const G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = Main.Base.int32(8)
    const DO_NOT_AUTO_START_AT_CONSTRUCTION = const G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = Main.Base.int32(16)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusError, quote 
    const FAILED = const G_DBUS_ERROR_FAILED = Main.Base.int32(0)
    const NO_MEMORY = const G_DBUS_ERROR_NO_MEMORY = Main.Base.int32(1)
    const SERVICE_UNKNOWN = const G_DBUS_ERROR_SERVICE_UNKNOWN = Main.Base.int32(2)
    const NAME_HAS_NO_OWNER = const G_DBUS_ERROR_NAME_HAS_NO_OWNER = Main.Base.int32(3)
    const NO_REPLY = const G_DBUS_ERROR_NO_REPLY = Main.Base.int32(4)
    const IO_ERROR = const G_DBUS_ERROR_IO_ERROR = Main.Base.int32(5)
    const BAD_ADDRESS = const G_DBUS_ERROR_BAD_ADDRESS = Main.Base.int32(6)
    const NOT_SUPPORTED = const G_DBUS_ERROR_NOT_SUPPORTED = Main.Base.int32(7)
    const LIMITS_EXCEEDED = const G_DBUS_ERROR_LIMITS_EXCEEDED = Main.Base.int32(8)
    const ACCESS_DENIED = const G_DBUS_ERROR_ACCESS_DENIED = Main.Base.int32(9)
    const AUTH_FAILED = const G_DBUS_ERROR_AUTH_FAILED = Main.Base.int32(10)
    const NO_SERVER = const G_DBUS_ERROR_NO_SERVER = Main.Base.int32(11)
    const TIMEOUT = const G_DBUS_ERROR_TIMEOUT = Main.Base.int32(12)
    const NO_NETWORK = const G_DBUS_ERROR_NO_NETWORK = Main.Base.int32(13)
    const ADDRESS_IN_USE = const G_DBUS_ERROR_ADDRESS_IN_USE = Main.Base.int32(14)
    const DISCONNECTED = const G_DBUS_ERROR_DISCONNECTED = Main.Base.int32(15)
    const INVALID_ARGS = const G_DBUS_ERROR_INVALID_ARGS = Main.Base.int32(16)
    const FILE_NOT_FOUND = const G_DBUS_ERROR_FILE_NOT_FOUND = Main.Base.int32(17)
    const FILE_EXISTS = const G_DBUS_ERROR_FILE_EXISTS = Main.Base.int32(18)
    const UNKNOWN_METHOD = const G_DBUS_ERROR_UNKNOWN_METHOD = Main.Base.int32(19)
    const TIMED_OUT = const G_DBUS_ERROR_TIMED_OUT = Main.Base.int32(20)
    const MATCH_RULE_NOT_FOUND = const G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = Main.Base.int32(21)
    const MATCH_RULE_INVALID = const G_DBUS_ERROR_MATCH_RULE_INVALID = Main.Base.int32(22)
    const SPAWN_EXEC_FAILED = const G_DBUS_ERROR_SPAWN_EXEC_FAILED = Main.Base.int32(23)
    const SPAWN_FORK_FAILED = const G_DBUS_ERROR_SPAWN_FORK_FAILED = Main.Base.int32(24)
    const SPAWN_CHILD_EXITED = const G_DBUS_ERROR_SPAWN_CHILD_EXITED = Main.Base.int32(25)
    const SPAWN_CHILD_SIGNALED = const G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = Main.Base.int32(26)
    const SPAWN_FAILED = const G_DBUS_ERROR_SPAWN_FAILED = Main.Base.int32(27)
    const SPAWN_SETUP_FAILED = const G_DBUS_ERROR_SPAWN_SETUP_FAILED = Main.Base.int32(28)
    const SPAWN_CONFIG_INVALID = const G_DBUS_ERROR_SPAWN_CONFIG_INVALID = Main.Base.int32(29)
    const SPAWN_SERVICE_INVALID = const G_DBUS_ERROR_SPAWN_SERVICE_INVALID = Main.Base.int32(30)
    const SPAWN_SERVICE_NOT_FOUND = const G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = Main.Base.int32(31)
    const SPAWN_PERMISSIONS_INVALID = const G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = Main.Base.int32(32)
    const SPAWN_FILE_INVALID = const G_DBUS_ERROR_SPAWN_FILE_INVALID = Main.Base.int32(33)
    const SPAWN_NO_MEMORY = const G_DBUS_ERROR_SPAWN_NO_MEMORY = Main.Base.int32(34)
    const UNIX_PROCESS_ID_UNKNOWN = const G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = Main.Base.int32(35)
    const INVALID_SIGNATURE = const G_DBUS_ERROR_INVALID_SIGNATURE = Main.Base.int32(36)
    const INVALID_FILE_CONTENT = const G_DBUS_ERROR_INVALID_FILE_CONTENT = Main.Base.int32(37)
    const SELINUX_SECURITY_CONTEXT_UNKNOWN = const G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = Main.Base.int32(38)
    const ADT_AUDIT_DATA_UNKNOWN = const G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = Main.Base.int32(39)
    const OBJECT_PATH_IN_USE = const G_DBUS_ERROR_OBJECT_PATH_IN_USE = Main.Base.int32(40)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusConnectionFlags, quote 
    const NONE = const G_DBUS_CONNECTION_FLAGS_NONE = Main.Base.int32(0)
    const AUTHENTICATION_CLIENT = const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = Main.Base.int32(1)
    const AUTHENTICATION_SERVER = const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = Main.Base.int32(2)
    const AUTHENTICATION_ALLOW_ANONYMOUS = const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = Main.Base.int32(4)
    const MESSAGE_BUS_CONNECTION = const G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = Main.Base.int32(8)
    const DELAY_MESSAGE_PROCESSING = const G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = Main.Base.int32(16)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusCapabilityFlags, quote 
    const NONE = const G_DBUS_CAPABILITY_FLAGS_NONE = Main.Base.int32(0)
    const UNIX_FD_PASSING = const G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusCallFlags, quote 
    const NONE = const G_DBUS_CALL_FLAGS_NONE = Main.Base.int32(0)
    const NO_AUTO_START = const G_DBUS_CALL_FLAGS_NO_AUTO_START = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusMessageType, quote 
    const INVALID = const G_DBUS_MESSAGE_TYPE_INVALID = Main.Base.int32(0)
    const METHOD_CALL = const G_DBUS_MESSAGE_TYPE_METHOD_CALL = Main.Base.int32(1)
    const METHOD_RETURN = const G_DBUS_MESSAGE_TYPE_METHOD_RETURN = Main.Base.int32(2)
    const ERROR = const G_DBUS_MESSAGE_TYPE_ERROR = Main.Base.int32(3)
    const SIGNAL = const G_DBUS_MESSAGE_TYPE_SIGNAL = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusMessageFlags, quote 
    const NONE = const G_DBUS_MESSAGE_FLAGS_NONE = Main.Base.int32(0)
    const NO_REPLY_EXPECTED = const G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = Main.Base.int32(1)
    const NO_AUTO_START = const G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusMessageHeaderField, quote 
    const INVALID = const G_DBUS_MESSAGE_HEADER_FIELD_INVALID = Main.Base.int32(0)
    const PATH = const G_DBUS_MESSAGE_HEADER_FIELD_PATH = Main.Base.int32(1)
    const INTERFACE = const G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = Main.Base.int32(2)
    const MEMBER = const G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = Main.Base.int32(3)
    const ERROR_NAME = const G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = Main.Base.int32(4)
    const REPLY_SERIAL = const G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = Main.Base.int32(5)
    const DESTINATION = const G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = Main.Base.int32(6)
    const SENDER = const G_DBUS_MESSAGE_HEADER_FIELD_SENDER = Main.Base.int32(7)
    const SIGNATURE = const G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = Main.Base.int32(8)
    const NUM_UNIX_FDS = const G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = Main.Base.int32(9)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusPropertyInfoFlags, quote 
    const NONE = const G_DBUS_PROPERTY_INFO_FLAGS_NONE = Main.Base.int32(0)
    const READABLE = const G_DBUS_PROPERTY_INFO_FLAGS_READABLE = Main.Base.int32(1)
    const WRITABLE = const G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusSubtreeFlags, quote 
    const NONE = const G_DBUS_SUBTREE_FLAGS_NONE = Main.Base.int32(0)
    const DISPATCH_TO_UNENUMERATED_NODES = const G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusServerFlags, quote 
    const NONE = const G_DBUS_SERVER_FLAGS_NONE = Main.Base.int32(0)
    const RUN_IN_THREAD = const G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = Main.Base.int32(1)
    const AUTHENTICATION_ALLOW_ANONYMOUS = const G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusSignalFlags, quote 
    const NONE = const G_DBUS_SIGNAL_FLAGS_NONE = Main.Base.int32(0)
    const NO_MATCH_RULE = const G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = Main.Base.int32(1)
    const MATCH_ARG0_NAMESPACE = const G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = Main.Base.int32(2)
    const MATCH_ARG0_PATH = const G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusSendMessageFlags, quote 
    const NONE = const G_DBUS_SEND_MESSAGE_FLAGS_NONE = Main.Base.int32(0)
    const PRESERVE_SERIAL = const G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GCredentialsType, quote 
    const INVALID = const G_CREDENTIALS_TYPE_INVALID = Main.Base.int32(0)
    const LINUX_UCRED = const G_CREDENTIALS_TYPE_LINUX_UCRED = Main.Base.int32(1)
    const FREEBSD_CMSGCRED = const G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = Main.Base.int32(2)
    const OPENBSD_SOCKPEERCRED = const G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = Main.Base.int32(3)
    const SOLARIS_UCRED = const G_CREDENTIALS_TYPE_SOLARIS_UCRED = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusMessageByteOrder, quote 
    const BIG_ENDIAN = const G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = Main.Base.int32(66)
    const LITTLE_ENDIAN = const G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = Main.Base.int32(108)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GApplicationFlags, quote 
    const FLAGS_NONE = const G_APPLICATION_FLAGS_NONE = Main.Base.int32(0)
    const IS_SERVICE = const G_APPLICATION_IS_SERVICE = Main.Base.int32(1)
    const IS_LAUNCHER = const G_APPLICATION_IS_LAUNCHER = Main.Base.int32(2)
    const HANDLES_OPEN = const G_APPLICATION_HANDLES_OPEN = Main.Base.int32(4)
    const HANDLES_COMMAND_LINE = const G_APPLICATION_HANDLES_COMMAND_LINE = Main.Base.int32(8)
    const SEND_ENVIRONMENT = const G_APPLICATION_SEND_ENVIRONMENT = Main.Base.int32(16)
    const NON_UNIQUE = const G_APPLICATION_NON_UNIQUE = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsError, quote 
    const UNAVAILABLE = const G_TLS_ERROR_UNAVAILABLE = Main.Base.int32(0)
    const MISC = const G_TLS_ERROR_MISC = Main.Base.int32(1)
    const BAD_CERTIFICATE = const G_TLS_ERROR_BAD_CERTIFICATE = Main.Base.int32(2)
    const NOT_TLS = const G_TLS_ERROR_NOT_TLS = Main.Base.int32(3)
    const HANDSHAKE = const G_TLS_ERROR_HANDSHAKE = Main.Base.int32(4)
    const CERTIFICATE_REQUIRED = const G_TLS_ERROR_CERTIFICATE_REQUIRED = Main.Base.int32(5)
    const EOF = const G_TLS_ERROR_EOF = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsCertificateFlags, quote 
    const UNKNOWN_CA = const G_TLS_CERTIFICATE_UNKNOWN_CA = Main.Base.int32(1)
    const BAD_IDENTITY = const G_TLS_CERTIFICATE_BAD_IDENTITY = Main.Base.int32(2)
    const NOT_ACTIVATED = const G_TLS_CERTIFICATE_NOT_ACTIVATED = Main.Base.int32(4)
    const EXPIRED = const G_TLS_CERTIFICATE_EXPIRED = Main.Base.int32(8)
    const REVOKED = const G_TLS_CERTIFICATE_REVOKED = Main.Base.int32(16)
    const INSECURE = const G_TLS_CERTIFICATE_INSECURE = Main.Base.int32(32)
    const GENERIC_ERROR = const G_TLS_CERTIFICATE_GENERIC_ERROR = Main.Base.int32(64)
    const VALIDATE_ALL = const G_TLS_CERTIFICATE_VALIDATE_ALL = Main.Base.int32(127)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsAuthenticationMode, quote 
    const NONE = const G_TLS_AUTHENTICATION_NONE = Main.Base.int32(0)
    const REQUESTED = const G_TLS_AUTHENTICATION_REQUESTED = Main.Base.int32(1)
    const REQUIRED = const G_TLS_AUTHENTICATION_REQUIRED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsRehandshakeMode, quote 
    const NEVER = const G_TLS_REHANDSHAKE_NEVER = Main.Base.int32(0)
    const SAFELY = const G_TLS_REHANDSHAKE_SAFELY = Main.Base.int32(1)
    const UNSAFELY = const G_TLS_REHANDSHAKE_UNSAFELY = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsPasswordFlags, quote 
    const NONE = const G_TLS_PASSWORD_NONE = Main.Base.int32(0)
    const RETRY = const G_TLS_PASSWORD_RETRY = Main.Base.int32(2)
    const MANY_TRIES = const G_TLS_PASSWORD_MANY_TRIES = Main.Base.int32(4)
    const FINAL_TRY = const G_TLS_PASSWORD_FINAL_TRY = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsInteractionResult, quote 
    const UNHANDLED = const G_TLS_INTERACTION_UNHANDLED = Main.Base.int32(0)
    const HANDLED = const G_TLS_INTERACTION_HANDLED = Main.Base.int32(1)
    const FAILED = const G_TLS_INTERACTION_FAILED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusInterfaceSkeletonFlags, quote 
    const NONE = const G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = Main.Base.int32(0)
    const HANDLE_METHOD_INVOCATIONS_IN_THREAD = const G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GDBusObjectManagerClientFlags, quote 
    const NONE = const G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = Main.Base.int32(0)
    const DO_NOT_AUTO_START = const G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsDatabaseVerifyFlags, quote 
    const NONE = const G_TLS_DATABASE_VERIFY_NONE = Main.Base.int32(0)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsDatabaseLookupFlags, quote 
    const NONE = const G_TLS_DATABASE_LOOKUP_NONE = Main.Base.int32(0)
    const KEYPAIR = const G_TLS_DATABASE_LOOKUP_KEYPAIR = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTlsCertificateRequestFlags, quote 
    const NONE = const G_TLS_CERTIFICATE_REQUEST_NONE = Main.Base.int32(0)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GIOModuleScopeFlags, quote 
    const NONE = const G_IO_MODULE_SCOPE_NONE = Main.Base.int32(0)
    const BLOCK_DUPLICATES = const G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSocketClientEvent, quote 
    const RESOLVING = const G_SOCKET_CLIENT_RESOLVING = Main.Base.int32(0)
    const RESOLVED = const G_SOCKET_CLIENT_RESOLVED = Main.Base.int32(1)
    const CONNECTING = const G_SOCKET_CLIENT_CONNECTING = Main.Base.int32(2)
    const CONNECTED = const G_SOCKET_CLIENT_CONNECTED = Main.Base.int32(3)
    const PROXY_NEGOTIATING = const G_SOCKET_CLIENT_PROXY_NEGOTIATING = Main.Base.int32(4)
    const PROXY_NEGOTIATED = const G_SOCKET_CLIENT_PROXY_NEGOTIATED = Main.Base.int32(5)
    const TLS_HANDSHAKING = const G_SOCKET_CLIENT_TLS_HANDSHAKING = Main.Base.int32(6)
    const TLS_HANDSHAKED = const G_SOCKET_CLIENT_TLS_HANDSHAKED = Main.Base.int32(7)
    const COMPLETE = const G_SOCKET_CLIENT_COMPLETE = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GTestDBusFlags, quote 
    const NONE = const G_TEST_DBUS_NONE = Main.Base.int32(0)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSubprocessFlags, quote 
    const NONE = const G_SUBPROCESS_FLAGS_NONE = Main.Base.int32(0)
    const STDIN_PIPE = const G_SUBPROCESS_FLAGS_STDIN_PIPE = Main.Base.int32(1)
    const STDIN_INHERIT = const G_SUBPROCESS_FLAGS_STDIN_INHERIT = Main.Base.int32(2)
    const STDOUT_PIPE = const G_SUBPROCESS_FLAGS_STDOUT_PIPE = Main.Base.int32(4)
    const STDOUT_SILENCE = const G_SUBPROCESS_FLAGS_STDOUT_SILENCE = Main.Base.int32(8)
    const STDERR_PIPE = const G_SUBPROCESS_FLAGS_STDERR_PIPE = Main.Base.int32(16)
    const STDERR_SILENCE = const G_SUBPROCESS_FLAGS_STDERR_SILENCE = Main.Base.int32(32)
    const STDERR_MERGE = const G_SUBPROCESS_FLAGS_STDERR_MERGE = Main.Base.int32(64)
    const INHERIT_FDS = const G_SUBPROCESS_FLAGS_INHERIT_FDS = Main.Base.int32(128)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GModuleFlags, quote 
    const LAZY = const G_MODULE_BIND_LAZY = Main.Base.int32(1)
    const LOCAL = const G_MODULE_BIND_LOCAL = Main.Base.int32(2)
    const MASK = const G_MODULE_BIND_MASK = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GSettingsBindFlags, quote 
    const DEFAULT = const G_SETTINGS_BIND_DEFAULT = Main.Base.int32(0)
    const GET = const G_SETTINGS_BIND_GET = Main.Base.int32(1)
    const SET = const G_SETTINGS_BIND_SET = Main.Base.int32(2)
    const NO_SENSITIVITY = const G_SETTINGS_BIND_NO_SENSITIVITY = Main.Base.int32(4)
    const GET_NO_CHANGES = const G_SETTINGS_BIND_GET_NO_CHANGES = Main.Base.int32(8)
    const INVERT_BOOLEAN = const G_SETTINGS_BIND_INVERT_BOOLEAN = Main.Base.int32(16)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkByteOrder, quote 
    const LSB_FIRST = const GDK_LSB_FIRST = Main.Base.int32(0)
    const MSB_FIRST = const GDK_MSB_FIRST = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkModifierType, quote 
    const SHIFT = const GDK_SHIFT_MASK = Main.Base.int32(1)
    const LOCK = const GDK_LOCK_MASK = Main.Base.int32(2)
    const CONTROL = const GDK_CONTROL_MASK = Main.Base.int32(4)
    const MOD1 = const GDK_MOD1_MASK = Main.Base.int32(8)
    const MOD2 = const GDK_MOD2_MASK = Main.Base.int32(16)
    const MOD3 = const GDK_MOD3_MASK = Main.Base.int32(32)
    const MOD4 = const GDK_MOD4_MASK = Main.Base.int32(64)
    const MOD5 = const GDK_MOD5_MASK = Main.Base.int32(128)
    const BUTTON1 = const GDK_BUTTON1_MASK = Main.Base.int32(256)
    const BUTTON2 = const GDK_BUTTON2_MASK = Main.Base.int32(512)
    const BUTTON3 = const GDK_BUTTON3_MASK = Main.Base.int32(1024)
    const BUTTON4 = const GDK_BUTTON4_MASK = Main.Base.int32(2048)
    const BUTTON5 = const GDK_BUTTON5_MASK = Main.Base.int32(4096)
    const SUPER = const GDK_SUPER_MASK = Main.Base.int32(67108864)
    const HYPER = const GDK_HYPER_MASK = Main.Base.int32(134217728)
    const META = const GDK_META_MASK = Main.Base.int32(268435456)
    const RELEASE = const GDK_RELEASE_MASK = Main.Base.int32(1073741824)
    const MODIFIER = const GDK_MODIFIER_MASK = Main.Base.int32(1543512063)
    const BUTTONS = const GDK_BUTTONS = 7936
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkInputCondition, quote 
    const READ = const GDK_INPUT_READ = Main.Base.int32(1)
    const WRITE = const GDK_INPUT_WRITE = Main.Base.int32(2)
    const EXCEPTION = const GDK_INPUT_EXCEPTION = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkStatus, quote 
    const OK = const GDK_OK = Main.Base.int32(0)
    const ERROR = const GDK_ERROR = Main.Base.int32(-1)
    const ERROR_PARAM = const GDK_ERROR_PARAM = Main.Base.int32(-2)
    const ERROR_FILE = const GDK_ERROR_FILE = Main.Base.int32(-3)
    const ERROR_MEM = const GDK_ERROR_MEM = Main.Base.int32(-4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkGrabStatus, quote 
    const SUCCESS = const GDK_GRAB_SUCCESS = Main.Base.int32(0)
    const ALREADY_GRABBED = const GDK_GRAB_ALREADY_GRABBED = Main.Base.int32(1)
    const INVALID_TIME = const GDK_GRAB_INVALID_TIME = Main.Base.int32(2)
    const NOT_VIEWABLE = const GDK_GRAB_NOT_VIEWABLE = Main.Base.int32(3)
    const FROZEN = const GDK_GRAB_FROZEN = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkDragAction, quote 
    const DEFAULT = const GDK_ACTION_DEFAULT = Main.Base.int32(1)
    const COPY = const GDK_ACTION_COPY = Main.Base.int32(2)
    const MOVE = const GDK_ACTION_MOVE = Main.Base.int32(4)
    const LINK = const GDK_ACTION_LINK = Main.Base.int32(8)
    const PRIVATE = const GDK_ACTION_PRIVATE = Main.Base.int32(16)
    const ASK = const GDK_ACTION_ASK = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkDragProtocol, quote 
    const MOTIF = const GDK_DRAG_PROTO_MOTIF = Main.Base.int32(0)
    const XDND = const GDK_DRAG_PROTO_XDND = Main.Base.int32(1)
    const ROOTWIN = const GDK_DRAG_PROTO_ROOTWIN = Main.Base.int32(2)
    const NONE = const GDK_DRAG_PROTO_NONE = Main.Base.int32(3)
    const WIN32_DROPFILES = const GDK_DRAG_PROTO_WIN32_DROPFILES = Main.Base.int32(4)
    const OLE2 = const GDK_DRAG_PROTO_OLE2 = Main.Base.int32(5)
    const LOCAL = const GDK_DRAG_PROTO_LOCAL = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkExtensionMode, quote 
    const NONE = const GDK_EXTENSION_EVENTS_NONE = Main.Base.int32(0)
    const ALL = const GDK_EXTENSION_EVENTS_ALL = Main.Base.int32(1)
    const CURSOR = const GDK_EXTENSION_EVENTS_CURSOR = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkInputSource, quote 
    const MOUSE = const GDK_SOURCE_MOUSE = Main.Base.int32(0)
    const PEN = const GDK_SOURCE_PEN = Main.Base.int32(1)
    const ERASER = const GDK_SOURCE_ERASER = Main.Base.int32(2)
    const CURSOR = const GDK_SOURCE_CURSOR = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkInputMode, quote 
    const DISABLED = const GDK_MODE_DISABLED = Main.Base.int32(0)
    const SCREEN = const GDK_MODE_SCREEN = Main.Base.int32(1)
    const WINDOW = const GDK_MODE_WINDOW = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkAxisUse, quote 
    const IGNORE = const GDK_AXIS_IGNORE = Main.Base.int32(0)
    const X = const GDK_AXIS_X = Main.Base.int32(1)
    const Y = const GDK_AXIS_Y = Main.Base.int32(2)
    const PRESSURE = const GDK_AXIS_PRESSURE = Main.Base.int32(3)
    const XTILT = const GDK_AXIS_XTILT = Main.Base.int32(4)
    const YTILT = const GDK_AXIS_YTILT = Main.Base.int32(5)
    const WHEEL = const GDK_AXIS_WHEEL = Main.Base.int32(6)
    const LAST = const GDK_AXIS_LAST = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkFilterReturn, quote 
    const CONTINUE = const GDK_FILTER_CONTINUE = Main.Base.int32(0)
    const TRANSLATE = const GDK_FILTER_TRANSLATE = Main.Base.int32(1)
    const REMOVE = const GDK_FILTER_REMOVE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkEventType, quote 
    const NOTHING = const GDK_NOTHING = Main.Base.int32(-1)
    const DELETE = const GDK_DELETE = Main.Base.int32(0)
    const DESTROY = const GDK_DESTROY = Main.Base.int32(1)
    const EXPOSE = const GDK_EXPOSE = Main.Base.int32(2)
    const MOTION_NOTIFY = const GDK_MOTION_NOTIFY = Main.Base.int32(3)
    const BUTTON_PRESS = const GDK_BUTTON_PRESS = Main.Base.int32(4)
    const GDK_2BUTTON_PRESS = Main.Base.int32(5)
    const GDK_3BUTTON_PRESS = Main.Base.int32(6)
    const BUTTON_RELEASE = const GDK_BUTTON_RELEASE = Main.Base.int32(7)
    const KEY_PRESS = const GDK_KEY_PRESS = Main.Base.int32(8)
    const KEY_RELEASE = const GDK_KEY_RELEASE = Main.Base.int32(9)
    const ENTER_NOTIFY = const GDK_ENTER_NOTIFY = Main.Base.int32(10)
    const LEAVE_NOTIFY = const GDK_LEAVE_NOTIFY = Main.Base.int32(11)
    const FOCUS_CHANGE = const GDK_FOCUS_CHANGE = Main.Base.int32(12)
    const CONFIGURE = const GDK_CONFIGURE = Main.Base.int32(13)
    const MAP = const GDK_MAP = Main.Base.int32(14)
    const UNMAP = const GDK_UNMAP = Main.Base.int32(15)
    const PROPERTY_NOTIFY = const GDK_PROPERTY_NOTIFY = Main.Base.int32(16)
    const SELECTION_CLEAR = const GDK_SELECTION_CLEAR = Main.Base.int32(17)
    const SELECTION_REQUEST = const GDK_SELECTION_REQUEST = Main.Base.int32(18)
    const SELECTION_NOTIFY = const GDK_SELECTION_NOTIFY = Main.Base.int32(19)
    const PROXIMITY_IN = const GDK_PROXIMITY_IN = Main.Base.int32(20)
    const PROXIMITY_OUT = const GDK_PROXIMITY_OUT = Main.Base.int32(21)
    const DRAG_ENTER = const GDK_DRAG_ENTER = Main.Base.int32(22)
    const DRAG_LEAVE = const GDK_DRAG_LEAVE = Main.Base.int32(23)
    const DRAG_MOTION = const GDK_DRAG_MOTION = Main.Base.int32(24)
    const DRAG_STATUS = const GDK_DRAG_STATUS = Main.Base.int32(25)
    const DROP_START = const GDK_DROP_START = Main.Base.int32(26)
    const DROP_FINISHED = const GDK_DROP_FINISHED = Main.Base.int32(27)
    const CLIENT_EVENT = const GDK_CLIENT_EVENT = Main.Base.int32(28)
    const VISIBILITY_NOTIFY = const GDK_VISIBILITY_NOTIFY = Main.Base.int32(29)
    const NO_EXPOSE = const GDK_NO_EXPOSE = Main.Base.int32(30)
    const SCROLL = const GDK_SCROLL = Main.Base.int32(31)
    const WINDOW_STATE = const GDK_WINDOW_STATE = Main.Base.int32(32)
    const SETTING = const GDK_SETTING = Main.Base.int32(33)
    const OWNER_CHANGE = const GDK_OWNER_CHANGE = Main.Base.int32(34)
    const GRAB_BROKEN = const GDK_GRAB_BROKEN = Main.Base.int32(35)
    const DAMAGE = const GDK_DAMAGE = Main.Base.int32(36)
    const EVENT_LAST = const GDK_EVENT_LAST = Main.Base.int32(37)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkEventMask, quote 
    const EXPOSURE = const GDK_EXPOSURE_MASK = Main.Base.int32(2)
    const POINTER_MOTION = const GDK_POINTER_MOTION_MASK = Main.Base.int32(4)
    const POINTER_MOTION_HINT = const GDK_POINTER_MOTION_HINT_MASK = Main.Base.int32(8)
    const BUTTON_MOTION = const GDK_BUTTON_MOTION_MASK = Main.Base.int32(16)
    const BUTTON1_MOTION = const GDK_BUTTON1_MOTION_MASK = Main.Base.int32(32)
    const BUTTON2_MOTION = const GDK_BUTTON2_MOTION_MASK = Main.Base.int32(64)
    const BUTTON3_MOTION = const GDK_BUTTON3_MOTION_MASK = Main.Base.int32(128)
    const BUTTON_PRESS = const GDK_BUTTON_PRESS_MASK = Main.Base.int32(256)
    const BUTTON_RELEASE = const GDK_BUTTON_RELEASE_MASK = Main.Base.int32(512)
    const KEY_PRESS = const GDK_KEY_PRESS_MASK = Main.Base.int32(1024)
    const KEY_RELEASE = const GDK_KEY_RELEASE_MASK = Main.Base.int32(2048)
    const ENTER_NOTIFY = const GDK_ENTER_NOTIFY_MASK = Main.Base.int32(4096)
    const LEAVE_NOTIFY = const GDK_LEAVE_NOTIFY_MASK = Main.Base.int32(8192)
    const FOCUS_CHANGE = const GDK_FOCUS_CHANGE_MASK = Main.Base.int32(16384)
    const STRUCTURE = const GDK_STRUCTURE_MASK = Main.Base.int32(32768)
    const PROPERTY_CHANGE = const GDK_PROPERTY_CHANGE_MASK = Main.Base.int32(65536)
    const VISIBILITY_NOTIFY = const GDK_VISIBILITY_NOTIFY_MASK = Main.Base.int32(131072)
    const PROXIMITY_IN = const GDK_PROXIMITY_IN_MASK = Main.Base.int32(262144)
    const PROXIMITY_OUT = const GDK_PROXIMITY_OUT_MASK = Main.Base.int32(524288)
    const SUBSTRUCTURE = const GDK_SUBSTRUCTURE_MASK = Main.Base.int32(1048576)
    const SCROLL = const GDK_SCROLL_MASK = Main.Base.int32(2097152)
    const ALL_EVENTS = const GDK_ALL_EVENTS_MASK = Main.Base.int32(4194302)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkVisibilityState, quote 
    const UNOBSCURED = const GDK_VISIBILITY_UNOBSCURED = Main.Base.int32(0)
    const PARTIAL = const GDK_VISIBILITY_PARTIAL = Main.Base.int32(1)
    const FULLY_OBSCURED = const GDK_VISIBILITY_FULLY_OBSCURED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkScrollDirection, quote 
    const UP = const GDK_SCROLL_UP = Main.Base.int32(0)
    const DOWN = const GDK_SCROLL_DOWN = Main.Base.int32(1)
    const LEFT = const GDK_SCROLL_LEFT = Main.Base.int32(2)
    const RIGHT = const GDK_SCROLL_RIGHT = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkNotifyType, quote 
    const ANCESTOR = const GDK_NOTIFY_ANCESTOR = Main.Base.int32(0)
    const VIRTUAL = const GDK_NOTIFY_VIRTUAL = Main.Base.int32(1)
    const INFERIOR = const GDK_NOTIFY_INFERIOR = Main.Base.int32(2)
    const NONLINEAR = const GDK_NOTIFY_NONLINEAR = Main.Base.int32(3)
    const NONLINEAR_VIRTUAL = const GDK_NOTIFY_NONLINEAR_VIRTUAL = Main.Base.int32(4)
    const UNKNOWN = const GDK_NOTIFY_UNKNOWN = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkCrossingMode, quote 
    const NORMAL = const GDK_CROSSING_NORMAL = Main.Base.int32(0)
    const GRAB = const GDK_CROSSING_GRAB = Main.Base.int32(1)
    const UNGRAB = const GDK_CROSSING_UNGRAB = Main.Base.int32(2)
    const GTK_GRAB = const GDK_CROSSING_GTK_GRAB = Main.Base.int32(3)
    const GTK_UNGRAB = const GDK_CROSSING_GTK_UNGRAB = Main.Base.int32(4)
    const STATE_CHANGED = const GDK_CROSSING_STATE_CHANGED = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkPropertyState, quote 
    const NEW_VALUE = const GDK_PROPERTY_NEW_VALUE = Main.Base.int32(0)
    const DELETE = const GDK_PROPERTY_DELETE = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWindowState, quote 
    const WITHDRAWN = const GDK_WINDOW_STATE_WITHDRAWN = Main.Base.int32(1)
    const ICONIFIED = const GDK_WINDOW_STATE_ICONIFIED = Main.Base.int32(2)
    const MAXIMIZED = const GDK_WINDOW_STATE_MAXIMIZED = Main.Base.int32(4)
    const STICKY = const GDK_WINDOW_STATE_STICKY = Main.Base.int32(8)
    const FULLSCREEN = const GDK_WINDOW_STATE_FULLSCREEN = Main.Base.int32(16)
    const ABOVE = const GDK_WINDOW_STATE_ABOVE = Main.Base.int32(32)
    const BELOW = const GDK_WINDOW_STATE_BELOW = Main.Base.int32(64)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkSettingAction, quote 
    const NEW = const GDK_SETTING_ACTION_NEW = Main.Base.int32(0)
    const CHANGED = const GDK_SETTING_ACTION_CHANGED = Main.Base.int32(1)
    const DELETED = const GDK_SETTING_ACTION_DELETED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkOwnerChange, quote 
    const NEW_OWNER = const GDK_OWNER_CHANGE_NEW_OWNER = Main.Base.int32(0)
    const DESTROY = const GDK_OWNER_CHANGE_DESTROY = Main.Base.int32(1)
    const CLOSE = const GDK_OWNER_CHANGE_CLOSE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkRgbDither, quote 
    const NONE = const GDK_RGB_DITHER_NONE = Main.Base.int32(0)
    const NORMAL = const GDK_RGB_DITHER_NORMAL = Main.Base.int32(1)
    const MAX = const GDK_RGB_DITHER_MAX = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkPixbufAlphaMode, quote 
    const BILEVEL = const GDK_PIXBUF_ALPHA_BILEVEL = Main.Base.int32(0)
    const FULL = const GDK_PIXBUF_ALPHA_FULL = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkColorspace, quote 
    const RGB = const GDK_COLORSPACE_RGB = Main.Base.int32(0)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkPixbufError, quote 
    const CORRUPT_IMAGE = const GDK_PIXBUF_ERROR_CORRUPT_IMAGE = Main.Base.int32(0)
    const INSUFFICIENT_MEMORY = const GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY = Main.Base.int32(1)
    const BAD_OPTION = const GDK_PIXBUF_ERROR_BAD_OPTION = Main.Base.int32(2)
    const UNKNOWN_TYPE = const GDK_PIXBUF_ERROR_UNKNOWN_TYPE = Main.Base.int32(3)
    const UNSUPPORTED_OPERATION = const GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION = Main.Base.int32(4)
    const FAILED = const GDK_PIXBUF_ERROR_FAILED = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkInterpType, quote 
    const NEAREST = const GDK_INTERP_NEAREST = Main.Base.int32(0)
    const TILES = const GDK_INTERP_TILES = Main.Base.int32(1)
    const BILINEAR = const GDK_INTERP_BILINEAR = Main.Base.int32(2)
    const HYPER = const GDK_INTERP_HYPER = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkPixbufRotation, quote 
    const NONE = const GDK_PIXBUF_ROTATE_NONE = Main.Base.int32(0)
    const COUNTERCLOCKWISE = const GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = Main.Base.int32(90)
    const UPSIDEDOWN = const GDK_PIXBUF_ROTATE_UPSIDEDOWN = Main.Base.int32(180)
    const CLOCKWISE = const GDK_PIXBUF_ROTATE_CLOCKWISE = Main.Base.int32(270)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkCursorType, quote 
    const X_CURSOR = const GDK_X_CURSOR = Main.Base.int32(0)
    const ARROW = const GDK_ARROW = Main.Base.int32(2)
    const BASED_ARROW_DOWN = const GDK_BASED_ARROW_DOWN = Main.Base.int32(4)
    const BASED_ARROW_UP = const GDK_BASED_ARROW_UP = Main.Base.int32(6)
    const BOAT = const GDK_BOAT = Main.Base.int32(8)
    const BOGOSITY = const GDK_BOGOSITY = Main.Base.int32(10)
    const BOTTOM_LEFT_CORNER = const GDK_BOTTOM_LEFT_CORNER = Main.Base.int32(12)
    const BOTTOM_RIGHT_CORNER = const GDK_BOTTOM_RIGHT_CORNER = Main.Base.int32(14)
    const BOTTOM_SIDE = const GDK_BOTTOM_SIDE = Main.Base.int32(16)
    const BOTTOM_TEE = const GDK_BOTTOM_TEE = Main.Base.int32(18)
    const BOX_SPIRAL = const GDK_BOX_SPIRAL = Main.Base.int32(20)
    const CENTER_PTR = const GDK_CENTER_PTR = Main.Base.int32(22)
    const CIRCLE = const GDK_CIRCLE = Main.Base.int32(24)
    const CLOCK = const GDK_CLOCK = Main.Base.int32(26)
    const COFFEE_MUG = const GDK_COFFEE_MUG = Main.Base.int32(28)
    const CROSS = const GDK_CROSS = Main.Base.int32(30)
    const CROSS_REVERSE = const GDK_CROSS_REVERSE = Main.Base.int32(32)
    const CROSSHAIR = const GDK_CROSSHAIR = Main.Base.int32(34)
    const DIAMOND_CROSS = const GDK_DIAMOND_CROSS = Main.Base.int32(36)
    const DOT = const GDK_DOT = Main.Base.int32(38)
    const DOTBOX = const GDK_DOTBOX = Main.Base.int32(40)
    const DOUBLE_ARROW = const GDK_DOUBLE_ARROW = Main.Base.int32(42)
    const DRAFT_LARGE = const GDK_DRAFT_LARGE = Main.Base.int32(44)
    const DRAFT_SMALL = const GDK_DRAFT_SMALL = Main.Base.int32(46)
    const DRAPED_BOX = const GDK_DRAPED_BOX = Main.Base.int32(48)
    const EXCHANGE = const GDK_EXCHANGE = Main.Base.int32(50)
    const FLEUR = const GDK_FLEUR = Main.Base.int32(52)
    const GOBBLER = const GDK_GOBBLER = Main.Base.int32(54)
    const GUMBY = const GDK_GUMBY = Main.Base.int32(56)
    const HAND1 = const GDK_HAND1 = Main.Base.int32(58)
    const HAND2 = const GDK_HAND2 = Main.Base.int32(60)
    const HEART = const GDK_HEART = Main.Base.int32(62)
    const ICON = const GDK_ICON = Main.Base.int32(64)
    const IRON_CROSS = const GDK_IRON_CROSS = Main.Base.int32(66)
    const LEFT_PTR = const GDK_LEFT_PTR = Main.Base.int32(68)
    const LEFT_SIDE = const GDK_LEFT_SIDE = Main.Base.int32(70)
    const LEFT_TEE = const GDK_LEFT_TEE = Main.Base.int32(72)
    const LEFTBUTTON = const GDK_LEFTBUTTON = Main.Base.int32(74)
    const LL_ANGLE = const GDK_LL_ANGLE = Main.Base.int32(76)
    const LR_ANGLE = const GDK_LR_ANGLE = Main.Base.int32(78)
    const MAN = const GDK_MAN = Main.Base.int32(80)
    const MIDDLEBUTTON = const GDK_MIDDLEBUTTON = Main.Base.int32(82)
    const MOUSE = const GDK_MOUSE = Main.Base.int32(84)
    const PENCIL = const GDK_PENCIL = Main.Base.int32(86)
    const PIRATE = const GDK_PIRATE = Main.Base.int32(88)
    const PLUS = const GDK_PLUS = Main.Base.int32(90)
    const QUESTION_ARROW = const GDK_QUESTION_ARROW = Main.Base.int32(92)
    const RIGHT_PTR = const GDK_RIGHT_PTR = Main.Base.int32(94)
    const RIGHT_SIDE = const GDK_RIGHT_SIDE = Main.Base.int32(96)
    const RIGHT_TEE = const GDK_RIGHT_TEE = Main.Base.int32(98)
    const RIGHTBUTTON = const GDK_RIGHTBUTTON = Main.Base.int32(100)
    const RTL_LOGO = const GDK_RTL_LOGO = Main.Base.int32(102)
    const SAILBOAT = const GDK_SAILBOAT = Main.Base.int32(104)
    const SB_DOWN_ARROW = const GDK_SB_DOWN_ARROW = Main.Base.int32(106)
    const SB_H_DOUBLE_ARROW = const GDK_SB_H_DOUBLE_ARROW = Main.Base.int32(108)
    const SB_LEFT_ARROW = const GDK_SB_LEFT_ARROW = Main.Base.int32(110)
    const SB_RIGHT_ARROW = const GDK_SB_RIGHT_ARROW = Main.Base.int32(112)
    const SB_UP_ARROW = const GDK_SB_UP_ARROW = Main.Base.int32(114)
    const SB_V_DOUBLE_ARROW = const GDK_SB_V_DOUBLE_ARROW = Main.Base.int32(116)
    const SHUTTLE = const GDK_SHUTTLE = Main.Base.int32(118)
    const SIZING = const GDK_SIZING = Main.Base.int32(120)
    const SPIDER = const GDK_SPIDER = Main.Base.int32(122)
    const SPRAYCAN = const GDK_SPRAYCAN = Main.Base.int32(124)
    const STAR = const GDK_STAR = Main.Base.int32(126)
    const TARGET = const GDK_TARGET = Main.Base.int32(128)
    const TCROSS = const GDK_TCROSS = Main.Base.int32(130)
    const TOP_LEFT_ARROW = const GDK_TOP_LEFT_ARROW = Main.Base.int32(132)
    const TOP_LEFT_CORNER = const GDK_TOP_LEFT_CORNER = Main.Base.int32(134)
    const TOP_RIGHT_CORNER = const GDK_TOP_RIGHT_CORNER = Main.Base.int32(136)
    const TOP_SIDE = const GDK_TOP_SIDE = Main.Base.int32(138)
    const TOP_TEE = const GDK_TOP_TEE = Main.Base.int32(140)
    const TREK = const GDK_TREK = Main.Base.int32(142)
    const UL_ANGLE = const GDK_UL_ANGLE = Main.Base.int32(144)
    const UMBRELLA = const GDK_UMBRELLA = Main.Base.int32(146)
    const UR_ANGLE = const GDK_UR_ANGLE = Main.Base.int32(148)
    const WATCH = const GDK_WATCH = Main.Base.int32(150)
    const XTERM = const GDK_XTERM = Main.Base.int32(152)
    const LAST_CURSOR = const GDK_LAST_CURSOR = Main.Base.int32(153)
    const BLANK_CURSOR = const GDK_BLANK_CURSOR = Main.Base.int32(-2)
    const CURSOR_IS_PIXMAP = const GDK_CURSOR_IS_PIXMAP = Main.Base.int32(-1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkCapStyle, quote 
    const NOT_LAST = const GDK_CAP_NOT_LAST = Main.Base.int32(0)
    const BUTT = const GDK_CAP_BUTT = Main.Base.int32(1)
    const ROUND = const GDK_CAP_ROUND = Main.Base.int32(2)
    const PROJECTING = const GDK_CAP_PROJECTING = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkFill, quote 
    const SOLID = const GDK_SOLID = Main.Base.int32(0)
    const TILED = const GDK_TILED = Main.Base.int32(1)
    const STIPPLED = const GDK_STIPPLED = Main.Base.int32(2)
    const OPAQUE_STIPPLED = const GDK_OPAQUE_STIPPLED = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkFunction, quote 
    const COPY = const GDK_COPY = Main.Base.int32(0)
    const INVERT = const GDK_INVERT = Main.Base.int32(1)
    const XOR = const GDK_XOR = Main.Base.int32(2)
    const CLEAR = const GDK_CLEAR = Main.Base.int32(3)
    const AND = const GDK_AND = Main.Base.int32(4)
    const AND_REVERSE = const GDK_AND_REVERSE = Main.Base.int32(5)
    const AND_INVERT = const GDK_AND_INVERT = Main.Base.int32(6)
    const NOOP = const GDK_NOOP = Main.Base.int32(7)
    const OR = const GDK_OR = Main.Base.int32(8)
    const EQUIV = const GDK_EQUIV = Main.Base.int32(9)
    const OR_REVERSE = const GDK_OR_REVERSE = Main.Base.int32(10)
    const COPY_INVERT = const GDK_COPY_INVERT = Main.Base.int32(11)
    const OR_INVERT = const GDK_OR_INVERT = Main.Base.int32(12)
    const NAND = const GDK_NAND = Main.Base.int32(13)
    const NOR = const GDK_NOR = Main.Base.int32(14)
    const SET = const GDK_SET = Main.Base.int32(15)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkJoinStyle, quote 
    const MITER = const GDK_JOIN_MITER = Main.Base.int32(0)
    const ROUND = const GDK_JOIN_ROUND = Main.Base.int32(1)
    const BEVEL = const GDK_JOIN_BEVEL = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkLineStyle, quote 
    const SOLID = const GDK_LINE_SOLID = Main.Base.int32(0)
    const ON_OFF_DASH = const GDK_LINE_ON_OFF_DASH = Main.Base.int32(1)
    const DOUBLE_DASH = const GDK_LINE_DOUBLE_DASH = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkSubwindowMode, quote 
    const CLIP_BY_CHILDREN = const GDK_CLIP_BY_CHILDREN = Main.Base.int32(0)
    const INCLUDE_INFERIORS = const GDK_INCLUDE_INFERIORS = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkGCValuesMask, quote 
    const FOREGROUND = const GDK_GC_FOREGROUND = Main.Base.int32(1)
    const BACKGROUND = const GDK_GC_BACKGROUND = Main.Base.int32(2)
    const FONT = const GDK_GC_FONT = Main.Base.int32(4)
    const FUNCTION = const GDK_GC_FUNCTION = Main.Base.int32(8)
    const FILL = const GDK_GC_FILL = Main.Base.int32(16)
    const TILE = const GDK_GC_TILE = Main.Base.int32(32)
    const STIPPLE = const GDK_GC_STIPPLE = Main.Base.int32(64)
    const CLIP_MASK = const GDK_GC_CLIP_MASK = Main.Base.int32(128)
    const SUBWINDOW = const GDK_GC_SUBWINDOW = Main.Base.int32(256)
    const TS_X_ORIGIN = const GDK_GC_TS_X_ORIGIN = Main.Base.int32(512)
    const TS_Y_ORIGIN = const GDK_GC_TS_Y_ORIGIN = Main.Base.int32(1024)
    const CLIP_X_ORIGIN = const GDK_GC_CLIP_X_ORIGIN = Main.Base.int32(2048)
    const CLIP_Y_ORIGIN = const GDK_GC_CLIP_Y_ORIGIN = Main.Base.int32(4096)
    const EXPOSURES = const GDK_GC_EXPOSURES = Main.Base.int32(8192)
    const LINE_WIDTH = const GDK_GC_LINE_WIDTH = Main.Base.int32(16384)
    const LINE_STYLE = const GDK_GC_LINE_STYLE = Main.Base.int32(32768)
    const CAP_STYLE = const GDK_GC_CAP_STYLE = Main.Base.int32(65536)
    const JOIN_STYLE = const GDK_GC_JOIN_STYLE = Main.Base.int32(131072)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkFontType, quote 
    const FONT = const GDK_FONT_FONT = Main.Base.int32(0)
    const FONTSET = const GDK_FONT_FONTSET = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkImageType, quote 
    const NORMAL = const GDK_IMAGE_NORMAL = Main.Base.int32(0)
    const SHARED = const GDK_IMAGE_SHARED = Main.Base.int32(1)
    const FASTEST = const GDK_IMAGE_FASTEST = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkPropMode, quote 
    const REPLACE = const GDK_PROP_MODE_REPLACE = Main.Base.int32(0)
    const PREPEND = const GDK_PROP_MODE_PREPEND = Main.Base.int32(1)
    const APPEND = const GDK_PROP_MODE_APPEND = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkFillRule, quote 
    const EVEN_ODD_RULE = const GDK_EVEN_ODD_RULE = Main.Base.int32(0)
    const WINDING_RULE = const GDK_WINDING_RULE = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkOverlapType, quote 
    const IN = const GDK_OVERLAP_RECTANGLE_IN = Main.Base.int32(0)
    const OUT = const GDK_OVERLAP_RECTANGLE_OUT = Main.Base.int32(1)
    const PART = const GDK_OVERLAP_RECTANGLE_PART = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWindowClass, quote 
    const OUTPUT = const GDK_INPUT_OUTPUT = Main.Base.int32(0)
    const ONLY = const GDK_INPUT_ONLY = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWindowType, quote 
    const ROOT = const GDK_WINDOW_ROOT = Main.Base.int32(0)
    const TOPLEVEL = const GDK_WINDOW_TOPLEVEL = Main.Base.int32(1)
    const CHILD = const GDK_WINDOW_CHILD = Main.Base.int32(2)
    const DIALOG = const GDK_WINDOW_DIALOG = Main.Base.int32(3)
    const TEMP = const GDK_WINDOW_TEMP = Main.Base.int32(4)
    const FOREIGN = const GDK_WINDOW_FOREIGN = Main.Base.int32(5)
    const OFFSCREEN = const GDK_WINDOW_OFFSCREEN = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWindowAttributesType, quote 
    const TITLE = const GDK_WA_TITLE = Main.Base.int32(2)
    const X = const GDK_WA_X = Main.Base.int32(4)
    const Y = const GDK_WA_Y = Main.Base.int32(8)
    const CURSOR = const GDK_WA_CURSOR = Main.Base.int32(16)
    const COLORMAP = const GDK_WA_COLORMAP = Main.Base.int32(32)
    const VISUAL = const GDK_WA_VISUAL = Main.Base.int32(64)
    const WMCLASS = const GDK_WA_WMCLASS = Main.Base.int32(128)
    const NOREDIR = const GDK_WA_NOREDIR = Main.Base.int32(256)
    const TYPE_HINT = const GDK_WA_TYPE_HINT = Main.Base.int32(512)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWindowHints, quote 
    const POS = const GDK_HINT_POS = Main.Base.int32(1)
    const MIN_SIZE = const GDK_HINT_MIN_SIZE = Main.Base.int32(2)
    const MAX_SIZE = const GDK_HINT_MAX_SIZE = Main.Base.int32(4)
    const BASE_SIZE = const GDK_HINT_BASE_SIZE = Main.Base.int32(8)
    const ASPECT = const GDK_HINT_ASPECT = Main.Base.int32(16)
    const RESIZE_INC = const GDK_HINT_RESIZE_INC = Main.Base.int32(32)
    const WIN_GRAVITY = const GDK_HINT_WIN_GRAVITY = Main.Base.int32(64)
    const USER_POS = const GDK_HINT_USER_POS = Main.Base.int32(128)
    const USER_SIZE = const GDK_HINT_USER_SIZE = Main.Base.int32(256)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWindowTypeHint, quote 
    const NORMAL = const GDK_WINDOW_TYPE_HINT_NORMAL = Main.Base.int32(0)
    const DIALOG = const GDK_WINDOW_TYPE_HINT_DIALOG = Main.Base.int32(1)
    const MENU = const GDK_WINDOW_TYPE_HINT_MENU = Main.Base.int32(2)
    const TOOLBAR = const GDK_WINDOW_TYPE_HINT_TOOLBAR = Main.Base.int32(3)
    const SPLASHSCREEN = const GDK_WINDOW_TYPE_HINT_SPLASHSCREEN = Main.Base.int32(4)
    const UTILITY = const GDK_WINDOW_TYPE_HINT_UTILITY = Main.Base.int32(5)
    const DOCK = const GDK_WINDOW_TYPE_HINT_DOCK = Main.Base.int32(6)
    const DESKTOP = const GDK_WINDOW_TYPE_HINT_DESKTOP = Main.Base.int32(7)
    const DROPDOWN_MENU = const GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = Main.Base.int32(8)
    const POPUP_MENU = const GDK_WINDOW_TYPE_HINT_POPUP_MENU = Main.Base.int32(9)
    const TOOLTIP = const GDK_WINDOW_TYPE_HINT_TOOLTIP = Main.Base.int32(10)
    const NOTIFICATION = const GDK_WINDOW_TYPE_HINT_NOTIFICATION = Main.Base.int32(11)
    const COMBO = const GDK_WINDOW_TYPE_HINT_COMBO = Main.Base.int32(12)
    const DND = const GDK_WINDOW_TYPE_HINT_DND = Main.Base.int32(13)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWMDecoration, quote 
    const ALL = const GDK_DECOR_ALL = Main.Base.int32(1)
    const BORDER = const GDK_DECOR_BORDER = Main.Base.int32(2)
    const RESIZEH = const GDK_DECOR_RESIZEH = Main.Base.int32(4)
    const TITLE = const GDK_DECOR_TITLE = Main.Base.int32(8)
    const MENU = const GDK_DECOR_MENU = Main.Base.int32(16)
    const MINIMIZE = const GDK_DECOR_MINIMIZE = Main.Base.int32(32)
    const MAXIMIZE = const GDK_DECOR_MAXIMIZE = Main.Base.int32(64)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWMFunction, quote 
    const ALL = const GDK_FUNC_ALL = Main.Base.int32(1)
    const RESIZE = const GDK_FUNC_RESIZE = Main.Base.int32(2)
    const MOVE = const GDK_FUNC_MOVE = Main.Base.int32(4)
    const MINIMIZE = const GDK_FUNC_MINIMIZE = Main.Base.int32(8)
    const MAXIMIZE = const GDK_FUNC_MAXIMIZE = Main.Base.int32(16)
    const CLOSE = const GDK_FUNC_CLOSE = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkGravity, quote 
    const NORTH_WEST = const GDK_GRAVITY_NORTH_WEST = Main.Base.int32(1)
    const NORTH = const GDK_GRAVITY_NORTH = Main.Base.int32(2)
    const NORTH_EAST = const GDK_GRAVITY_NORTH_EAST = Main.Base.int32(3)
    const WEST = const GDK_GRAVITY_WEST = Main.Base.int32(4)
    const CENTER = const GDK_GRAVITY_CENTER = Main.Base.int32(5)
    const EAST = const GDK_GRAVITY_EAST = Main.Base.int32(6)
    const SOUTH_WEST = const GDK_GRAVITY_SOUTH_WEST = Main.Base.int32(7)
    const SOUTH = const GDK_GRAVITY_SOUTH = Main.Base.int32(8)
    const SOUTH_EAST = const GDK_GRAVITY_SOUTH_EAST = Main.Base.int32(9)
    const STATIC = const GDK_GRAVITY_STATIC = Main.Base.int32(10)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkWindowEdge, quote 
    const NORTH_WEST = const GDK_WINDOW_EDGE_NORTH_WEST = Main.Base.int32(0)
    const NORTH = const GDK_WINDOW_EDGE_NORTH = Main.Base.int32(1)
    const NORTH_EAST = const GDK_WINDOW_EDGE_NORTH_EAST = Main.Base.int32(2)
    const WEST = const GDK_WINDOW_EDGE_WEST = Main.Base.int32(3)
    const EAST = const GDK_WINDOW_EDGE_EAST = Main.Base.int32(4)
    const SOUTH_WEST = const GDK_WINDOW_EDGE_SOUTH_WEST = Main.Base.int32(5)
    const SOUTH = const GDK_WINDOW_EDGE_SOUTH = Main.Base.int32(6)
    const SOUTH_EAST = const GDK_WINDOW_EDGE_SOUTH_EAST = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GdkVisualType, quote 
    const STATIC_GRAY = const GDK_VISUAL_STATIC_GRAY = Main.Base.int32(0)
    const GRAYSCALE = const GDK_VISUAL_GRAYSCALE = Main.Base.int32(1)
    const STATIC_COLOR = const GDK_VISUAL_STATIC_COLOR = Main.Base.int32(2)
    const PSEUDO_COLOR = const GDK_VISUAL_PSEUDO_COLOR = Main.Base.int32(3)
    const TRUE_COLOR = const GDK_VISUAL_TRUE_COLOR = Main.Base.int32(4)
    const DIRECT_COLOR = const GDK_VISUAL_DIRECT_COLOR = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkAnchorType, quote 
    const CENTER = const GTK_ANCHOR_CENTER = Main.Base.int32(0)
    const NORTH = const GTK_ANCHOR_NORTH = Main.Base.int32(1)
    const NORTH_WEST = const GTK_ANCHOR_NORTH_WEST = Main.Base.int32(2)
    const NORTH_EAST = const GTK_ANCHOR_NORTH_EAST = Main.Base.int32(3)
    const SOUTH = const GTK_ANCHOR_SOUTH = Main.Base.int32(4)
    const SOUTH_WEST = const GTK_ANCHOR_SOUTH_WEST = Main.Base.int32(5)
    const SOUTH_EAST = const GTK_ANCHOR_SOUTH_EAST = Main.Base.int32(6)
    const WEST = const GTK_ANCHOR_WEST = Main.Base.int32(7)
    const EAST = const GTK_ANCHOR_EAST = Main.Base.int32(8)
    const N = const GTK_ANCHOR_N = Main.Base.int32(1)
    const NW = const GTK_ANCHOR_NW = Main.Base.int32(2)
    const NE = const GTK_ANCHOR_NE = Main.Base.int32(3)
    const S = const GTK_ANCHOR_S = Main.Base.int32(4)
    const SW = const GTK_ANCHOR_SW = Main.Base.int32(5)
    const SE = const GTK_ANCHOR_SE = Main.Base.int32(6)
    const W = const GTK_ANCHOR_W = Main.Base.int32(7)
    const E = const GTK_ANCHOR_E = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkArrowPlacement, quote 
    const BOTH = const GTK_ARROWS_BOTH = Main.Base.int32(0)
    const START = const GTK_ARROWS_START = Main.Base.int32(1)
    const END = const GTK_ARROWS_END = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkArrowType, quote 
    const UP = const GTK_ARROW_UP = Main.Base.int32(0)
    const DOWN = const GTK_ARROW_DOWN = Main.Base.int32(1)
    const LEFT = const GTK_ARROW_LEFT = Main.Base.int32(2)
    const RIGHT = const GTK_ARROW_RIGHT = Main.Base.int32(3)
    const NONE = const GTK_ARROW_NONE = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkAttachOptions, quote 
    const EXPAND = const GTK_EXPAND = Main.Base.int32(1)
    const SHRINK = const GTK_SHRINK = Main.Base.int32(2)
    const FILL = const GTK_FILL = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkButtonBoxStyle, quote 
    const DEFAULT_STYLE = const GTK_BUTTONBOX_DEFAULT_STYLE = Main.Base.int32(0)
    const SPREAD = const GTK_BUTTONBOX_SPREAD = Main.Base.int32(1)
    const EDGE = const GTK_BUTTONBOX_EDGE = Main.Base.int32(2)
    const START = const GTK_BUTTONBOX_START = Main.Base.int32(3)
    const END = const GTK_BUTTONBOX_END = Main.Base.int32(4)
    const CENTER = const GTK_BUTTONBOX_CENTER = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCurveType, quote 
    const LINEAR = const GTK_CURVE_TYPE_LINEAR = Main.Base.int32(0)
    const SPLINE = const GTK_CURVE_TYPE_SPLINE = Main.Base.int32(1)
    const FREE = const GTK_CURVE_TYPE_FREE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkDeleteType, quote 
    const CHARS = const GTK_DELETE_CHARS = Main.Base.int32(0)
    const WORD_ENDS = const GTK_DELETE_WORD_ENDS = Main.Base.int32(1)
    const WORDS = const GTK_DELETE_WORDS = Main.Base.int32(2)
    const DISPLAY_LINES = const GTK_DELETE_DISPLAY_LINES = Main.Base.int32(3)
    const DISPLAY_LINE_ENDS = const GTK_DELETE_DISPLAY_LINE_ENDS = Main.Base.int32(4)
    const PARAGRAPH_ENDS = const GTK_DELETE_PARAGRAPH_ENDS = Main.Base.int32(5)
    const PARAGRAPHS = const GTK_DELETE_PARAGRAPHS = Main.Base.int32(6)
    const WHITESPACE = const GTK_DELETE_WHITESPACE = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkDirectionType, quote 
    const TAB_FORWARD = const GTK_DIR_TAB_FORWARD = Main.Base.int32(0)
    const TAB_BACKWARD = const GTK_DIR_TAB_BACKWARD = Main.Base.int32(1)
    const UP = const GTK_DIR_UP = Main.Base.int32(2)
    const DOWN = const GTK_DIR_DOWN = Main.Base.int32(3)
    const LEFT = const GTK_DIR_LEFT = Main.Base.int32(4)
    const RIGHT = const GTK_DIR_RIGHT = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkExpanderStyle, quote 
    const COLLAPSED = const GTK_EXPANDER_COLLAPSED = Main.Base.int32(0)
    const SEMI_COLLAPSED = const GTK_EXPANDER_SEMI_COLLAPSED = Main.Base.int32(1)
    const SEMI_EXPANDED = const GTK_EXPANDER_SEMI_EXPANDED = Main.Base.int32(2)
    const EXPANDED = const GTK_EXPANDER_EXPANDED = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkIconSize, quote 
    const INVALID = const GTK_ICON_SIZE_INVALID = Main.Base.int32(0)
    const MENU = const GTK_ICON_SIZE_MENU = Main.Base.int32(1)
    const SMALL_TOOLBAR = const GTK_ICON_SIZE_SMALL_TOOLBAR = Main.Base.int32(2)
    const LARGE_TOOLBAR = const GTK_ICON_SIZE_LARGE_TOOLBAR = Main.Base.int32(3)
    const BUTTON = const GTK_ICON_SIZE_BUTTON = Main.Base.int32(4)
    const DND = const GTK_ICON_SIZE_DND = Main.Base.int32(5)
    const DIALOG = const GTK_ICON_SIZE_DIALOG = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSensitivityType, quote 
    const AUTO = const GTK_SENSITIVITY_AUTO = Main.Base.int32(0)
    const ON = const GTK_SENSITIVITY_ON = Main.Base.int32(1)
    const OFF = const GTK_SENSITIVITY_OFF = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSideType, quote 
    const TOP = const GTK_SIDE_TOP = Main.Base.int32(0)
    const BOTTOM = const GTK_SIDE_BOTTOM = Main.Base.int32(1)
    const LEFT = const GTK_SIDE_LEFT = Main.Base.int32(2)
    const RIGHT = const GTK_SIDE_RIGHT = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTextDirection, quote 
    const NONE = const GTK_TEXT_DIR_NONE = Main.Base.int32(0)
    const LTR = const GTK_TEXT_DIR_LTR = Main.Base.int32(1)
    const RTL = const GTK_TEXT_DIR_RTL = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkJustification, quote 
    const LEFT = const GTK_JUSTIFY_LEFT = Main.Base.int32(0)
    const RIGHT = const GTK_JUSTIFY_RIGHT = Main.Base.int32(1)
    const CENTER = const GTK_JUSTIFY_CENTER = Main.Base.int32(2)
    const FILL = const GTK_JUSTIFY_FILL = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkMatchType, quote 
    const ALL = const GTK_MATCH_ALL = Main.Base.int32(0)
    const ALL_TAIL = const GTK_MATCH_ALL_TAIL = Main.Base.int32(1)
    const HEAD = const GTK_MATCH_HEAD = Main.Base.int32(2)
    const TAIL = const GTK_MATCH_TAIL = Main.Base.int32(3)
    const EXACT = const GTK_MATCH_EXACT = Main.Base.int32(4)
    const LAST = const GTK_MATCH_LAST = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkMenuDirectionType, quote 
    const PARENT = const GTK_MENU_DIR_PARENT = Main.Base.int32(0)
    const CHILD = const GTK_MENU_DIR_CHILD = Main.Base.int32(1)
    const NEXT = const GTK_MENU_DIR_NEXT = Main.Base.int32(2)
    const PREV = const GTK_MENU_DIR_PREV = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkMessageType, quote 
    const INFO = const GTK_MESSAGE_INFO = Main.Base.int32(0)
    const WARNING = const GTK_MESSAGE_WARNING = Main.Base.int32(1)
    const QUESTION = const GTK_MESSAGE_QUESTION = Main.Base.int32(2)
    const ERROR = const GTK_MESSAGE_ERROR = Main.Base.int32(3)
    const OTHER = const GTK_MESSAGE_OTHER = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkMetricType, quote 
    const PIXELS = const GTK_PIXELS = Main.Base.int32(0)
    const INCHES = const GTK_INCHES = Main.Base.int32(1)
    const CENTIMETERS = const GTK_CENTIMETERS = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkMovementStep, quote 
    const LOGICAL_POSITIONS = const GTK_MOVEMENT_LOGICAL_POSITIONS = Main.Base.int32(0)
    const VISUAL_POSITIONS = const GTK_MOVEMENT_VISUAL_POSITIONS = Main.Base.int32(1)
    const WORDS = const GTK_MOVEMENT_WORDS = Main.Base.int32(2)
    const DISPLAY_LINES = const GTK_MOVEMENT_DISPLAY_LINES = Main.Base.int32(3)
    const DISPLAY_LINE_ENDS = const GTK_MOVEMENT_DISPLAY_LINE_ENDS = Main.Base.int32(4)
    const PARAGRAPHS = const GTK_MOVEMENT_PARAGRAPHS = Main.Base.int32(5)
    const PARAGRAPH_ENDS = const GTK_MOVEMENT_PARAGRAPH_ENDS = Main.Base.int32(6)
    const PAGES = const GTK_MOVEMENT_PAGES = Main.Base.int32(7)
    const BUFFER_ENDS = const GTK_MOVEMENT_BUFFER_ENDS = Main.Base.int32(8)
    const HORIZONTAL_PAGES = const GTK_MOVEMENT_HORIZONTAL_PAGES = Main.Base.int32(9)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkScrollStep, quote 
    const STEPS = const GTK_SCROLL_STEPS = Main.Base.int32(0)
    const PAGES = const GTK_SCROLL_PAGES = Main.Base.int32(1)
    const ENDS = const GTK_SCROLL_ENDS = Main.Base.int32(2)
    const HORIZONTAL_STEPS = const GTK_SCROLL_HORIZONTAL_STEPS = Main.Base.int32(3)
    const HORIZONTAL_PAGES = const GTK_SCROLL_HORIZONTAL_PAGES = Main.Base.int32(4)
    const HORIZONTAL_ENDS = const GTK_SCROLL_HORIZONTAL_ENDS = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkOrientation, quote 
    const HORIZONTAL = const GTK_ORIENTATION_HORIZONTAL = Main.Base.int32(0)
    const VERTICAL = const GTK_ORIENTATION_VERTICAL = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCornerType, quote 
    const TOP_LEFT = const GTK_CORNER_TOP_LEFT = Main.Base.int32(0)
    const BOTTOM_LEFT = const GTK_CORNER_BOTTOM_LEFT = Main.Base.int32(1)
    const TOP_RIGHT = const GTK_CORNER_TOP_RIGHT = Main.Base.int32(2)
    const BOTTOM_RIGHT = const GTK_CORNER_BOTTOM_RIGHT = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPackType, quote 
    const START = const GTK_PACK_START = Main.Base.int32(0)
    const END = const GTK_PACK_END = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPathPriorityType, quote 
    const LOWEST = const GTK_PATH_PRIO_LOWEST = Main.Base.int32(0)
    const GTK = const GTK_PATH_PRIO_GTK = Main.Base.int32(4)
    const APPLICATION = const GTK_PATH_PRIO_APPLICATION = Main.Base.int32(8)
    const THEME = const GTK_PATH_PRIO_THEME = Main.Base.int32(10)
    const RC = const GTK_PATH_PRIO_RC = Main.Base.int32(12)
    const HIGHEST = const GTK_PATH_PRIO_HIGHEST = Main.Base.int32(15)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPathType, quote 
    const WIDGET = const GTK_PATH_WIDGET = Main.Base.int32(0)
    const WIDGET_CLASS = const GTK_PATH_WIDGET_CLASS = Main.Base.int32(1)
    const CLASS = const GTK_PATH_CLASS = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPolicyType, quote 
    const ALWAYS = const GTK_POLICY_ALWAYS = Main.Base.int32(0)
    const AUTOMATIC = const GTK_POLICY_AUTOMATIC = Main.Base.int32(1)
    const NEVER = const GTK_POLICY_NEVER = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPositionType, quote 
    const LEFT = const GTK_POS_LEFT = Main.Base.int32(0)
    const RIGHT = const GTK_POS_RIGHT = Main.Base.int32(1)
    const TOP = const GTK_POS_TOP = Main.Base.int32(2)
    const BOTTOM = const GTK_POS_BOTTOM = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPreviewType, quote 
    const COLOR = const GTK_PREVIEW_COLOR = Main.Base.int32(0)
    const GRAYSCALE = const GTK_PREVIEW_GRAYSCALE = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkReliefStyle, quote 
    const NORMAL = const GTK_RELIEF_NORMAL = Main.Base.int32(0)
    const HALF = const GTK_RELIEF_HALF = Main.Base.int32(1)
    const NONE = const GTK_RELIEF_NONE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkResizeMode, quote 
    const PARENT = const GTK_RESIZE_PARENT = Main.Base.int32(0)
    const QUEUE = const GTK_RESIZE_QUEUE = Main.Base.int32(1)
    const IMMEDIATE = const GTK_RESIZE_IMMEDIATE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSignalRunType, quote 
    const FIRST = const GTK_RUN_FIRST = Main.Base.int32(1)
    const LAST = const GTK_RUN_LAST = Main.Base.int32(2)
    const BOTH = const GTK_RUN_BOTH = Main.Base.int32(3)
    const NO_RECURSE = const GTK_RUN_NO_RECURSE = Main.Base.int32(8)
    const ACTION = const GTK_RUN_ACTION = Main.Base.int32(32)
    const NO_HOOKS = const GTK_RUN_NO_HOOKS = Main.Base.int32(64)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkScrollType, quote 
    const NONE = const GTK_SCROLL_NONE = Main.Base.int32(0)
    const JUMP = const GTK_SCROLL_JUMP = Main.Base.int32(1)
    const STEP_BACKWARD = const GTK_SCROLL_STEP_BACKWARD = Main.Base.int32(2)
    const STEP_FORWARD = const GTK_SCROLL_STEP_FORWARD = Main.Base.int32(3)
    const PAGE_BACKWARD = const GTK_SCROLL_PAGE_BACKWARD = Main.Base.int32(4)
    const PAGE_FORWARD = const GTK_SCROLL_PAGE_FORWARD = Main.Base.int32(5)
    const STEP_UP = const GTK_SCROLL_STEP_UP = Main.Base.int32(6)
    const STEP_DOWN = const GTK_SCROLL_STEP_DOWN = Main.Base.int32(7)
    const PAGE_UP = const GTK_SCROLL_PAGE_UP = Main.Base.int32(8)
    const PAGE_DOWN = const GTK_SCROLL_PAGE_DOWN = Main.Base.int32(9)
    const STEP_LEFT = const GTK_SCROLL_STEP_LEFT = Main.Base.int32(10)
    const STEP_RIGHT = const GTK_SCROLL_STEP_RIGHT = Main.Base.int32(11)
    const PAGE_LEFT = const GTK_SCROLL_PAGE_LEFT = Main.Base.int32(12)
    const PAGE_RIGHT = const GTK_SCROLL_PAGE_RIGHT = Main.Base.int32(13)
    const START = const GTK_SCROLL_START = Main.Base.int32(14)
    const END = const GTK_SCROLL_END = Main.Base.int32(15)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSelectionMode, quote 
    const NONE = const GTK_SELECTION_NONE = Main.Base.int32(0)
    const SINGLE = const GTK_SELECTION_SINGLE = Main.Base.int32(1)
    const BROWSE = const GTK_SELECTION_BROWSE = Main.Base.int32(2)
    const MULTIPLE = const GTK_SELECTION_MULTIPLE = Main.Base.int32(3)
    const EXTENDED = const GTK_SELECTION_EXTENDED = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkShadowType, quote 
    const NONE = const GTK_SHADOW_NONE = Main.Base.int32(0)
    const IN = const GTK_SHADOW_IN = Main.Base.int32(1)
    const OUT = const GTK_SHADOW_OUT = Main.Base.int32(2)
    const ETCHED_IN = const GTK_SHADOW_ETCHED_IN = Main.Base.int32(3)
    const ETCHED_OUT = const GTK_SHADOW_ETCHED_OUT = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkStateType, quote 
    const NORMAL = const GTK_STATE_NORMAL = Main.Base.int32(0)
    const ACTIVE = const GTK_STATE_ACTIVE = Main.Base.int32(1)
    const PRELIGHT = const GTK_STATE_PRELIGHT = Main.Base.int32(2)
    const SELECTED = const GTK_STATE_SELECTED = Main.Base.int32(3)
    const INSENSITIVE = const GTK_STATE_INSENSITIVE = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSubmenuDirection, quote 
    const LEFT = const GTK_DIRECTION_LEFT = Main.Base.int32(0)
    const RIGHT = const GTK_DIRECTION_RIGHT = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSubmenuPlacement, quote 
    const TOP_BOTTOM = const GTK_TOP_BOTTOM = Main.Base.int32(0)
    const LEFT_RIGHT = const GTK_LEFT_RIGHT = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkToolbarStyle, quote 
    const ICONS = const GTK_TOOLBAR_ICONS = Main.Base.int32(0)
    const TEXT = const GTK_TOOLBAR_TEXT = Main.Base.int32(1)
    const BOTH = const GTK_TOOLBAR_BOTH = Main.Base.int32(2)
    const BOTH_HORIZ = const GTK_TOOLBAR_BOTH_HORIZ = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkUpdateType, quote 
    const CONTINUOUS = const GTK_UPDATE_CONTINUOUS = Main.Base.int32(0)
    const DISCONTINUOUS = const GTK_UPDATE_DISCONTINUOUS = Main.Base.int32(1)
    const DELAYED = const GTK_UPDATE_DELAYED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkVisibility, quote 
    const NONE = const GTK_VISIBILITY_NONE = Main.Base.int32(0)
    const PARTIAL = const GTK_VISIBILITY_PARTIAL = Main.Base.int32(1)
    const FULL = const GTK_VISIBILITY_FULL = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkWindowPosition, quote 
    const NONE = const GTK_WIN_POS_NONE = Main.Base.int32(0)
    const CENTER = const GTK_WIN_POS_CENTER = Main.Base.int32(1)
    const MOUSE = const GTK_WIN_POS_MOUSE = Main.Base.int32(2)
    const CENTER_ALWAYS = const GTK_WIN_POS_CENTER_ALWAYS = Main.Base.int32(3)
    const CENTER_ON_PARENT = const GTK_WIN_POS_CENTER_ON_PARENT = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkWindowType, quote 
    const TOPLEVEL = const GTK_WINDOW_TOPLEVEL = Main.Base.int32(0)
    const POPUP = const GTK_WINDOW_POPUP = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkWrapMode, quote 
    const NONE = const GTK_WRAP_NONE = Main.Base.int32(0)
    const CHAR = const GTK_WRAP_CHAR = Main.Base.int32(1)
    const WORD = const GTK_WRAP_WORD = Main.Base.int32(2)
    const WORD_CHAR = const GTK_WRAP_WORD_CHAR = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSortType, quote 
    const ASCENDING = const GTK_SORT_ASCENDING = Main.Base.int32(0)
    const DESCENDING = const GTK_SORT_DESCENDING = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkIMPreeditStyle, quote 
    const NOTHING = const GTK_IM_PREEDIT_NOTHING = Main.Base.int32(0)
    const CALLBACK = const GTK_IM_PREEDIT_CALLBACK = Main.Base.int32(1)
    const NONE = const GTK_IM_PREEDIT_NONE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkIMStatusStyle, quote 
    const NOTHING = const GTK_IM_STATUS_NOTHING = Main.Base.int32(0)
    const CALLBACK = const GTK_IM_STATUS_CALLBACK = Main.Base.int32(1)
    const NONE = const GTK_IM_STATUS_NONE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPackDirection, quote 
    const LTR = const GTK_PACK_DIRECTION_LTR = Main.Base.int32(0)
    const RTL = const GTK_PACK_DIRECTION_RTL = Main.Base.int32(1)
    const TTB = const GTK_PACK_DIRECTION_TTB = Main.Base.int32(2)
    const BTT = const GTK_PACK_DIRECTION_BTT = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPrintPages, quote 
    const ALL = const GTK_PRINT_PAGES_ALL = Main.Base.int32(0)
    const CURRENT = const GTK_PRINT_PAGES_CURRENT = Main.Base.int32(1)
    const RANGES = const GTK_PRINT_PAGES_RANGES = Main.Base.int32(2)
    const SELECTION = const GTK_PRINT_PAGES_SELECTION = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPageSet, quote 
    const ALL = const GTK_PAGE_SET_ALL = Main.Base.int32(0)
    const EVEN = const GTK_PAGE_SET_EVEN = Main.Base.int32(1)
    const ODD = const GTK_PAGE_SET_ODD = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkNumberUpLayout, quote 
    const LEFT_TO_RIGHT_TOP_TO_BOTTOM = const GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = Main.Base.int32(0)
    const LEFT_TO_RIGHT_BOTTOM_TO_TOP = const GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = Main.Base.int32(1)
    const RIGHT_TO_LEFT_TOP_TO_BOTTOM = const GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = Main.Base.int32(2)
    const RIGHT_TO_LEFT_BOTTOM_TO_TOP = const GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = Main.Base.int32(3)
    const TOP_TO_BOTTOM_LEFT_TO_RIGHT = const GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = Main.Base.int32(4)
    const TOP_TO_BOTTOM_RIGHT_TO_LEFT = const GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = Main.Base.int32(5)
    const BOTTOM_TO_TOP_LEFT_TO_RIGHT = const GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = Main.Base.int32(6)
    const BOTTOM_TO_TOP_RIGHT_TO_LEFT = const GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPageOrientation, quote 
    const PORTRAIT = const GTK_PAGE_ORIENTATION_PORTRAIT = Main.Base.int32(0)
    const LANDSCAPE = const GTK_PAGE_ORIENTATION_LANDSCAPE = Main.Base.int32(1)
    const REVERSE_PORTRAIT = const GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = Main.Base.int32(2)
    const REVERSE_LANDSCAPE = const GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPrintQuality, quote 
    const LOW = const GTK_PRINT_QUALITY_LOW = Main.Base.int32(0)
    const NORMAL = const GTK_PRINT_QUALITY_NORMAL = Main.Base.int32(1)
    const HIGH = const GTK_PRINT_QUALITY_HIGH = Main.Base.int32(2)
    const DRAFT = const GTK_PRINT_QUALITY_DRAFT = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPrintDuplex, quote 
    const SIMPLEX = const GTK_PRINT_DUPLEX_SIMPLEX = Main.Base.int32(0)
    const HORIZONTAL = const GTK_PRINT_DUPLEX_HORIZONTAL = Main.Base.int32(1)
    const VERTICAL = const GTK_PRINT_DUPLEX_VERTICAL = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkUnit, quote 
    const PIXEL = const GTK_UNIT_PIXEL = Main.Base.int32(0)
    const POINTS = const GTK_UNIT_POINTS = Main.Base.int32(1)
    const INCH = const GTK_UNIT_INCH = Main.Base.int32(2)
    const MM = const GTK_UNIT_MM = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTreeViewGridLines, quote 
    const NONE = const GTK_TREE_VIEW_GRID_LINES_NONE = Main.Base.int32(0)
    const HORIZONTAL = const GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = Main.Base.int32(1)
    const VERTICAL = const GTK_TREE_VIEW_GRID_LINES_VERTICAL = Main.Base.int32(2)
    const BOTH = const GTK_TREE_VIEW_GRID_LINES_BOTH = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkDragResult, quote 
    const SUCCESS = const GTK_DRAG_RESULT_SUCCESS = Main.Base.int32(0)
    const NO_TARGET = const GTK_DRAG_RESULT_NO_TARGET = Main.Base.int32(1)
    const USER_CANCELLED = const GTK_DRAG_RESULT_USER_CANCELLED = Main.Base.int32(2)
    const TIMEOUT_EXPIRED = const GTK_DRAG_RESULT_TIMEOUT_EXPIRED = Main.Base.int32(3)
    const GRAB_BROKEN = const GTK_DRAG_RESULT_GRAB_BROKEN = Main.Base.int32(4)
    const ERROR = const GTK_DRAG_RESULT_ERROR = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkAccelFlags, quote 
    const VISIBLE = const GTK_ACCEL_VISIBLE = Main.Base.int32(1)
    const LOCKED = const GTK_ACCEL_LOCKED = Main.Base.int32(2)
    const MASK = const GTK_ACCEL_MASK = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkDebugFlag, quote 
    const MISC = const GTK_DEBUG_MISC = Main.Base.int32(1)
    const PLUGSOCKET = const GTK_DEBUG_PLUGSOCKET = Main.Base.int32(2)
    const TEXT = const GTK_DEBUG_TEXT = Main.Base.int32(4)
    const TREE = const GTK_DEBUG_TREE = Main.Base.int32(8)
    const UPDATES = const GTK_DEBUG_UPDATES = Main.Base.int32(16)
    const KEYBINDINGS = const GTK_DEBUG_KEYBINDINGS = Main.Base.int32(32)
    const MULTIHEAD = const GTK_DEBUG_MULTIHEAD = Main.Base.int32(64)
    const MODULES = const GTK_DEBUG_MODULES = Main.Base.int32(128)
    const GEOMETRY = const GTK_DEBUG_GEOMETRY = Main.Base.int32(256)
    const ICONTHEME = const GTK_DEBUG_ICONTHEME = Main.Base.int32(512)
    const PRINTING = const GTK_DEBUG_PRINTING = Main.Base.int32(1024)
    const BUILDER = const GTK_DEBUG_BUILDER = Main.Base.int32(2048)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkObjectFlags, quote 
    const IN_DESTRUCTION = const GTK_IN_DESTRUCTION = Main.Base.int32(1)
    const FLOATING = const GTK_FLOATING = Main.Base.int32(2)
    const RESERVED_1 = const GTK_RESERVED_1 = Main.Base.int32(4)
    const RESERVED_2 = const GTK_RESERVED_2 = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkArgFlags, quote 
    const READABLE = const GTK_ARG_READABLE = Main.Base.int32(1)
    const WRITABLE = const GTK_ARG_WRITABLE = Main.Base.int32(2)
    const CONSTRUCT = const GTK_ARG_CONSTRUCT = Main.Base.int32(4)
    const CONSTRUCT_ONLY = const GTK_ARG_CONSTRUCT_ONLY = Main.Base.int32(8)
    const CHILD_ARG = const GTK_ARG_CHILD_ARG = Main.Base.int32(16)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkRcFlags, quote 
    const FG = const GTK_RC_FG = Main.Base.int32(1)
    const BG = const GTK_RC_BG = Main.Base.int32(2)
    const TEXT = const GTK_RC_TEXT = Main.Base.int32(4)
    const BASE = const GTK_RC_BASE = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkRcTokenType, quote 
    const INVALID = const GTK_RC_TOKEN_INVALID = Main.Base.int32(270)
    const INCLUDE = const GTK_RC_TOKEN_INCLUDE = Main.Base.int32(271)
    const NORMAL = const GTK_RC_TOKEN_NORMAL = Main.Base.int32(272)
    const ACTIVE = const GTK_RC_TOKEN_ACTIVE = Main.Base.int32(273)
    const PRELIGHT = const GTK_RC_TOKEN_PRELIGHT = Main.Base.int32(274)
    const SELECTED = const GTK_RC_TOKEN_SELECTED = Main.Base.int32(275)
    const INSENSITIVE = const GTK_RC_TOKEN_INSENSITIVE = Main.Base.int32(276)
    const FG = const GTK_RC_TOKEN_FG = Main.Base.int32(277)
    const BG = const GTK_RC_TOKEN_BG = Main.Base.int32(278)
    const TEXT = const GTK_RC_TOKEN_TEXT = Main.Base.int32(279)
    const BASE = const GTK_RC_TOKEN_BASE = Main.Base.int32(280)
    const XTHICKNESS = const GTK_RC_TOKEN_XTHICKNESS = Main.Base.int32(281)
    const YTHICKNESS = const GTK_RC_TOKEN_YTHICKNESS = Main.Base.int32(282)
    const FONT = const GTK_RC_TOKEN_FONT = Main.Base.int32(283)
    const FONTSET = const GTK_RC_TOKEN_FONTSET = Main.Base.int32(284)
    const FONT_NAME = const GTK_RC_TOKEN_FONT_NAME = Main.Base.int32(285)
    const BG_PIXMAP = const GTK_RC_TOKEN_BG_PIXMAP = Main.Base.int32(286)
    const PIXMAP_PATH = const GTK_RC_TOKEN_PIXMAP_PATH = Main.Base.int32(287)
    const STYLE = const GTK_RC_TOKEN_STYLE = Main.Base.int32(288)
    const BINDING = const GTK_RC_TOKEN_BINDING = Main.Base.int32(289)
    const BIND = const GTK_RC_TOKEN_BIND = Main.Base.int32(290)
    const WIDGET = const GTK_RC_TOKEN_WIDGET = Main.Base.int32(291)
    const WIDGET_CLASS = const GTK_RC_TOKEN_WIDGET_CLASS = Main.Base.int32(292)
    const CLASS = const GTK_RC_TOKEN_CLASS = Main.Base.int32(293)
    const LOWEST = const GTK_RC_TOKEN_LOWEST = Main.Base.int32(294)
    const GTK = const GTK_RC_TOKEN_GTK = Main.Base.int32(295)
    const APPLICATION = const GTK_RC_TOKEN_APPLICATION = Main.Base.int32(296)
    const THEME = const GTK_RC_TOKEN_THEME = Main.Base.int32(297)
    const RC = const GTK_RC_TOKEN_RC = Main.Base.int32(298)
    const HIGHEST = const GTK_RC_TOKEN_HIGHEST = Main.Base.int32(299)
    const ENGINE = const GTK_RC_TOKEN_ENGINE = Main.Base.int32(300)
    const MODULE_PATH = const GTK_RC_TOKEN_MODULE_PATH = Main.Base.int32(301)
    const IM_MODULE_PATH = const GTK_RC_TOKEN_IM_MODULE_PATH = Main.Base.int32(302)
    const IM_MODULE_FILE = const GTK_RC_TOKEN_IM_MODULE_FILE = Main.Base.int32(303)
    const STOCK = const GTK_RC_TOKEN_STOCK = Main.Base.int32(304)
    const LTR = const GTK_RC_TOKEN_LTR = Main.Base.int32(305)
    const RTL = const GTK_RC_TOKEN_RTL = Main.Base.int32(306)
    const COLOR = const GTK_RC_TOKEN_COLOR = Main.Base.int32(307)
    const UNBIND = const GTK_RC_TOKEN_UNBIND = Main.Base.int32(308)
    const LAST = const GTK_RC_TOKEN_LAST = Main.Base.int32(309)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkWidgetFlags, quote 
    const TOPLEVEL = const GTK_TOPLEVEL = Main.Base.int32(16)
    const NO_WINDOW = const GTK_NO_WINDOW = Main.Base.int32(32)
    const REALIZED = const GTK_REALIZED = Main.Base.int32(64)
    const MAPPED = const GTK_MAPPED = Main.Base.int32(128)
    const VISIBLE = const GTK_VISIBLE = Main.Base.int32(256)
    const SENSITIVE = const GTK_SENSITIVE = Main.Base.int32(512)
    const PARENT_SENSITIVE = const GTK_PARENT_SENSITIVE = Main.Base.int32(1024)
    const CAN_FOCUS = const GTK_CAN_FOCUS = Main.Base.int32(2048)
    const HAS_FOCUS = const GTK_HAS_FOCUS = Main.Base.int32(4096)
    const CAN_DEFAULT = const GTK_CAN_DEFAULT = Main.Base.int32(8192)
    const HAS_DEFAULT = const GTK_HAS_DEFAULT = Main.Base.int32(16384)
    const HAS_GRAB = const GTK_HAS_GRAB = Main.Base.int32(32768)
    const RC_STYLE = const GTK_RC_STYLE = Main.Base.int32(65536)
    const COMPOSITE_CHILD = const GTK_COMPOSITE_CHILD = Main.Base.int32(131072)
    const NO_REPARENT = const GTK_NO_REPARENT = Main.Base.int32(262144)
    const APP_PAINTABLE = const GTK_APP_PAINTABLE = Main.Base.int32(524288)
    const RECEIVES_DEFAULT = const GTK_RECEIVES_DEFAULT = Main.Base.int32(1048576)
    const DOUBLE_BUFFERED = const GTK_DOUBLE_BUFFERED = Main.Base.int32(2097152)
    const NO_SHOW_ALL = const GTK_NO_SHOW_ALL = Main.Base.int32(4194304)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkWidgetHelpType, quote 
    const TOOLTIP = const GTK_WIDGET_HELP_TOOLTIP = Main.Base.int32(0)
    const WHATS_THIS = const GTK_WIDGET_HELP_WHATS_THIS = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkDialogFlags, quote 
    const MODAL = const GTK_DIALOG_MODAL = Main.Base.int32(1)
    const DESTROY_WITH_PARENT = const GTK_DIALOG_DESTROY_WITH_PARENT = Main.Base.int32(2)
    const NO_SEPARATOR = const GTK_DIALOG_NO_SEPARATOR = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkResponseType, quote 
    const NONE = const GTK_RESPONSE_NONE = Main.Base.int32(-1)
    const REJECT = const GTK_RESPONSE_REJECT = Main.Base.int32(-2)
    const ACCEPT = const GTK_RESPONSE_ACCEPT = Main.Base.int32(-3)
    const DELETE_EVENT = const GTK_RESPONSE_DELETE_EVENT = Main.Base.int32(-4)
    const OK = const GTK_RESPONSE_OK = Main.Base.int32(-5)
    const CANCEL = const GTK_RESPONSE_CANCEL = Main.Base.int32(-6)
    const CLOSE = const GTK_RESPONSE_CLOSE = Main.Base.int32(-7)
    const YES = const GTK_RESPONSE_YES = Main.Base.int32(-8)
    const NO = const GTK_RESPONSE_NO = Main.Base.int32(-9)
    const APPLY = const GTK_RESPONSE_APPLY = Main.Base.int32(-10)
    const HELP = const GTK_RESPONSE_HELP = Main.Base.int32(-11)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkAssistantPageType, quote 
    const CONTENT = const GTK_ASSISTANT_PAGE_CONTENT = Main.Base.int32(0)
    const INTRO = const GTK_ASSISTANT_PAGE_INTRO = Main.Base.int32(1)
    const CONFIRM = const GTK_ASSISTANT_PAGE_CONFIRM = Main.Base.int32(2)
    const SUMMARY = const GTK_ASSISTANT_PAGE_SUMMARY = Main.Base.int32(3)
    const PROGRESS = const GTK_ASSISTANT_PAGE_PROGRESS = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkBuilderError, quote 
    const INVALID_TYPE_FUNCTION = const GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = Main.Base.int32(0)
    const UNHANDLED_TAG = const GTK_BUILDER_ERROR_UNHANDLED_TAG = Main.Base.int32(1)
    const MISSING_ATTRIBUTE = const GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = Main.Base.int32(2)
    const INVALID_ATTRIBUTE = const GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = Main.Base.int32(3)
    const INVALID_TAG = const GTK_BUILDER_ERROR_INVALID_TAG = Main.Base.int32(4)
    const MISSING_PROPERTY_VALUE = const GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = Main.Base.int32(5)
    const INVALID_VALUE = const GTK_BUILDER_ERROR_INVALID_VALUE = Main.Base.int32(6)
    const VERSION_MISMATCH = const GTK_BUILDER_ERROR_VERSION_MISMATCH = Main.Base.int32(7)
    const DUPLICATE_ID = const GTK_BUILDER_ERROR_DUPLICATE_ID = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkImageType, quote 
    const EMPTY = const GTK_IMAGE_EMPTY = Main.Base.int32(0)
    const PIXMAP = const GTK_IMAGE_PIXMAP = Main.Base.int32(1)
    const IMAGE = const GTK_IMAGE_IMAGE = Main.Base.int32(2)
    const PIXBUF = const GTK_IMAGE_PIXBUF = Main.Base.int32(3)
    const STOCK = const GTK_IMAGE_STOCK = Main.Base.int32(4)
    const ICON_SET = const GTK_IMAGE_ICON_SET = Main.Base.int32(5)
    const ANIMATION = const GTK_IMAGE_ANIMATION = Main.Base.int32(6)
    const ICON_NAME = const GTK_IMAGE_ICON_NAME = Main.Base.int32(7)
    const GICON = const GTK_IMAGE_GICON = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCalendarDisplayOptions, quote 
    const SHOW_HEADING = const GTK_CALENDAR_SHOW_HEADING = Main.Base.int32(1)
    const SHOW_DAY_NAMES = const GTK_CALENDAR_SHOW_DAY_NAMES = Main.Base.int32(2)
    const NO_MONTH_CHANGE = const GTK_CALENDAR_NO_MONTH_CHANGE = Main.Base.int32(4)
    const SHOW_WEEK_NUMBERS = const GTK_CALENDAR_SHOW_WEEK_NUMBERS = Main.Base.int32(8)
    const WEEK_START_MONDAY = const GTK_CALENDAR_WEEK_START_MONDAY = Main.Base.int32(16)
    const SHOW_DETAILS = const GTK_CALENDAR_SHOW_DETAILS = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCellRendererState, quote 
    const SELECTED = const GTK_CELL_RENDERER_SELECTED = Main.Base.int32(1)
    const PRELIT = const GTK_CELL_RENDERER_PRELIT = Main.Base.int32(2)
    const INSENSITIVE = const GTK_CELL_RENDERER_INSENSITIVE = Main.Base.int32(4)
    const SORTED = const GTK_CELL_RENDERER_SORTED = Main.Base.int32(8)
    const FOCUSED = const GTK_CELL_RENDERER_FOCUSED = Main.Base.int32(16)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCellRendererMode, quote 
    const INERT = const GTK_CELL_RENDERER_MODE_INERT = Main.Base.int32(0)
    const ACTIVATABLE = const GTK_CELL_RENDERER_MODE_ACTIVATABLE = Main.Base.int32(1)
    const EDITABLE = const GTK_CELL_RENDERER_MODE_EDITABLE = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTreeModelFlags, quote 
    const ITERS_PERSIST = const GTK_TREE_MODEL_ITERS_PERSIST = Main.Base.int32(1)
    const LIST_ONLY = const GTK_TREE_MODEL_LIST_ONLY = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTreeViewColumnSizing, quote 
    const GROW_ONLY = const GTK_TREE_VIEW_COLUMN_GROW_ONLY = Main.Base.int32(0)
    const AUTOSIZE = const GTK_TREE_VIEW_COLUMN_AUTOSIZE = Main.Base.int32(1)
    const FIXED = const GTK_TREE_VIEW_COLUMN_FIXED = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCellRendererAccelMode, quote 
    const GTK = const GTK_CELL_RENDERER_ACCEL_MODE_GTK = Main.Base.int32(0)
    const OTHER = const GTK_CELL_RENDERER_ACCEL_MODE_OTHER = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTextSearchFlags, quote 
    const VISIBLE_ONLY = const GTK_TEXT_SEARCH_VISIBLE_ONLY = Main.Base.int32(1)
    const TEXT_ONLY = const GTK_TEXT_SEARCH_TEXT_ONLY = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkDestDefaults, quote 
    const MOTION = const GTK_DEST_DEFAULT_MOTION = Main.Base.int32(1)
    const HIGHLIGHT = const GTK_DEST_DEFAULT_HIGHLIGHT = Main.Base.int32(2)
    const DROP = const GTK_DEST_DEFAULT_DROP = Main.Base.int32(4)
    const ALL = const GTK_DEST_DEFAULT_ALL = Main.Base.int32(7)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTargetFlags, quote 
    const SAME_APP = const GTK_TARGET_SAME_APP = Main.Base.int32(1)
    const SAME_WIDGET = const GTK_TARGET_SAME_WIDGET = Main.Base.int32(2)
    const OTHER_APP = const GTK_TARGET_OTHER_APP = Main.Base.int32(4)
    const OTHER_WIDGET = const GTK_TARGET_OTHER_WIDGET = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkEntryIconPosition, quote 
    const PRIMARY = const GTK_ENTRY_ICON_PRIMARY = Main.Base.int32(0)
    const SECONDARY = const GTK_ENTRY_ICON_SECONDARY = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTreeViewDropPosition, quote 
    const BEFORE = const GTK_TREE_VIEW_DROP_BEFORE = Main.Base.int32(0)
    const AFTER = const GTK_TREE_VIEW_DROP_AFTER = Main.Base.int32(1)
    const INTO_OR_BEFORE = const GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = Main.Base.int32(2)
    const INTO_OR_AFTER = const GTK_TREE_VIEW_DROP_INTO_OR_AFTER = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkFileFilterFlags, quote 
    const FILENAME = const GTK_FILE_FILTER_FILENAME = Main.Base.int32(1)
    const URI = const GTK_FILE_FILTER_URI = Main.Base.int32(2)
    const DISPLAY_NAME = const GTK_FILE_FILTER_DISPLAY_NAME = Main.Base.int32(4)
    const MIME_TYPE = const GTK_FILE_FILTER_MIME_TYPE = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkFileChooserAction, quote 
    const OPEN = const GTK_FILE_CHOOSER_ACTION_OPEN = Main.Base.int32(0)
    const SAVE = const GTK_FILE_CHOOSER_ACTION_SAVE = Main.Base.int32(1)
    const SELECT_FOLDER = const GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = Main.Base.int32(2)
    const CREATE_FOLDER = const GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkFileChooserConfirmation, quote 
    const CONFIRM = const GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = Main.Base.int32(0)
    const ACCEPT_FILENAME = const GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = Main.Base.int32(1)
    const SELECT_AGAIN = const GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkFileChooserError, quote 
    const NONEXISTENT = const GTK_FILE_CHOOSER_ERROR_NONEXISTENT = Main.Base.int32(0)
    const BAD_FILENAME = const GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = Main.Base.int32(1)
    const ALREADY_EXISTS = const GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = Main.Base.int32(2)
    const INCOMPLETE_HOSTNAME = const GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkIconLookupFlags, quote 
    const NO_SVG = const GTK_ICON_LOOKUP_NO_SVG = Main.Base.int32(1)
    const FORCE_SVG = const GTK_ICON_LOOKUP_FORCE_SVG = Main.Base.int32(2)
    const USE_BUILTIN = const GTK_ICON_LOOKUP_USE_BUILTIN = Main.Base.int32(4)
    const GENERIC_FALLBACK = const GTK_ICON_LOOKUP_GENERIC_FALLBACK = Main.Base.int32(8)
    const FORCE_SIZE = const GTK_ICON_LOOKUP_FORCE_SIZE = Main.Base.int32(16)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkIconThemeError, quote 
    const NOT_FOUND = const GTK_ICON_THEME_NOT_FOUND = Main.Base.int32(0)
    const FAILED = const GTK_ICON_THEME_FAILED = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkIconViewDropPosition, quote 
    const NO_DROP = const GTK_ICON_VIEW_NO_DROP = Main.Base.int32(0)
    const DROP_INTO = const GTK_ICON_VIEW_DROP_INTO = Main.Base.int32(1)
    const DROP_LEFT = const GTK_ICON_VIEW_DROP_LEFT = Main.Base.int32(2)
    const DROP_RIGHT = const GTK_ICON_VIEW_DROP_RIGHT = Main.Base.int32(3)
    const DROP_ABOVE = const GTK_ICON_VIEW_DROP_ABOVE = Main.Base.int32(4)
    const DROP_BELOW = const GTK_ICON_VIEW_DROP_BELOW = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSizeGroupMode, quote 
    const NONE = const GTK_SIZE_GROUP_NONE = Main.Base.int32(0)
    const HORIZONTAL = const GTK_SIZE_GROUP_HORIZONTAL = Main.Base.int32(1)
    const VERTICAL = const GTK_SIZE_GROUP_VERTICAL = Main.Base.int32(2)
    const BOTH = const GTK_SIZE_GROUP_BOTH = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkButtonsType, quote 
    const NONE = const GTK_BUTTONS_NONE = Main.Base.int32(0)
    const OK = const GTK_BUTTONS_OK = Main.Base.int32(1)
    const CLOSE = const GTK_BUTTONS_CLOSE = Main.Base.int32(2)
    const CANCEL = const GTK_BUTTONS_CANCEL = Main.Base.int32(3)
    const YES_NO = const GTK_BUTTONS_YES_NO = Main.Base.int32(4)
    const OK_CANCEL = const GTK_BUTTONS_OK_CANCEL = Main.Base.int32(5)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkNotebookTab, quote 
    const FIRST = const GTK_NOTEBOOK_TAB_FIRST = Main.Base.int32(0)
    const LAST = const GTK_NOTEBOOK_TAB_LAST = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPrintStatus, quote 
    const INITIAL = const GTK_PRINT_STATUS_INITIAL = Main.Base.int32(0)
    const PREPARING = const GTK_PRINT_STATUS_PREPARING = Main.Base.int32(1)
    const GENERATING_DATA = const GTK_PRINT_STATUS_GENERATING_DATA = Main.Base.int32(2)
    const SENDING_DATA = const GTK_PRINT_STATUS_SENDING_DATA = Main.Base.int32(3)
    const PENDING = const GTK_PRINT_STATUS_PENDING = Main.Base.int32(4)
    const PENDING_ISSUE = const GTK_PRINT_STATUS_PENDING_ISSUE = Main.Base.int32(5)
    const PRINTING = const GTK_PRINT_STATUS_PRINTING = Main.Base.int32(6)
    const FINISHED = const GTK_PRINT_STATUS_FINISHED = Main.Base.int32(7)
    const FINISHED_ABORTED = const GTK_PRINT_STATUS_FINISHED_ABORTED = Main.Base.int32(8)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPrintOperationResult, quote 
    const ERROR = const GTK_PRINT_OPERATION_RESULT_ERROR = Main.Base.int32(0)
    const APPLY = const GTK_PRINT_OPERATION_RESULT_APPLY = Main.Base.int32(1)
    const CANCEL = const GTK_PRINT_OPERATION_RESULT_CANCEL = Main.Base.int32(2)
    const IN_PROGRESS = const GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPrintOperationAction, quote 
    const PRINT_DIALOG = const GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = Main.Base.int32(0)
    const PRINT = const GTK_PRINT_OPERATION_ACTION_PRINT = Main.Base.int32(1)
    const PREVIEW = const GTK_PRINT_OPERATION_ACTION_PREVIEW = Main.Base.int32(2)
    const EXPORT = const GTK_PRINT_OPERATION_ACTION_EXPORT = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkPrintError, quote 
    const GENERAL = const GTK_PRINT_ERROR_GENERAL = Main.Base.int32(0)
    const INTERNAL_ERROR = const GTK_PRINT_ERROR_INTERNAL_ERROR = Main.Base.int32(1)
    const NOMEM = const GTK_PRINT_ERROR_NOMEM = Main.Base.int32(2)
    const INVALID_FILE = const GTK_PRINT_ERROR_INVALID_FILE = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkProgressBarStyle, quote 
    const CONTINUOUS = const GTK_PROGRESS_CONTINUOUS = Main.Base.int32(0)
    const DISCRETE = const GTK_PROGRESS_DISCRETE = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkProgressBarOrientation, quote 
    const LEFT_TO_RIGHT = const GTK_PROGRESS_LEFT_TO_RIGHT = Main.Base.int32(0)
    const RIGHT_TO_LEFT = const GTK_PROGRESS_RIGHT_TO_LEFT = Main.Base.int32(1)
    const BOTTOM_TO_TOP = const GTK_PROGRESS_BOTTOM_TO_TOP = Main.Base.int32(2)
    const TOP_TO_BOTTOM = const GTK_PROGRESS_TOP_TO_BOTTOM = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkRecentManagerError, quote 
    const NOT_FOUND = const GTK_RECENT_MANAGER_ERROR_NOT_FOUND = Main.Base.int32(0)
    const INVALID_URI = const GTK_RECENT_MANAGER_ERROR_INVALID_URI = Main.Base.int32(1)
    const INVALID_ENCODING = const GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = Main.Base.int32(2)
    const NOT_REGISTERED = const GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = Main.Base.int32(3)
    const READ = const GTK_RECENT_MANAGER_ERROR_READ = Main.Base.int32(4)
    const WRITE = const GTK_RECENT_MANAGER_ERROR_WRITE = Main.Base.int32(5)
    const UNKNOWN = const GTK_RECENT_MANAGER_ERROR_UNKNOWN = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkRecentFilterFlags, quote 
    const URI = const GTK_RECENT_FILTER_URI = Main.Base.int32(1)
    const DISPLAY_NAME = const GTK_RECENT_FILTER_DISPLAY_NAME = Main.Base.int32(2)
    const MIME_TYPE = const GTK_RECENT_FILTER_MIME_TYPE = Main.Base.int32(4)
    const APPLICATION = const GTK_RECENT_FILTER_APPLICATION = Main.Base.int32(8)
    const GROUP = const GTK_RECENT_FILTER_GROUP = Main.Base.int32(16)
    const AGE = const GTK_RECENT_FILTER_AGE = Main.Base.int32(32)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkRecentSortType, quote 
    const NONE = const GTK_RECENT_SORT_NONE = Main.Base.int32(0)
    const MRU = const GTK_RECENT_SORT_MRU = Main.Base.int32(1)
    const LRU = const GTK_RECENT_SORT_LRU = Main.Base.int32(2)
    const CUSTOM = const GTK_RECENT_SORT_CUSTOM = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkRecentChooserError, quote 
    const NOT_FOUND = const GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = Main.Base.int32(0)
    const INVALID_URI = const GTK_RECENT_CHOOSER_ERROR_INVALID_URI = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSpinButtonUpdatePolicy, quote 
    const ALWAYS = const GTK_UPDATE_ALWAYS = Main.Base.int32(0)
    const IF_VALID = const GTK_UPDATE_IF_VALID = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkSpinType, quote 
    const STEP_FORWARD = const GTK_SPIN_STEP_FORWARD = Main.Base.int32(0)
    const STEP_BACKWARD = const GTK_SPIN_STEP_BACKWARD = Main.Base.int32(1)
    const PAGE_FORWARD = const GTK_SPIN_PAGE_FORWARD = Main.Base.int32(2)
    const PAGE_BACKWARD = const GTK_SPIN_PAGE_BACKWARD = Main.Base.int32(3)
    const HOME = const GTK_SPIN_HOME = Main.Base.int32(4)
    const END = const GTK_SPIN_END = Main.Base.int32(5)
    const USER_DEFINED = const GTK_SPIN_USER_DEFINED = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTextBufferTargetInfo, quote 
    const BUFFER_CONTENTS = const GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = Main.Base.int32(-1)
    const RICH_TEXT = const GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = Main.Base.int32(-2)
    const TEXT = const GTK_TEXT_BUFFER_TARGET_INFO_TEXT = Main.Base.int32(-3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkTextWindowType, quote 
    const PRIVATE = const GTK_TEXT_WINDOW_PRIVATE = Main.Base.int32(0)
    const WIDGET = const GTK_TEXT_WINDOW_WIDGET = Main.Base.int32(1)
    const TEXT = const GTK_TEXT_WINDOW_TEXT = Main.Base.int32(2)
    const LEFT = const GTK_TEXT_WINDOW_LEFT = Main.Base.int32(3)
    const RIGHT = const GTK_TEXT_WINDOW_RIGHT = Main.Base.int32(4)
    const TOP = const GTK_TEXT_WINDOW_TOP = Main.Base.int32(5)
    const BOTTOM = const GTK_TEXT_WINDOW_BOTTOM = Main.Base.int32(6)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkToolbarChildType, quote 
    const SPACE = const GTK_TOOLBAR_CHILD_SPACE = Main.Base.int32(0)
    const BUTTON = const GTK_TOOLBAR_CHILD_BUTTON = Main.Base.int32(1)
    const TOGGLEBUTTON = const GTK_TOOLBAR_CHILD_TOGGLEBUTTON = Main.Base.int32(2)
    const RADIOBUTTON = const GTK_TOOLBAR_CHILD_RADIOBUTTON = Main.Base.int32(3)
    const WIDGET = const GTK_TOOLBAR_CHILD_WIDGET = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkToolbarSpaceStyle, quote 
    const EMPTY = const GTK_TOOLBAR_SPACE_EMPTY = Main.Base.int32(0)
    const LINE = const GTK_TOOLBAR_SPACE_LINE = Main.Base.int32(1)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkToolPaletteDragTargets, quote 
    const ITEMS = const GTK_TOOL_PALETTE_DRAG_ITEMS = Main.Base.int32(1)
    const GROUPS = const GTK_TOOL_PALETTE_DRAG_GROUPS = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkUIManagerItemType, quote 
    const AUTO = const GTK_UI_MANAGER_AUTO = Main.Base.int32(0)
    const MENUBAR = const GTK_UI_MANAGER_MENUBAR = Main.Base.int32(1)
    const MENU = const GTK_UI_MANAGER_MENU = Main.Base.int32(2)
    const TOOLBAR = const GTK_UI_MANAGER_TOOLBAR = Main.Base.int32(4)
    const PLACEHOLDER = const GTK_UI_MANAGER_PLACEHOLDER = Main.Base.int32(8)
    const POPUP = const GTK_UI_MANAGER_POPUP = Main.Base.int32(16)
    const MENUITEM = const GTK_UI_MANAGER_MENUITEM = Main.Base.int32(32)
    const TOOLITEM = const GTK_UI_MANAGER_TOOLITEM = Main.Base.int32(64)
    const SEPARATOR = const GTK_UI_MANAGER_SEPARATOR = Main.Base.int32(128)
    const ACCELERATOR = const GTK_UI_MANAGER_ACCELERATOR = Main.Base.int32(256)
    const POPUP_WITH_ACCELS = const GTK_UI_MANAGER_POPUP_WITH_ACCELS = Main.Base.int32(512)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCellType, quote 
    const EMPTY = const GTK_CELL_EMPTY = Main.Base.int32(0)
    const TEXT = const GTK_CELL_TEXT = Main.Base.int32(1)
    const PIXMAP = const GTK_CELL_PIXMAP = Main.Base.int32(2)
    const PIXTEXT = const GTK_CELL_PIXTEXT = Main.Base.int32(3)
    const WIDGET = const GTK_CELL_WIDGET = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCListDragPos, quote 
    const NONE = const GTK_CLIST_DRAG_NONE = Main.Base.int32(0)
    const BEFORE = const GTK_CLIST_DRAG_BEFORE = Main.Base.int32(1)
    const INTO = const GTK_CLIST_DRAG_INTO = Main.Base.int32(2)
    const AFTER = const GTK_CLIST_DRAG_AFTER = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkButtonAction, quote 
    const IGNORED = const GTK_BUTTON_IGNORED = Main.Base.int32(0)
    const SELECTS = const GTK_BUTTON_SELECTS = Main.Base.int32(1)
    const DRAGS = const GTK_BUTTON_DRAGS = Main.Base.int32(2)
    const EXPANDS = const GTK_BUTTON_EXPANDS = Main.Base.int32(4)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCTreePos, quote 
    const BEFORE = const GTK_CTREE_POS_BEFORE = Main.Base.int32(0)
    const AS_CHILD = const GTK_CTREE_POS_AS_CHILD = Main.Base.int32(1)
    const AFTER = const GTK_CTREE_POS_AFTER = Main.Base.int32(2)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCTreeLineStyle, quote 
    const NONE = const GTK_CTREE_LINES_NONE = Main.Base.int32(0)
    const SOLID = const GTK_CTREE_LINES_SOLID = Main.Base.int32(1)
    const DOTTED = const GTK_CTREE_LINES_DOTTED = Main.Base.int32(2)
    const TABBED = const GTK_CTREE_LINES_TABBED = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCTreeExpanderStyle, quote 
    const NONE = const GTK_CTREE_EXPANDER_NONE = Main.Base.int32(0)
    const SQUARE = const GTK_CTREE_EXPANDER_SQUARE = Main.Base.int32(1)
    const TRIANGLE = const GTK_CTREE_EXPANDER_TRIANGLE = Main.Base.int32(2)
    const CIRCULAR = const GTK_CTREE_EXPANDER_CIRCULAR = Main.Base.int32(3)
end)))))
    $(Expr(:toplevel, :($(Expr(:module, false, :GtkCTreeExpansionType, quote 
    const EXPAND = const GTK_CTREE_EXPANSION_EXPAND = Main.Base.int32(0)
    const EXPAND_RECURSIVE = const GTK_CTREE_EXPANSION_EXPAND_RECURSIVE = Main.Base.int32(1)
    const COLLAPSE = const GTK_CTREE_EXPANSION_COLLAPSE = Main.Base.int32(2)
    const COLLAPSE_RECURSIVE = const GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE = Main.Base.int32(3)
    const TOGGLE = const GTK_CTREE_EXPANSION_TOGGLE = Main.Base.int32(4)
    const TOGGLE_RECURSIVE = const GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE = Main.Base.int32(5)
end)))))
    const G_GNUC_FUNCTION = ""
    const G_GNUC_PRETTY_FUNCTION = ""
    const G_ANALYZER_ANALYZING = 1
    const GID_MAX = 2147483647
    const G_GINT16_MODIFIER = "h"
    const G_GINT16_FORMAT = "hi"
    const G_GUINT16_FORMAT = "hu"
    const G_GINT32_MODIFIER = ""
    const G_GINT32_FORMAT = "i"
    const G_GUINT32_FORMAT = "u"
    const G_GINT64_MODIFIER = "l"
    const G_GINT64_FORMAT = "li"
    const G_GUINT64_FORMAT = "lu"
    const GLIB_SIZEOF_VOID_P = 8
    const GLIB_SIZEOF_LONG = 8
    const GLIB_SIZEOF_SIZE_T = 8
    const GLIB_SIZEOF_SSIZE_T = 8
    const G_GSIZE_MODIFIER = "l"
    const G_GSSIZE_MODIFIER = "l"
    const G_GSIZE_FORMAT = "lu"
    const G_GSSIZE_FORMAT = "li"
    const G_GINTPTR_MODIFIER = "l"
    const G_GINTPTR_FORMAT = "li"
    const G_GUINTPTR_FORMAT = "lu"
    const GLIB_MAJOR_VERSION = 2
    const GLIB_MINOR_VERSION = 40
    const GLIB_MICRO_VERSION = 0
    const G_VA_COPY_AS_ARRAY = 1
    const G_HAVE_INLINE = 1
    const G_HAVE___INLINE = 1
    const G_CAN_INLINE = 1
    const G_HAVE_ISO_VARARGS = 1
    const G_HAVE_GNUC_VARARGS = 1
    const G_HAVE_GROWING_STACK = 0
    const G_MODULE_SUFFIX = "so"
    const GLIB_SYSDEF_AF_UNIX = 1
    const GLIB_SYSDEF_AF_INET = 2
    const GLIB_SYSDEF_MSG_OOB = 1
    const GLIB_SYSDEF_MSG_PEEK = 2
    const GLIB_SYSDEF_MSG_DONTROUTE = 4
    const G_E = 2.718281828459045
    const G_PI = 3.141592653589793
    const G_LITTLE_ENDIAN = 1234
    const G_BIG_ENDIAN = 4321
    const G_PDP_ENDIAN = 3412
    const G_DATALIST_FLAGS_MASK = 0x03
    const G_DATE_BAD_JULIAN = 0
    const G_DATE_BAD_DAY = 0
    const G_DATE_BAD_YEAR = 0
    const G_DIR_SEPARATOR = '/'
    const G_DIR_SEPARATOR_S = "/"
    const G_SEARCHPATH_SEPARATOR = ':'
    const G_SEARCHPATH_SEPARATOR_S = ":"
    const G_POLLFD_FORMAT = "%d"
    const G_PRIORITY_DEFAULT = 0
    const G_PRIORITY_HIGH_IDLE = 100
    const G_PRIORITY_DEFAULT_IDLE = 200
    const G_PRIORITY_LOW = 300
    const G_UNICHAR_MAX_DECOMPOSITION_LENGTH = 18
    const G_KEY_FILE_DESKTOP_GROUP = "Desktop Entry"
    const G_KEY_FILE_DESKTOP_KEY_TYPE = "Type"
    const G_KEY_FILE_DESKTOP_KEY_VERSION = "Version"
    const G_KEY_FILE_DESKTOP_KEY_NAME = "Name"
    const G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName"
    const G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay"
    const G_KEY_FILE_DESKTOP_KEY_COMMENT = "Comment"
    const G_KEY_FILE_DESKTOP_KEY_ICON = "Icon"
    const G_KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden"
    const G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn"
    const G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn"
    const G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec"
    const G_KEY_FILE_DESKTOP_KEY_EXEC = "Exec"
    const G_KEY_FILE_DESKTOP_KEY_PATH = "Path"
    const G_KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal"
    const G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType"
    const G_KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories"
    const G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify"
    const G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass"
    const G_KEY_FILE_DESKTOP_KEY_URL = "URL"
    const G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = "DBusActivatable"
    const G_KEY_FILE_DESKTOP_KEY_ACTIONS = "Actions"
    const G_KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application"
    const G_KEY_FILE_DESKTOP_TYPE_LINK = "Link"
    const G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory"
    const G_OPTION_REMAINING = ""
    const G_CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    const G_CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz"
    const G_CSET_DIGITS = "0123456789"
    const G_STR_DELIMITERS = "_-|> <."
    const G_USEC_PER_SEC = 1000000
    const G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@"
    const G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!\$&'()*+,;="
    const G_ALLOC_ONLY = 1
    const G_ALLOC_AND_FREE = 2
    const G_ALLOCATOR_LIST = 1
    const G_ALLOCATOR_SLIST = 2
    const G_ALLOCATOR_NODE = 3
    const G_SIGNAL_FLAGS_MASK = 0x1f
    const G_SIGNAL_MATCH_MASK = 0x03
    const G_FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type"
    const G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden"
    const G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup"
    const G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink"
    const G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual"
    const G_FILE_ATTRIBUTE_STANDARD_NAME = "standard::name"
    const G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name"
    const G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name"
    const G_FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name"
    const G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description"
    const G_FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon"
    const G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = "standard::symbolic-icon"
    const G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type"
    const G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type"
    const G_FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size"
    const G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size"
    const G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target"
    const G_FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri"
    const G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order"
    const G_FILE_ATTRIBUTE_ETAG_VALUE = "etag::value"
    const G_FILE_ATTRIBUTE_ID_FILE = "id::file"
    const G_FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject"
    const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device"
    const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file"
    const G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop"
    const G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll"
    const G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic"
    const G_FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified"
    const G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec"
    const G_FILE_ATTRIBUTE_TIME_ACCESS = "time::access"
    const G_FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec"
    const G_FILE_ATTRIBUTE_TIME_CHANGED = "time::changed"
    const G_FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec"
    const G_FILE_ATTRIBUTE_TIME_CREATED = "time::created"
    const G_FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec"
    const G_FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device"
    const G_FILE_ATTRIBUTE_UNIX_INODE = "unix::inode"
    const G_FILE_ATTRIBUTE_UNIX_MODE = "unix::mode"
    const G_FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink"
    const G_FILE_ATTRIBUTE_UNIX_UID = "unix::uid"
    const G_FILE_ATTRIBUTE_UNIX_GID = "unix::gid"
    const G_FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev"
    const G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size"
    const G_FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks"
    const G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint"
    const G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive"
    const G_FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system"
    const G_FILE_ATTRIBUTE_OWNER_USER = "owner::user"
    const G_FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real"
    const G_FILE_ATTRIBUTE_OWNER_GROUP = "owner::group"
    const G_FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path"
    const G_FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed"
    const G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = "thumbnail::is-valid"
    const G_FILE_ATTRIBUTE_PREVIEW_ICON = "preview::icon"
    const G_FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size"
    const G_FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free"
    const G_FILE_ATTRIBUTE_FILESYSTEM_USED = "filesystem::used"
    const G_FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type"
    const G_FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly"
    const G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview"
    const G_FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend"
    const G_FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context"
    const G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count"
    const G_FILE_ATTRIBUTE_TRASH_ORIG_PATH = "trash::orig-path"
    const G_FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date"
    const G_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor"
    const G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor"
    const G_NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor"
    const G_PROXY_EXTENSION_POINT_NAME = "gio-proxy"
    const G_PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver"
    const G_TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend"
    const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1"
    const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2"
    const G_VFS_EXTENSION_POINT_NAME = "gio-vfs"
    const G_VOLUME_IDENTIFIER_KIND_HAL_UDI = "hal-udi"
    const G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device"
    const G_VOLUME_IDENTIFIER_KIND_LABEL = "label"
    const G_VOLUME_IDENTIFIER_KIND_UUID = "uuid"
    const G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount"
    const G_VOLUME_IDENTIFIER_KIND_CLASS = "class"
    const G_MENU_ATTRIBUTE_ACTION = "action"
    const G_MENU_ATTRIBUTE_ACTION_NAMESPACE = "action-namespace"
    const G_MENU_ATTRIBUTE_TARGET = "target"
    const G_MENU_ATTRIBUTE_LABEL = "label"
    const G_MENU_ATTRIBUTE_ICON = "icon"
    const G_MENU_LINK_SUBMENU = "submenu"
    const G_MENU_LINK_SECTION = "section"
    const GDK_HAVE_WCHAR_H = 1
    const GDK_HAVE_WCTYPE_H = 1
    const GDK_HAVE_BROKEN_WCTYPE = 1
    const GDK_CURRENT_TIME = 0
    const GDK_PARENT_RELATIVE = 1
    const GDK_MAX_TIMECOORD_AXES = 128
    const GDK_PIXBUF_FEATURES_H = 1
    const GDK_PIXBUF_VERSION = "2.30.8"
    const GTK_PATH_PRIO_MASK = 0x00
    const GTK_MAX_COMPOSE_LEN = 7
    const GTK_PAPER_NAME_LETTER = "na_letter"
    const GTK_PAPER_NAME_EXECUTIVE = "na_executive"
    const GTK_PAPER_NAME_LEGAL = "na_legal"
    const GTK_PRINT_SETTINGS_PRINTER = "printer"
    const GTK_PRINT_SETTINGS_ORIENTATION = "orientation"
    const GTK_PRINT_SETTINGS_PAPER_FORMAT = "paper-format"
    const GTK_PRINT_SETTINGS_PAPER_WIDTH = "paper-width"
    const GTK_PRINT_SETTINGS_PAPER_HEIGHT = "paper-height"
    const GTK_PRINT_SETTINGS_N_COPIES = "n-copies"
    const GTK_PRINT_SETTINGS_DEFAULT_SOURCE = "default-source"
    const GTK_PRINT_SETTINGS_QUALITY = "quality"
    const GTK_PRINT_SETTINGS_RESOLUTION = "resolution"
    const GTK_PRINT_SETTINGS_USE_COLOR = "use-color"
    const GTK_PRINT_SETTINGS_DUPLEX = "duplex"
    const GTK_PRINT_SETTINGS_COLLATE = "collate"
    const GTK_PRINT_SETTINGS_REVERSE = "reverse"
    const GTK_PRINT_SETTINGS_MEDIA_TYPE = "media-type"
    const GTK_PRINT_SETTINGS_DITHER = "dither"
    const GTK_PRINT_SETTINGS_SCALE = "scale"
    const GTK_PRINT_SETTINGS_PRINT_PAGES = "print-pages"
    const GTK_PRINT_SETTINGS_PAGE_RANGES = "page-ranges"
    const GTK_PRINT_SETTINGS_PAGE_SET = "page-set"
    const GTK_PRINT_SETTINGS_FINISHINGS = "finishings"
    const GTK_PRINT_SETTINGS_NUMBER_UP = "number-up"
    const GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout"
    const GTK_PRINT_SETTINGS_OUTPUT_BIN = "output-bin"
    const GTK_PRINT_SETTINGS_RESOLUTION_X = "resolution-x"
    const GTK_PRINT_SETTINGS_RESOLUTION_Y = "resolution-y"
    const GTK_PRINT_SETTINGS_PRINTER_LPI = "printer-lpi"
    const GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format"
    const GTK_PRINT_SETTINGS_OUTPUT_URI = "output-uri"
    const GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version"
    const GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra"
    const GTK_STOCK_ABOUT = "gtk-about"
    const GTK_STOCK_ADD = "gtk-add"
    const GTK_STOCK_APPLY = "gtk-apply"
    const GTK_STOCK_BOLD = "gtk-bold"
    const GTK_STOCK_CANCEL = "gtk-cancel"
    const GTK_STOCK_CAPS_LOCK_WARNING = "gtk-caps-lock-warning"
    const GTK_STOCK_CDROM = "gtk-cdrom"
    const GTK_STOCK_CLEAR = "gtk-clear"
    const GTK_STOCK_CLOSE = "gtk-close"
    const GTK_STOCK_COLOR_PICKER = "gtk-color-picker"
    const GTK_STOCK_CONNECT = "gtk-connect"
    const GTK_STOCK_CONVERT = "gtk-convert"
    const GTK_STOCK_COPY = "gtk-copy"
    const GTK_STOCK_CUT = "gtk-cut"
    const GTK_STOCK_DELETE = "gtk-delete"
    const GTK_STOCK_DIALOG_AUTHENTICATION = "gtk-dialog-authentication"
    const GTK_STOCK_DIALOG_INFO = "gtk-dialog-info"
    const GTK_STOCK_DIALOG_WARNING = "gtk-dialog-warning"
    const GTK_STOCK_DIALOG_ERROR = "gtk-dialog-error"
    const GTK_STOCK_DIALOG_QUESTION = "gtk-dialog-question"
    const GTK_STOCK_DIRECTORY = "gtk-directory"
    const GTK_STOCK_DISCARD = "gtk-discard"
    const GTK_STOCK_DISCONNECT = "gtk-disconnect"
    const GTK_STOCK_DND = "gtk-dnd"
    const GTK_STOCK_DND_MULTIPLE = "gtk-dnd-multiple"
    const GTK_STOCK_EDIT = "gtk-edit"
    const GTK_STOCK_EXECUTE = "gtk-execute"
    const GTK_STOCK_FILE = "gtk-file"
    const GTK_STOCK_FIND = "gtk-find"
    const GTK_STOCK_FIND_AND_REPLACE = "gtk-find-and-replace"
    const GTK_STOCK_FLOPPY = "gtk-floppy"
    const GTK_STOCK_FULLSCREEN = "gtk-fullscreen"
    const GTK_STOCK_GOTO_BOTTOM = "gtk-goto-bottom"
    const GTK_STOCK_GOTO_FIRST = "gtk-goto-first"
    const GTK_STOCK_GOTO_LAST = "gtk-goto-last"
    const GTK_STOCK_GOTO_TOP = "gtk-goto-top"
    const GTK_STOCK_GO_BACK = "gtk-go-back"
    const GTK_STOCK_GO_DOWN = "gtk-go-down"
    const GTK_STOCK_GO_FORWARD = "gtk-go-forward"
    const GTK_STOCK_GO_UP = "gtk-go-up"
    const GTK_STOCK_HARDDISK = "gtk-harddisk"
    const GTK_STOCK_HELP = "gtk-help"
    const GTK_STOCK_HOME = "gtk-home"
    const GTK_STOCK_INDEX = "gtk-index"
    const GTK_STOCK_INDENT = "gtk-indent"
    const GTK_STOCK_INFO = "gtk-info"
    const GTK_STOCK_ITALIC = "gtk-italic"
    const GTK_STOCK_JUMP_TO = "gtk-jump-to"
    const GTK_STOCK_JUSTIFY_CENTER = "gtk-justify-center"
    const GTK_STOCK_JUSTIFY_FILL = "gtk-justify-fill"
    const GTK_STOCK_JUSTIFY_LEFT = "gtk-justify-left"
    const GTK_STOCK_JUSTIFY_RIGHT = "gtk-justify-right"
    const GTK_STOCK_LEAVE_FULLSCREEN = "gtk-leave-fullscreen"
    const GTK_STOCK_MISSING_IMAGE = "gtk-missing-image"
    const GTK_STOCK_MEDIA_FORWARD = "gtk-media-forward"
    const GTK_STOCK_MEDIA_NEXT = "gtk-media-next"
    const GTK_STOCK_MEDIA_PAUSE = "gtk-media-pause"
    const GTK_STOCK_MEDIA_PLAY = "gtk-media-play"
    const GTK_STOCK_MEDIA_PREVIOUS = "gtk-media-previous"
    const GTK_STOCK_MEDIA_RECORD = "gtk-media-record"
    const GTK_STOCK_MEDIA_REWIND = "gtk-media-rewind"
    const GTK_STOCK_MEDIA_STOP = "gtk-media-stop"
    const GTK_STOCK_NETWORK = "gtk-network"
    const GTK_STOCK_NEW = "gtk-new"
    const GTK_STOCK_NO = "gtk-no"
    const GTK_STOCK_OK = "gtk-ok"
    const GTK_STOCK_OPEN = "gtk-open"
    const GTK_STOCK_ORIENTATION_PORTRAIT = "gtk-orientation-portrait"
    const GTK_STOCK_ORIENTATION_LANDSCAPE = "gtk-orientation-landscape"
    const GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE = "gtk-orientation-reverse-landscape"
    const GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT = "gtk-orientation-reverse-portrait"
    const GTK_STOCK_PAGE_SETUP = "gtk-page-setup"
    const GTK_STOCK_PASTE = "gtk-paste"
    const GTK_STOCK_PREFERENCES = "gtk-preferences"
    const GTK_STOCK_PRINT = "gtk-print"
    const GTK_STOCK_PRINT_ERROR = "gtk-print-error"
    const GTK_STOCK_PRINT_PAUSED = "gtk-print-paused"
    const GTK_STOCK_PRINT_PREVIEW = "gtk-print-preview"
    const GTK_STOCK_PRINT_REPORT = "gtk-print-report"
    const GTK_STOCK_PRINT_WARNING = "gtk-print-warning"
    const GTK_STOCK_PROPERTIES = "gtk-properties"
    const GTK_STOCK_QUIT = "gtk-quit"
    const GTK_STOCK_REDO = "gtk-redo"
    const GTK_STOCK_REFRESH = "gtk-refresh"
    const GTK_STOCK_REMOVE = "gtk-remove"
    const GTK_STOCK_REVERT_TO_SAVED = "gtk-revert-to-saved"
    const GTK_STOCK_SAVE = "gtk-save"
    const GTK_STOCK_SAVE_AS = "gtk-save-as"
    const GTK_STOCK_SELECT_ALL = "gtk-select-all"
    const GTK_STOCK_SELECT_COLOR = "gtk-select-color"
    const GTK_STOCK_SELECT_FONT = "gtk-select-font"
    const GTK_STOCK_SORT_ASCENDING = "gtk-sort-ascending"
    const GTK_STOCK_SORT_DESCENDING = "gtk-sort-descending"
    const GTK_STOCK_SPELL_CHECK = "gtk-spell-check"
    const GTK_STOCK_STOP = "gtk-stop"
    const GTK_STOCK_STRIKETHROUGH = "gtk-strikethrough"
    const GTK_STOCK_UNDELETE = "gtk-undelete"
    const GTK_STOCK_UNDERLINE = "gtk-underline"
    const GTK_STOCK_UNDO = "gtk-undo"
    const GTK_STOCK_UNINDENT = "gtk-unindent"
    const GTK_STOCK_YES = "gtk-yes"
    const GTK_STOCK_ZOOM_FIT = "gtk-zoom-fit"
    const GTK_STOCK_ZOOM_IN = "gtk-zoom-in"
    const GTK_STOCK_ZOOM_OUT = "gtk-zoom-out"
end)))))
end
