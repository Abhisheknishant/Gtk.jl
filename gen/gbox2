quote
$(Expr(:toplevel, :($(Expr(:module, true, :GAccessor, quote 
        $(Expr(:import, :., :., :Gtk))
        $(Expr(:import, :., :., :Gtk, :GObject))
        function property(object::Gtk.GObjectI,property_name,value)
            $(Expr(:ccall, :(:g_object_set_property,Gtk.libgobject), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Void}), :object, :property_name, :value))
            return object
        end
        function property(object::Gtk.GObjectI,property_name,value)
            return $(Expr(:ccall, :(:g_object_get_property,Gtk.libgobject), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Void}), :object, :property_name, :value))
        end
        function qdata(object::Gtk.GObjectI,quark)
            return $(Expr(:ccall, :(:g_object_get_qdata,Gtk.libgobject), :(Ptr{Void}), :(Ptr{Gtk.GObject},Uint32), :object, :quark))
        end
        function qdata(object::Gtk.GObjectI,quark,data)
            $(Expr(:ccall, :(:g_object_set_qdata,Gtk.libgobject), :Void, :(Ptr{Gtk.GObject},Uint32,Ptr{Void}), :object, :quark, :data))
            return object
        end
        function qdata_full(object::Gtk.GObjectI,quark,data,destroy)
            $(Expr(:ccall, :(:g_object_set_qdata_full,Gtk.libgobject), :Void, :(Ptr{Gtk.GObject},Uint32,Ptr{Void},Ptr{Void}), :object, :quark, :data, :destroy))
            return object
        end
        function data(object::Gtk.GObjectI,key)
            return $(Expr(:ccall, :(:g_object_get_data,Gtk.libgobject), :(Ptr{Void}), :(Ptr{Gtk.GObject},Ptr{Uint8}), :object, :key))
        end
        function data(object::Gtk.GObjectI,key,data_)
            $(Expr(:ccall, :(:g_object_set_data,Gtk.libgobject), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Void}), :object, :key, :data_))
            return object
        end
        function data_full(object::Gtk.GObjectI,key,data,destroy)
            $(Expr(:ccall, :(:g_object_set_data_full,Gtk.libgobject), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Void},Ptr{Void}), :object, :key, :data, :destroy))
            return object
        end
        function show_events(show_events_::Bool)
            $(Expr(:ccall, :(:gdk_set_show_events,Gtk.libgdk), :Void, :(Cint,), :show_events_))
            return show_events_
        end
        function verbose(verbose_::Bool)
            $(Expr(:ccall, :(:gdk_rgb_set_verbose,Gtk.libgdk), :Void, :(Cint,), :verbose_))
            return verbose_
        end
        function install(install_::Bool)
            $(Expr(:ccall, :(:gdk_rgb_set_install,Gtk.libgdk), :Void, :(Cint,), :install_))
            return install_
        end
        function colorspace(pixbuf::Gtk.GdkPixbufI)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_colorspace,Gtk.libgdk_pixbuf), :Cint, :(Ptr{Gtk.GObject},), :pixbuf))
        end
        function n_channels(pixbuf::Gtk.GdkPixbufI)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_n_channels,Gtk.libgdk_pixbuf), :Cint, :(Ptr{Gtk.GObject},), :pixbuf))
        end
        function has_alpha(pixbuf::Gtk.GdkPixbufI)
            return convert(Bool,$(Expr(:ccall, :(:gdk_pixbuf_get_has_alpha,Gtk.libgdk_pixbuf), :Cint, :(Ptr{Gtk.GObject},), :pixbuf)))
        end
        function bits_per_sample(pixbuf::Gtk.GdkPixbufI)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_bits_per_sample,Gtk.libgdk_pixbuf), :Cint, :(Ptr{Gtk.GObject},), :pixbuf))
        end
        function pixels(pixbuf::Gtk.GdkPixbufI)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_pixels,Gtk.libgdk_pixbuf), :(Ptr{Cuchar}), :(Ptr{Gtk.GObject},), :pixbuf))
        end
        function width(pixbuf::Gtk.GdkPixbufI)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_width,Gtk.libgdk_pixbuf), :Cint, :(Ptr{Gtk.GObject},), :pixbuf))
        end
        function height(pixbuf::Gtk.GdkPixbufI)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_height,Gtk.libgdk_pixbuf), :Cint, :(Ptr{Gtk.GObject},), :pixbuf))
        end
        function rowstride(pixbuf::Gtk.GdkPixbufI)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_rowstride,Gtk.libgdk_pixbuf), :Cint, :(Ptr{Gtk.GObject},), :pixbuf))
        end
        function byte_length(pixbuf::Gtk.GdkPixbufI)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_byte_length,Gtk.libgdk_pixbuf), :Culong, :(Ptr{Gtk.GObject},), :pixbuf))
        end
        function pixels_with_length(pixbuf::Gtk.GdkPixbufI)
            length = Gtk.mutable(Uint32)
            return ($(Expr(:ccall, :(:gdk_pixbuf_get_pixels_with_length,Gtk.libgdk_pixbuf), :(Ptr{Cuchar}), :(Ptr{Gtk.GObject},Ptr{Uint32}), :pixbuf, :length)),length[])
        end
        function option(pixbuf::Gtk.GdkPixbufI,key)
            return $(Expr(:ccall, :(:gdk_pixbuf_get_option,Gtk.libgdk_pixbuf), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Ptr{Uint8}), :pixbuf, :key))
        end
        function from_drawable(dest::Gtk.GdkPixbufI,src,cmap,src_x,src_y,dest_x,dest_y,width,height)
            return convert(Gtk.GdkPixbufI,$(Expr(:ccall, :(:gdk_pixbuf_get_from_drawable,Gtk.libgdk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Cint,Cint,Cint,Cint,Cint,Cint), :dest, :src, :cmap, :src_x, :src_y, :dest_x, :dest_y, :width, :height)))
        end
        function from_image(dest::Gtk.GdkPixbufI,src,cmap,src_x,src_y,dest_x,dest_y,width,height)
            return convert(Gtk.GdkPixbufI,$(Expr(:ccall, :(:gdk_pixbuf_get_from_image,Gtk.libgdk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Cint,Cint,Cint,Cint,Cint,Cint), :dest, :src, :cmap, :src_x, :src_y, :dest_x, :dest_y, :width, :height)))
        end
        function debug_updates(setting::Bool)
            $(Expr(:ccall, :(:gdk_window_set_debug_updates,Gtk.libgdk), :Void, :(Cint,), :setting))
            return setting
        end
        function use_xshm(use_xshm_::Bool)
            $(Expr(:ccall, :(:gdk_set_use_xshm,Gtk.libgdk), :Void, :(Cint,), :use_xshm_))
            return use_xshm_
        end
        function value(adjustment::Gtk.GtkAdjustmentI)
            return $(Expr(:ccall, :(:gtk_adjustment_get_value,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :adjustment))
        end
        function value(adjustment::Gtk.GtkAdjustmentI,value_)
            $(Expr(:ccall, :(:gtk_adjustment_set_value,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :adjustment, :value_))
            return adjustment
        end
        function lower(adjustment::Gtk.GtkAdjustmentI)
            return $(Expr(:ccall, :(:gtk_adjustment_get_lower,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :adjustment))
        end
        function lower(adjustment::Gtk.GtkAdjustmentI,lower_)
            $(Expr(:ccall, :(:gtk_adjustment_set_lower,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :adjustment, :lower_))
            return adjustment
        end
        function upper(adjustment::Gtk.GtkAdjustmentI)
            return $(Expr(:ccall, :(:gtk_adjustment_get_upper,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :adjustment))
        end
        function upper(adjustment::Gtk.GtkAdjustmentI,upper_)
            $(Expr(:ccall, :(:gtk_adjustment_set_upper,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :adjustment, :upper_))
            return adjustment
        end
        function step_increment(adjustment::Gtk.GtkAdjustmentI)
            return $(Expr(:ccall, :(:gtk_adjustment_get_step_increment,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :adjustment))
        end
        function step_increment(adjustment::Gtk.GtkAdjustmentI,step_increment_)
            $(Expr(:ccall, :(:gtk_adjustment_set_step_increment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :adjustment, :step_increment_))
            return adjustment
        end
        function page_increment(adjustment::Gtk.GtkAdjustmentI)
            return $(Expr(:ccall, :(:gtk_adjustment_get_page_increment,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :adjustment))
        end
        function page_increment(adjustment::Gtk.GtkAdjustmentI,page_increment_)
            $(Expr(:ccall, :(:gtk_adjustment_set_page_increment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :adjustment, :page_increment_))
            return adjustment
        end
        function page_size(adjustment::Gtk.GtkAdjustmentI)
            return $(Expr(:ccall, :(:gtk_adjustment_get_page_size,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :adjustment))
        end
        function page_size(adjustment::Gtk.GtkAdjustmentI,page_size_)
            $(Expr(:ccall, :(:gtk_adjustment_set_page_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :adjustment, :page_size_))
            return adjustment
        end
        function style(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_rc_get_style,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function no_show_all(widget::Gtk.GtkWidgetI,no_show_all_)
            $(Expr(:ccall, :(:gtk_widget_set_no_show_all,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :no_show_all_))
            return widget
        end
        function no_show_all(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_no_show_all,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function child_requisition(widget::Gtk.GtkWidgetI,requisition)
            return $(Expr(:ccall, :(:gtk_widget_get_child_requisition,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :requisition))
        end
        function accel_path(widget::Gtk.GtkWidgetI,accel_path_,accel_group)
            $(Expr(:ccall, :(:gtk_widget_set_accel_path,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Void}), :widget, :accel_path_, :accel_group))
            return widget
        end
        function scroll_adjustments(widget::Gtk.GtkWidgetI,hadjustment,vadjustment)
            $(Expr(:ccall, :(:gtk_widget_set_scroll_adjustments,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :widget, :hadjustment, :vadjustment))
            return widget
        end
        function can_focus(widget::Gtk.GtkWidgetI,can_focus_)
            $(Expr(:ccall, :(:gtk_widget_set_can_focus,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :can_focus_))
            return widget
        end
        function can_focus(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_can_focus,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function can_default(widget::Gtk.GtkWidgetI,can_default_)
            $(Expr(:ccall, :(:gtk_widget_set_can_default,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :can_default_))
            return widget
        end
        function can_default(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_can_default,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function receives_default(widget::Gtk.GtkWidgetI,receives_default_)
            $(Expr(:ccall, :(:gtk_widget_set_receives_default,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :receives_default_))
            return widget
        end
        function receives_default(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_receives_default,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function name(widget::Gtk.GtkWidgetI,name_)
            $(Expr(:ccall, :(:gtk_widget_set_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :widget, :name_))
            return widget
        end
        function name(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_name,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :widget))
        end
        function state(widget::Gtk.GtkWidgetI,state_)
            $(Expr(:ccall, :(:gtk_widget_set_state,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :state_))
            return widget
        end
        function state(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_state,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget))
        end
        function sensitive(widget::Gtk.GtkWidgetI,sensitive_)
            $(Expr(:ccall, :(:gtk_widget_set_sensitive,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :sensitive_))
            return widget
        end
        function sensitive(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_sensitive,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function visible(widget::Gtk.GtkWidgetI,visible_)
            $(Expr(:ccall, :(:gtk_widget_set_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :visible_))
            return widget
        end
        function visible(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function has_window(widget::Gtk.GtkWidgetI,has_window_)
            $(Expr(:ccall, :(:gtk_widget_set_has_window,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :has_window_))
            return widget
        end
        function has_window(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_has_window,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function realized(widget::Gtk.GtkWidgetI,realized_)
            $(Expr(:ccall, :(:gtk_widget_set_realized,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :realized_))
            return widget
        end
        function realized(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_realized,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function mapped(widget::Gtk.GtkWidgetI,mapped_)
            $(Expr(:ccall, :(:gtk_widget_set_mapped,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :mapped_))
            return widget
        end
        function mapped(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_mapped,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function app_paintable(widget::Gtk.GtkWidgetI,app_paintable_)
            $(Expr(:ccall, :(:gtk_widget_set_app_paintable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :app_paintable_))
            return widget
        end
        function app_paintable(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_app_paintable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function double_buffered(widget::Gtk.GtkWidgetI,double_buffered_)
            $(Expr(:ccall, :(:gtk_widget_set_double_buffered,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :double_buffered_))
            return widget
        end
        function double_buffered(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_double_buffered,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function redraw_on_allocate(widget::Gtk.GtkWidgetI,redraw_on_allocate_)
            $(Expr(:ccall, :(:gtk_widget_set_redraw_on_allocate,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :redraw_on_allocate_))
            return widget
        end
        function parent(widget::Gtk.GtkWidgetI,parent_)
            $(Expr(:ccall, :(:gtk_widget_set_parent,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :widget, :parent_))
            return widget
        end
        function parent(widget::Gtk.GtkWidgetI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_widget_get_parent,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :widget)))
        end
        function parent_window(widget::Gtk.GtkWidgetI,parent_window_)
            $(Expr(:ccall, :(:gtk_widget_set_parent_window,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :parent_window_))
            return widget
        end
        function parent_window(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_parent_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function child_visible(widget::Gtk.GtkWidgetI,is_visible)
            $(Expr(:ccall, :(:gtk_widget_set_child_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :is_visible))
            return widget
        end
        function child_visible(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_child_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function window(widget::Gtk.GtkWidgetI,window_)
            $(Expr(:ccall, :(:gtk_widget_set_window,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :window_))
            return widget
        end
        function window(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function allocation(widget::Gtk.GtkWidgetI)
            allocation_ = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_widget_get_allocation,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle}), :widget, :allocation_))
            return allocation_[]
        end
        function allocation(widget::Gtk.GtkWidgetI,allocation_)
            $(Expr(:ccall, :(:gtk_widget_set_allocation,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle}), :widget, :allocation_))
            return widget
        end
        function requisition(widget::Gtk.GtkWidgetI,requisition_)
            return $(Expr(:ccall, :(:gtk_widget_get_requisition,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :requisition_))
        end
        function size_request(widget::Gtk.GtkWidgetI,width,height)
            $(Expr(:ccall, :(:gtk_widget_set_size_request,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :widget, :width, :height))
            return widget
        end
        function size_request(widget::Gtk.GtkWidgetI)
            height = Gtk.mutable(Cint)
            width = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_widget_get_size_request,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :widget, :width, :height))
            return (width[],height[])
        end
        function uposition(widget::Gtk.GtkWidgetI,x,y)
            $(Expr(:ccall, :(:gtk_widget_set_uposition,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :widget, :x, :y))
            return widget
        end
        function usize(widget::Gtk.GtkWidgetI,width,height)
            $(Expr(:ccall, :(:gtk_widget_set_usize,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :widget, :width, :height))
            return widget
        end
        function events(widget::Gtk.GtkWidgetI,events_)
            $(Expr(:ccall, :(:gtk_widget_set_events,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :events_))
            return widget
        end
        function extension_events(widget::Gtk.GtkWidgetI,mode)
            $(Expr(:ccall, :(:gtk_widget_set_extension_events,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :mode))
            return widget
        end
        function extension_events(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_extension_events,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget))
        end
        function toplevel(widget::Gtk.GtkWidgetI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_widget_get_toplevel,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :widget)))
        end
        function ancestor(widget::Gtk.GtkWidgetI,widget_type)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_widget_get_ancestor,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Culong), :widget, :widget_type)))
        end
        function colormap(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_colormap,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function visual(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_visual,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function screen(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_screen,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function display(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_display,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function root_window(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_root_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function settings(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_settings,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function clipboard(widget::Gtk.GtkWidgetI,selection)
            return $(Expr(:ccall, :(:gtk_widget_get_clipboard,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :selection))
        end
        function snapshot(widget::Gtk.GtkWidgetI)
            clip_rect = Gtk.mutable(Gtk.GdkRectangle)
            return ($(Expr(:ccall, :(:gtk_widget_get_snapshot,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle}), :widget, :clip_rect)),clip_rect[])
        end
        function accessible(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_accessible,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function colormap(widget::Gtk.GtkWidgetI,colormap_)
            $(Expr(:ccall, :(:gtk_widget_set_colormap,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :colormap_))
            return widget
        end
        function events(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_events,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget))
        end
        function pointer(widget::Gtk.GtkWidgetI)
            y = Gtk.mutable(Cint)
            x = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_widget_get_pointer,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :widget, :x, :y))
            return (x[],y[])
        end
        function style(widget::Gtk.GtkWidgetI,style_)
            $(Expr(:ccall, :(:gtk_widget_set_style,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :style_))
            return widget
        end
        function style(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_style,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function modifier_style(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_modifier_style,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function pango_context(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_pango_context,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function composite_name(widget::Gtk.GtkWidgetI,name)
            $(Expr(:ccall, :(:gtk_widget_set_composite_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :widget, :name))
            return widget
        end
        function composite_name(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_composite_name,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :widget))
        end
        function property(widget::Gtk.GtkWidgetI,property_name,value)
            return $(Expr(:ccall, :(:gtk_widget_style_get_property,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Void}), :widget, :property_name, :value))
        end
        function direction(widget::Gtk.GtkWidgetI,dir)
            $(Expr(:ccall, :(:gtk_widget_set_direction,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :dir))
            return widget
        end
        function direction(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_direction,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget))
        end
        function tooltip_window(widget::Gtk.GtkWidgetI,custom_window)
            $(Expr(:ccall, :(:gtk_widget_set_tooltip_window,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :widget, :custom_window))
            return widget
        end
        function tooltip_window(widget::Gtk.GtkWidgetI)
            return convert(Gtk.GtkWindowI,$(Expr(:ccall, :(:gtk_widget_get_tooltip_window,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :widget)))
        end
        function tooltip_text(widget::Gtk.GtkWidgetI,text)
            $(Expr(:ccall, :(:gtk_widget_set_tooltip_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :widget, :text))
            return widget
        end
        function tooltip_text(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_tooltip_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :widget))
        end
        function tooltip_markup(widget::Gtk.GtkWidgetI,markup)
            $(Expr(:ccall, :(:gtk_widget_set_tooltip_markup,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :widget, :markup))
            return widget
        end
        function tooltip_markup(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_tooltip_markup,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :widget))
        end
        function has_tooltip(widget::Gtk.GtkWidgetI,has_tooltip_)
            $(Expr(:ccall, :(:gtk_widget_set_has_tooltip,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :has_tooltip_))
            return widget
        end
        function has_tooltip(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_widget_get_has_tooltip,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function border_width(container::Gtk.GtkContainerI,border_width_)
            $(Expr(:ccall, :(:gtk_container_set_border_width,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :container, :border_width_))
            return container
        end
        function border_width(container::Gtk.GtkContainerI)
            return $(Expr(:ccall, :(:gtk_container_get_border_width,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},), :container))
        end
        function resize_mode(container::Gtk.GtkContainerI,resize_mode_)
            $(Expr(:ccall, :(:gtk_container_set_resize_mode,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :container, :resize_mode_))
            return container
        end
        function resize_mode(container::Gtk.GtkContainerI)
            return $(Expr(:ccall, :(:gtk_container_get_resize_mode,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :container))
        end
        function children(container::Gtk.GtkContainerI)
            return $(Expr(:ccall, :(:gtk_container_get_children,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :container))
        end
        function focus_chain(container::Gtk.GtkContainerI,focusable_widgets)
            $(Expr(:ccall, :(:gtk_container_set_focus_chain,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :container, :focusable_widgets))
            return container
        end
        function focus_chain(container::Gtk.GtkContainerI)
            focusable_widgets = Gtk.mutable(Ptr{Void})
            return (convert(Bool,$(Expr(:ccall, :(:gtk_container_get_focus_chain,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}}), :container, :focusable_widgets))),focusable_widgets[])
        end
        function reallocate_redraws(container::Gtk.GtkContainerI,needs_redraws)
            $(Expr(:ccall, :(:gtk_container_set_reallocate_redraws,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :container, :needs_redraws))
            return container
        end
        function focus_child(container::Gtk.GtkContainerI,child)
            $(Expr(:ccall, :(:gtk_container_set_focus_child,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :container, :child))
            return container
        end
        function focus_child(container::Gtk.GtkContainerI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_container_get_focus_child,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :container)))
        end
        function focus_vadjustment(container::Gtk.GtkContainerI,adjustment)
            $(Expr(:ccall, :(:gtk_container_set_focus_vadjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :container, :adjustment))
            return container
        end
        function focus_vadjustment(container::Gtk.GtkContainerI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_container_get_focus_vadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :container)))
        end
        function focus_hadjustment(container::Gtk.GtkContainerI,adjustment)
            $(Expr(:ccall, :(:gtk_container_set_focus_hadjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :container, :adjustment))
            return container
        end
        function focus_hadjustment(container::Gtk.GtkContainerI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_container_get_focus_hadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :container)))
        end
        function property(container::Gtk.GtkContainerI,child,property_name,value)
            $(Expr(:ccall, :(:gtk_container_child_set_property,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Void}), :container, :child, :property_name, :value))
            return container
        end
        function property(container::Gtk.GtkContainerI,child,property_name,value)
            return $(Expr(:ccall, :(:gtk_container_child_get_property,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Void}), :container, :child, :property_name, :value))
        end
        function child(bin::Gtk.GtkBinI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_bin_get_child,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :bin)))
        end
        function title(window::Gtk.GtkWindowI,title_)
            $(Expr(:ccall, :(:gtk_window_set_title,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :window, :title_))
            return window
        end
        function title(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_title,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :window))
        end
        function wmclass(window::Gtk.GtkWindowI,wmclass_name,wmclass_class)
            $(Expr(:ccall, :(:gtk_window_set_wmclass,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Uint8}), :window, :wmclass_name, :wmclass_class))
            return window
        end
        function role(window::Gtk.GtkWindowI,role_)
            $(Expr(:ccall, :(:gtk_window_set_role,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :window, :role_))
            return window
        end
        function startup_id(window::Gtk.GtkWindowI,startup_id_)
            $(Expr(:ccall, :(:gtk_window_set_startup_id,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :window, :startup_id_))
            return window
        end
        function role(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_role,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :window))
        end
        function position(window::Gtk.GtkWindowI,position_)
            $(Expr(:ccall, :(:gtk_window_set_position,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :position_))
            return window
        end
        function focus(window::Gtk.GtkWindowI,focus_)
            $(Expr(:ccall, :(:gtk_window_set_focus,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :window, :focus_))
            return window
        end
        function focus(window::Gtk.GtkWindowI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_window_get_focus,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :window)))
        end
        function default(window::Gtk.GtkWindowI,default_widget)
            $(Expr(:ccall, :(:gtk_window_set_default,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :window, :default_widget))
            return window
        end
        function default_widget(window::Gtk.GtkWindowI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_window_get_default_widget,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :window)))
        end
        function transient_for(window::Gtk.GtkWindowI,parent)
            $(Expr(:ccall, :(:gtk_window_set_transient_for,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :window, :parent))
            return window
        end
        function transient_for(window::Gtk.GtkWindowI)
            return convert(Gtk.GtkWindowI,$(Expr(:ccall, :(:gtk_window_get_transient_for,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :window)))
        end
        function opacity(window::Gtk.GtkWindowI,opacity_)
            $(Expr(:ccall, :(:gtk_window_set_opacity,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :window, :opacity_))
            return window
        end
        function opacity(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_opacity,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :window))
        end
        function type_hint(window::Gtk.GtkWindowI,hint)
            $(Expr(:ccall, :(:gtk_window_set_type_hint,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :hint))
            return window
        end
        function type_hint(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_type_hint,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window))
        end
        function skip_taskbar_hint(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_skip_taskbar_hint,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function skip_taskbar_hint(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_skip_taskbar_hint,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function skip_pager_hint(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_skip_pager_hint,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function skip_pager_hint(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_skip_pager_hint,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function urgency_hint(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_urgency_hint,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function urgency_hint(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_urgency_hint,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function accept_focus(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_accept_focus,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function accept_focus(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_accept_focus,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function focus_on_map(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_focus_on_map,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function focus_on_map(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_focus_on_map,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function destroy_with_parent(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_destroy_with_parent,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function destroy_with_parent(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_destroy_with_parent,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function mnemonics_visible(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_mnemonics_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function mnemonics_visible(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_mnemonics_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function resizable(window::Gtk.GtkWindowI,resizable_)
            $(Expr(:ccall, :(:gtk_window_set_resizable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :resizable_))
            return window
        end
        function resizable(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_resizable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function gravity(window::Gtk.GtkWindowI,gravity_)
            $(Expr(:ccall, :(:gtk_window_set_gravity,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :gravity_))
            return window
        end
        function gravity(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_gravity,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window))
        end
        function geometry_hints(window::Gtk.GtkWindowI,geometry_widget,geometry,geom_mask)
            $(Expr(:ccall, :(:gtk_window_set_geometry_hints,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Void},Cint), :window, :geometry_widget, :geometry, :geom_mask))
            return window
        end
        function screen(window::Gtk.GtkWindowI,screen_)
            $(Expr(:ccall, :(:gtk_window_set_screen,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :window, :screen_))
            return window
        end
        function screen(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_screen,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :window))
        end
        function has_frame(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_has_frame,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function has_frame(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_has_frame,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function frame_dimensions(window::Gtk.GtkWindowI,left,top_,right,bottom)
            $(Expr(:ccall, :(:gtk_window_set_frame_dimensions,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint,Cint,Cint), :window, :left, :top_, :right, :bottom))
            return window
        end
        function frame_dimensions(window::Gtk.GtkWindowI)
            bottom = Gtk.mutable(Cint)
            right = Gtk.mutable(Cint)
            top_ = Gtk.mutable(Cint)
            left = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_window_get_frame_dimensions,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint},Ptr{Cint},Ptr{Cint}), :window, :left, :top_, :right, :bottom))
            return (left[],top_[],right[],bottom[])
        end
        function decorated(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_decorated,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function decorated(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_decorated,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function deletable(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_deletable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function deletable(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_deletable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function icon_list(window::Gtk.GtkWindowI,list)
            $(Expr(:ccall, :(:gtk_window_set_icon_list,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :window, :list))
            return window
        end
        function icon_list(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_icon_list,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :window))
        end
        function icon(window::Gtk.GtkWindowI,icon_)
            $(Expr(:ccall, :(:gtk_window_set_icon,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :window, :icon_))
            return window
        end
        function icon_name(window::Gtk.GtkWindowI,name)
            $(Expr(:ccall, :(:gtk_window_set_icon_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :window, :name))
            return window
        end
        function icon_from_file(window::Gtk.GtkWindowI,filename,err)
            $(Expr(:ccall, :(:gtk_window_set_icon_from_file,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Uint8},Ptr{Ptr{Gtk.GError}}), :window, :filename, :err))
            return window
        end
        function icon(window::Gtk.GtkWindowI)
            return convert(Gtk.GdkPixbufI,$(Expr(:ccall, :(:gtk_window_get_icon,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :window)))
        end
        function icon_name(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_icon_name,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :window))
        end
        function default_icon(icon::Gtk.GdkPixbufI)
            $(Expr(:ccall, :(:gtk_window_set_default_icon,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},), :icon))
            return icon
        end
        function auto_startup_notification(setting::Bool)
            $(Expr(:ccall, :(:gtk_window_set_auto_startup_notification,Gtk.libgtk), :Void, :(Cint,), :setting))
            return setting
        end
        function modal(window::Gtk.GtkWindowI,modal_)
            $(Expr(:ccall, :(:gtk_window_set_modal,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :modal_))
            return window
        end
        function modal(window::Gtk.GtkWindowI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_window_get_modal,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window)))
        end
        function mnemonic_modifier(window::Gtk.GtkWindowI,modifier)
            $(Expr(:ccall, :(:gtk_window_set_mnemonic_modifier,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :modifier))
            return window
        end
        function mnemonic_modifier(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_mnemonic_modifier,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window))
        end
        function keep_above(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_keep_above,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function keep_below(window::Gtk.GtkWindowI,setting)
            $(Expr(:ccall, :(:gtk_window_set_keep_below,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :window, :setting))
            return window
        end
        function policy(window::Gtk.GtkWindowI,allow_shrink,allow_grow,auto_shrink)
            $(Expr(:ccall, :(:gtk_window_set_policy,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint,Cint), :window, :allow_shrink, :allow_grow, :auto_shrink))
            return window
        end
        function default_size(window::Gtk.GtkWindowI,width,height)
            $(Expr(:ccall, :(:gtk_window_set_default_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :window, :width, :height))
            return window
        end
        function default_size(window::Gtk.GtkWindowI)
            height = Gtk.mutable(Cint)
            width = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_window_get_default_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :window, :width, :height))
            return (width[],height[])
        end
        function size(window::Gtk.GtkWindowI)
            height = Gtk.mutable(Cint)
            width = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_window_get_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :window, :width, :height))
            return (width[],height[])
        end
        function position(window::Gtk.GtkWindowI)
            root_y = Gtk.mutable(Cint)
            root_x = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_window_get_position,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :window, :root_x, :root_y))
            return (root_x[],root_y[])
        end
        function group(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_group,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :window))
        end
        function window_type(window::Gtk.GtkWindowI)
            return $(Expr(:ccall, :(:gtk_window_get_window_type,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :window))
        end
        function response_sensitive(dialog::Gtk.GtkDialogI,response_id,setting)
            $(Expr(:ccall, :(:gtk_dialog_set_response_sensitive,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :dialog, :response_id, :setting))
            return dialog
        end
        function default_response(dialog::Gtk.GtkDialogI,response_id)
            $(Expr(:ccall, :(:gtk_dialog_set_default_response,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :dialog, :response_id))
            return dialog
        end
        function widget_for_response(dialog::Gtk.GtkDialogI,response_id)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_dialog_get_widget_for_response,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Cint), :dialog, :response_id)))
        end
        function response_for_widget(dialog::Gtk.GtkDialogI,widget)
            return $(Expr(:ccall, :(:gtk_dialog_get_response_for_widget,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :dialog, :widget))
        end
        function has_separator(dialog::Gtk.GtkDialogI,setting)
            $(Expr(:ccall, :(:gtk_dialog_set_has_separator,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :dialog, :setting))
            return dialog
        end
        function has_separator(dialog::Gtk.GtkDialogI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_dialog_get_has_separator,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :dialog)))
        end
        function alternative_button_order(dialog::Gtk.GtkDialogI,first_response_id)
            $(Expr(:ccall, :(:gtk_dialog_set_alternative_button_order,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :dialog, :first_response_id))
            return dialog
        end
        function alternative_button_order_from_array(dialog::Gtk.GtkDialogI,n_params,new_order)
            $(Expr(:ccall, :(:gtk_dialog_set_alternative_button_order_from_array,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Cint}), :dialog, :n_params, :new_order))
            return dialog
        end
        function action_area(dialog::Gtk.GtkDialogI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_dialog_get_action_area,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :dialog)))
        end
        function content_area(dialog::Gtk.GtkDialogI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_dialog_get_content_area,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :dialog)))
        end
        function for_attach_widget(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_menu_get_for_attach_widget,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function text(label::Gtk.GtkLabelI,str)
            $(Expr(:ccall, :(:gtk_label_set_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :label, :str))
            return label
        end
        function text(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :label))
        end
        function attributes(label::Gtk.GtkLabelI,attrs)
            $(Expr(:ccall, :(:gtk_label_set_attributes,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :label, :attrs))
            return label
        end
        function attributes(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_attributes,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :label))
        end
        function label(label_::Gtk.GtkLabelI,str)
            $(Expr(:ccall, :(:gtk_label_set_label,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :label_, :str))
            return label_
        end
        function label(label_::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_label,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :label_))
        end
        function markup(label::Gtk.GtkLabelI,str)
            $(Expr(:ccall, :(:gtk_label_set_markup,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :label, :str))
            return label
        end
        function use_markup(label::Gtk.GtkLabelI,setting)
            $(Expr(:ccall, :(:gtk_label_set_use_markup,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :setting))
            return label
        end
        function use_markup(label::Gtk.GtkLabelI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_label_get_use_markup,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label)))
        end
        function use_underline(label::Gtk.GtkLabelI,setting)
            $(Expr(:ccall, :(:gtk_label_set_use_underline,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :setting))
            return label
        end
        function use_underline(label::Gtk.GtkLabelI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_label_get_use_underline,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label)))
        end
        function markup_with_mnemonic(label::Gtk.GtkLabelI,str)
            $(Expr(:ccall, :(:gtk_label_set_markup_with_mnemonic,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :label, :str))
            return label
        end
        function mnemonic_keyval(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_mnemonic_keyval,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},), :label))
        end
        function mnemonic_widget(label::Gtk.GtkLabelI,widget)
            $(Expr(:ccall, :(:gtk_label_set_mnemonic_widget,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :label, :widget))
            return label
        end
        function mnemonic_widget(label::Gtk.GtkLabelI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_label_get_mnemonic_widget,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :label)))
        end
        function text_with_mnemonic(label::Gtk.GtkLabelI,str)
            $(Expr(:ccall, :(:gtk_label_set_text_with_mnemonic,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :label, :str))
            return label
        end
        function justify(label::Gtk.GtkLabelI,jtype)
            $(Expr(:ccall, :(:gtk_label_set_justify,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :jtype))
            return label
        end
        function justify(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_justify,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label))
        end
        function ellipsize(label::Gtk.GtkLabelI,mode)
            $(Expr(:ccall, :(:gtk_label_set_ellipsize,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :mode))
            return label
        end
        function ellipsize(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_ellipsize,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label))
        end
        function width_chars(label::Gtk.GtkLabelI,n_chars)
            $(Expr(:ccall, :(:gtk_label_set_width_chars,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :n_chars))
            return label
        end
        function width_chars(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_width_chars,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label))
        end
        function max_width_chars(label::Gtk.GtkLabelI,n_chars)
            $(Expr(:ccall, :(:gtk_label_set_max_width_chars,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :n_chars))
            return label
        end
        function max_width_chars(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_max_width_chars,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label))
        end
        function pattern(label::Gtk.GtkLabelI,pattern_)
            $(Expr(:ccall, :(:gtk_label_set_pattern,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :label, :pattern_))
            return label
        end
        function line_wrap(label::Gtk.GtkLabelI,wrap)
            $(Expr(:ccall, :(:gtk_label_set_line_wrap,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :wrap))
            return label
        end
        function line_wrap(label::Gtk.GtkLabelI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_label_get_line_wrap,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label)))
        end
        function line_wrap_mode(label::Gtk.GtkLabelI,wrap_mode)
            $(Expr(:ccall, :(:gtk_label_set_line_wrap_mode,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :wrap_mode))
            return label
        end
        function line_wrap_mode(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_line_wrap_mode,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label))
        end
        function selectable(label::Gtk.GtkLabelI,setting)
            $(Expr(:ccall, :(:gtk_label_set_selectable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :setting))
            return label
        end
        function selectable(label::Gtk.GtkLabelI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_label_get_selectable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label)))
        end
        function angle(label::Gtk.GtkLabelI,angle_)
            $(Expr(:ccall, :(:gtk_label_set_angle,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :label, :angle_))
            return label
        end
        function angle(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_angle,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :label))
        end
        function selection_bounds(label::Gtk.GtkLabelI)
            end_ = Gtk.mutable(Cint)
            start_ = Gtk.mutable(Cint)
            return (convert(Bool,$(Expr(:ccall, :(:gtk_label_get_selection_bounds,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :label, :start_, :end_))),start_[],end_[])
        end
        function layout(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_layout,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :label))
        end
        function layout_offsets(label::Gtk.GtkLabelI)
            y = Gtk.mutable(Cint)
            x = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_label_get_layout_offsets,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :label, :x, :y))
            return (x[],y[])
        end
        function single_line_mode(label::Gtk.GtkLabelI,single_line_mode_)
            $(Expr(:ccall, :(:gtk_label_set_single_line_mode,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :single_line_mode_))
            return label
        end
        function single_line_mode(label::Gtk.GtkLabelI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_label_get_single_line_mode,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label)))
        end
        function current_uri(label::Gtk.GtkLabelI)
            return $(Expr(:ccall, :(:gtk_label_get_current_uri,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :label))
        end
        function track_visited_links(label::Gtk.GtkLabelI,track_links)
            $(Expr(:ccall, :(:gtk_label_set_track_visited_links,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :label, :track_links))
            return label
        end
        function track_visited_links(label::Gtk.GtkLabelI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_label_get_track_visited_links,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :label)))
        end
        function action(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_widget_get_action,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function padding(alignment::Gtk.GtkAlignmentI,padding_top,padding_bottom,padding_left,padding_right)
            $(Expr(:ccall, :(:gtk_alignment_set_padding,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32,Uint32,Uint32,Uint32), :alignment, :padding_top, :padding_bottom, :padding_left, :padding_right))
            return alignment
        end
        function padding(alignment::Gtk.GtkAlignmentI)
            padding_right = Gtk.mutable(Uint32)
            padding_left = Gtk.mutable(Uint32)
            padding_bottom = Gtk.mutable(Uint32)
            padding_top = Gtk.mutable(Uint32)
            $(Expr(:ccall, :(:gtk_alignment_get_padding,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint32},Ptr{Uint32},Ptr{Uint32},Ptr{Uint32}), :alignment, :padding_top, :padding_bottom, :padding_left, :padding_right))
            return (padding_top[],padding_bottom[],padding_left[],padding_right[])
        end
        function label(frame::Gtk.GtkFrameI,label_)
            $(Expr(:ccall, :(:gtk_frame_set_label,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :frame, :label_))
            return frame
        end
        function label(frame::Gtk.GtkFrameI)
            return $(Expr(:ccall, :(:gtk_frame_get_label,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :frame))
        end
        function label_widget(frame::Gtk.GtkFrameI,label_widget_)
            $(Expr(:ccall, :(:gtk_frame_set_label_widget,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :frame, :label_widget_))
            return frame
        end
        function label_widget(frame::Gtk.GtkFrameI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_frame_get_label_widget,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :frame)))
        end
        function label_align(frame::Gtk.GtkFrameI,xalign,yalign)
            $(Expr(:ccall, :(:gtk_frame_set_label_align,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cfloat,Cfloat), :frame, :xalign, :yalign))
            return frame
        end
        function label_align(frame::Gtk.GtkFrameI)
            yalign = Gtk.mutable(Cfloat)
            xalign = Gtk.mutable(Cfloat)
            $(Expr(:ccall, :(:gtk_frame_get_label_align,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cfloat},Ptr{Cfloat}), :frame, :xalign, :yalign))
            return (xalign[],yalign[])
        end
        function shadow_type(frame::Gtk.GtkFrameI,type_)
            $(Expr(:ccall, :(:gtk_frame_set_shadow_type,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :frame, :type_))
            return frame
        end
        function shadow_type(frame::Gtk.GtkFrameI)
            return $(Expr(:ccall, :(:gtk_frame_get_shadow_type,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :frame))
        end
        function homogeneous(box::Gtk.GtkBoxI,homogeneous_)
            $(Expr(:ccall, :(:gtk_box_set_homogeneous,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :box, :homogeneous_))
            return box
        end
        function homogeneous(box::Gtk.GtkBoxI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_box_get_homogeneous,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :box)))
        end
        function spacing(box::Gtk.GtkBoxI,spacing_)
            $(Expr(:ccall, :(:gtk_box_set_spacing,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :box, :spacing_))
            return box
        end
        function spacing(box::Gtk.GtkBoxI)
            return $(Expr(:ccall, :(:gtk_box_get_spacing,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :box))
        end
        function child_packing(box::Gtk.GtkBoxI,child,expand,fill,padding,pack_type)
            $(Expr(:ccall, :(:gtk_box_set_child_packing,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Cint,Cint,Uint32,Cint), :box, :child, :expand, :fill, :padding, :pack_type))
            return box
        end
        function layout(widget::Gtk.GtkButtonBoxI)
            return $(Expr(:ccall, :(:gtk_button_box_get_layout,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget))
        end
        function layout(widget::Gtk.GtkButtonBoxI,layout_style)
            $(Expr(:ccall, :(:gtk_button_box_set_layout,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :layout_style))
            return widget
        end
        function child_secondary(widget::Gtk.GtkButtonBoxI,child)
            return convert(Bool,$(Expr(:ccall, :(:gtk_button_box_get_child_secondary,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :widget, :child)))
        end
        function child_secondary(widget::Gtk.GtkButtonBoxI,child,is_secondary)
            $(Expr(:ccall, :(:gtk_button_box_set_child_secondary,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Cint), :widget, :child, :is_secondary))
            return widget
        end
        function child_size(widget::Gtk.GtkButtonBoxI,min_width,min_height)
            $(Expr(:ccall, :(:gtk_button_box_set_child_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :widget, :min_width, :min_height))
            return widget
        end
        function child_ipadding(widget::Gtk.GtkButtonBoxI,ipad_x,ipad_y)
            $(Expr(:ccall, :(:gtk_button_box_set_child_ipadding,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :widget, :ipad_x, :ipad_y))
            return widget
        end
        function child_size(widget::Gtk.GtkButtonBoxI)
            min_height = Gtk.mutable(Cint)
            min_width = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_button_box_get_child_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :widget, :min_width, :min_height))
            return (min_width[],min_height[])
        end
        function child_ipadding(widget::Gtk.GtkButtonBoxI)
            ipad_y = Gtk.mutable(Cint)
            ipad_x = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_button_box_get_child_ipadding,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :widget, :ipad_x, :ipad_y))
            return (ipad_x[],ipad_y[])
        end
        function object(builder::Gtk.GtkBuilderI,name)
            return convert(Gtk.GObjectI,$(Expr(:ccall, :(:gtk_builder_get_object,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Ptr{Uint8}), :builder, :name)))
        end
        function objects(builder::Gtk.GtkBuilderI)
            return $(Expr(:ccall, :(:gtk_builder_get_objects,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :builder))
        end
        function translation_domain(builder::Gtk.GtkBuilderI,domain)
            $(Expr(:ccall, :(:gtk_builder_set_translation_domain,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :builder, :domain))
            return builder
        end
        function translation_domain(builder::Gtk.GtkBuilderI)
            return $(Expr(:ccall, :(:gtk_builder_get_translation_domain,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :builder))
        end
        function type_from_name(builder::Gtk.GtkBuilderI)
            type_name = Gtk.mutable(Uint8)
            return ($(Expr(:ccall, :(:gtk_builder_get_type_from_name,Gtk.libgtk), :Culong, :(Ptr{Gtk.GObject},Ptr{Uint8}), :builder, :type_name)),type_name[])
        end
        function from_pixmap(image::Gtk.GtkImageI,pixmap,mask)
            $(Expr(:ccall, :(:gtk_image_set_from_pixmap,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void}), :image, :pixmap, :mask))
            return image
        end
        function from_image(image::Gtk.GtkImageI,gdk_image,mask)
            $(Expr(:ccall, :(:gtk_image_set_from_image,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void}), :image, :gdk_image, :mask))
            return image
        end
        function from_file(image::Gtk.GtkImageI,filename)
            $(Expr(:ccall, :(:gtk_image_set_from_file,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :image, :filename))
            return image
        end
        function from_pixbuf(image::Gtk.GtkImageI,pixbuf)
            $(Expr(:ccall, :(:gtk_image_set_from_pixbuf,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :image, :pixbuf))
            return image
        end
        function from_stock(image::Gtk.GtkImageI,stock_id,size)
            $(Expr(:ccall, :(:gtk_image_set_from_stock,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Cint), :image, :stock_id, :size))
            return image
        end
        function from_icon_set(image::Gtk.GtkImageI,icon_set,size)
            $(Expr(:ccall, :(:gtk_image_set_from_icon_set,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint), :image, :icon_set, :size))
            return image
        end
        function from_animation(image::Gtk.GtkImageI,animation)
            $(Expr(:ccall, :(:gtk_image_set_from_animation,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :image, :animation))
            return image
        end
        function from_icon_name(image::Gtk.GtkImageI,icon_name,size)
            $(Expr(:ccall, :(:gtk_image_set_from_icon_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Cint), :image, :icon_name, :size))
            return image
        end
        function from_gicon(image::Gtk.GtkImageI,icon,size)
            $(Expr(:ccall, :(:gtk_image_set_from_gicon,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint), :image, :icon, :size))
            return image
        end
        function pixel_size(image::Gtk.GtkImageI,pixel_size_)
            $(Expr(:ccall, :(:gtk_image_set_pixel_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :image, :pixel_size_))
            return image
        end
        function storage_type(image::Gtk.GtkImageI)
            return $(Expr(:ccall, :(:gtk_image_get_storage_type,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :image))
        end
        function pixmap(image::Gtk.GtkImageI)
            mask = Gtk.mutable(Ptr{Void})
            pixmap_ = Gtk.mutable(Ptr{Void})
            $(Expr(:ccall, :(:gtk_image_get_pixmap,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Ptr{Void}}), :image, :pixmap_, :mask))
            return (pixmap_[],mask[])
        end
        function image(image_::Gtk.GtkImageI)
            mask = Gtk.mutable(Ptr{Void})
            gdk_image = Gtk.mutable(Ptr{Void})
            $(Expr(:ccall, :(:gtk_image_get_image,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Ptr{Void}}), :image_, :gdk_image, :mask))
            return (gdk_image[],mask[])
        end
        function pixbuf(image::Gtk.GtkImageI)
            return convert(Gtk.GdkPixbufI,$(Expr(:ccall, :(:gtk_image_get_pixbuf,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :image)))
        end
        function stock(image::Gtk.GtkImageI)
            size = Gtk.mutable(Cint)
            stock_id = Gtk.mutable(Ptr{Uint8})
            $(Expr(:ccall, :(:gtk_image_get_stock,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Ptr{Uint8}},Ptr{Cint}), :image, :stock_id, :size))
            return (stock_id[],size[])
        end
        function icon_set(image::Gtk.GtkImageI)
            size = Gtk.mutable(Cint)
            icon_set_ = Gtk.mutable(Ptr{Void})
            $(Expr(:ccall, :(:gtk_image_get_icon_set,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Cint}), :image, :icon_set_, :size))
            return (icon_set_[],size[])
        end
        function animation(image::Gtk.GtkImageI)
            return $(Expr(:ccall, :(:gtk_image_get_animation,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :image))
        end
        function icon_name(image::Gtk.GtkImageI)
            size = Gtk.mutable(Cint)
            icon_name_ = Gtk.mutable(Ptr{Uint8})
            $(Expr(:ccall, :(:gtk_image_get_icon_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Ptr{Uint8}},Ptr{Cint}), :image, :icon_name_, :size))
            return (icon_name_[],size[])
        end
        function gicon(image::Gtk.GtkImageI)
            size = Gtk.mutable(Cint)
            gicon_ = Gtk.mutable(Ptr{Void})
            $(Expr(:ccall, :(:gtk_image_get_gicon,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Cint}), :image, :gicon_, :size))
            return (gicon_[],size[])
        end
        function pixel_size(image::Gtk.GtkImageI)
            return $(Expr(:ccall, :(:gtk_image_get_pixel_size,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :image))
        end
        function relief(button::Gtk.GtkButtonI,newstyle)
            $(Expr(:ccall, :(:gtk_button_set_relief,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :button, :newstyle))
            return button
        end
        function relief(button::Gtk.GtkButtonI)
            return $(Expr(:ccall, :(:gtk_button_get_relief,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :button))
        end
        function label(button::Gtk.GtkButtonI,label_)
            $(Expr(:ccall, :(:gtk_button_set_label,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :button, :label_))
            return button
        end
        function label(button::Gtk.GtkButtonI)
            return $(Expr(:ccall, :(:gtk_button_get_label,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :button))
        end
        function use_underline(button::Gtk.GtkButtonI,use_underline_)
            $(Expr(:ccall, :(:gtk_button_set_use_underline,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :button, :use_underline_))
            return button
        end
        function use_underline(button::Gtk.GtkButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_button_get_use_underline,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :button)))
        end
        function use_stock(button::Gtk.GtkButtonI,use_stock_)
            $(Expr(:ccall, :(:gtk_button_set_use_stock,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :button, :use_stock_))
            return button
        end
        function use_stock(button::Gtk.GtkButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_button_get_use_stock,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :button)))
        end
        function focus_on_click(button::Gtk.GtkButtonI,focus_on_click_)
            $(Expr(:ccall, :(:gtk_button_set_focus_on_click,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :button, :focus_on_click_))
            return button
        end
        function focus_on_click(button::Gtk.GtkButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_button_get_focus_on_click,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :button)))
        end
        function alignment(button::Gtk.GtkButtonI,xalign,yalign)
            $(Expr(:ccall, :(:gtk_button_set_alignment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cfloat,Cfloat), :button, :xalign, :yalign))
            return button
        end
        function alignment(button::Gtk.GtkButtonI)
            yalign = Gtk.mutable(Cfloat)
            xalign = Gtk.mutable(Cfloat)
            $(Expr(:ccall, :(:gtk_button_get_alignment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cfloat},Ptr{Cfloat}), :button, :xalign, :yalign))
            return (xalign[],yalign[])
        end
        function image(button::Gtk.GtkButtonI,image_)
            $(Expr(:ccall, :(:gtk_button_set_image,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :button, :image_))
            return button
        end
        function image(button::Gtk.GtkButtonI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_button_get_image,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :button)))
        end
        function image_position(button::Gtk.GtkButtonI,position)
            $(Expr(:ccall, :(:gtk_button_set_image_position,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :button, :position))
            return button
        end
        function image_position(button::Gtk.GtkButtonI)
            return $(Expr(:ccall, :(:gtk_button_get_image_position,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :button))
        end
        function event_window(button::Gtk.GtkButtonI)
            return $(Expr(:ccall, :(:gtk_button_get_event_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :button))
        end
        function size(cell::Gtk.GtkCellRendererI,widget)
            height = Gtk.mutable(Cint)
            width = Gtk.mutable(Cint)
            y_offset = Gtk.mutable(Cint)
            x_offset = Gtk.mutable(Cint)
            cell_area = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_cell_renderer_get_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle},Ptr{Cint},Ptr{Cint},Ptr{Cint},Ptr{Cint}), :cell, :widget, :cell_area, :x_offset, :y_offset, :width, :height))
            return (cell_area[],x_offset[],y_offset[],width[],height[])
        end
        function fixed_size(cell::Gtk.GtkCellRendererI,width,height)
            $(Expr(:ccall, :(:gtk_cell_renderer_set_fixed_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :cell, :width, :height))
            return cell
        end
        function fixed_size(cell::Gtk.GtkCellRendererI)
            height = Gtk.mutable(Cint)
            width = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_cell_renderer_get_fixed_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :cell, :width, :height))
            return (width[],height[])
        end
        function alignment(cell::Gtk.GtkCellRendererI,xalign,yalign)
            $(Expr(:ccall, :(:gtk_cell_renderer_set_alignment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cfloat,Cfloat), :cell, :xalign, :yalign))
            return cell
        end
        function alignment(cell::Gtk.GtkCellRendererI)
            yalign = Gtk.mutable(Cfloat)
            xalign = Gtk.mutable(Cfloat)
            $(Expr(:ccall, :(:gtk_cell_renderer_get_alignment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cfloat},Ptr{Cfloat}), :cell, :xalign, :yalign))
            return (xalign[],yalign[])
        end
        function padding(cell::Gtk.GtkCellRendererI,xpad,ypad)
            $(Expr(:ccall, :(:gtk_cell_renderer_set_padding,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :cell, :xpad, :ypad))
            return cell
        end
        function padding(cell::Gtk.GtkCellRendererI)
            ypad = Gtk.mutable(Cint)
            xpad = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_cell_renderer_get_padding,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :cell, :xpad, :ypad))
            return (xpad[],ypad[])
        end
        function visible(cell::Gtk.GtkCellRendererI,visible_)
            $(Expr(:ccall, :(:gtk_cell_renderer_set_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :cell, :visible_))
            return cell
        end
        function visible(cell::Gtk.GtkCellRendererI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_cell_renderer_get_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :cell)))
        end
        function sensitive(cell::Gtk.GtkCellRendererI,sensitive_)
            $(Expr(:ccall, :(:gtk_cell_renderer_set_sensitive,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :cell, :sensitive_))
            return cell
        end
        function sensitive(cell::Gtk.GtkCellRendererI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_cell_renderer_get_sensitive,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :cell)))
        end
        function cell_renderers(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_cell_renderers,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :tree_column))
        end
        function attributes(tree_column::Gtk.GtkTreeViewColumnI,cell_renderer)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_attributes,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :tree_column, :cell_renderer))
            return tree_column
        end
        function cell_data_func(tree_column::Gtk.GtkTreeViewColumnI,cell_renderer,func,func_data,destroy)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_cell_data_func,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Ptr{Void}), :tree_column, :cell_renderer, :func, :func_data, :destroy))
            return tree_column
        end
        function spacing(tree_column::Gtk.GtkTreeViewColumnI,spacing_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_spacing,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :spacing_))
            return tree_column
        end
        function spacing(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_spacing,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function visible(tree_column::Gtk.GtkTreeViewColumnI,visible_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :visible_))
            return tree_column
        end
        function visible(tree_column::Gtk.GtkTreeViewColumnI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_column_get_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column)))
        end
        function resizable(tree_column::Gtk.GtkTreeViewColumnI,resizable_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_resizable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :resizable_))
            return tree_column
        end
        function resizable(tree_column::Gtk.GtkTreeViewColumnI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_column_get_resizable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column)))
        end
        function sizing(tree_column::Gtk.GtkTreeViewColumnI,type_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_sizing,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :type_))
            return tree_column
        end
        function sizing(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_sizing,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function width(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_width,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function fixed_width(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_fixed_width,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function fixed_width(tree_column::Gtk.GtkTreeViewColumnI,fixed_width_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_fixed_width,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :fixed_width_))
            return tree_column
        end
        function min_width(tree_column::Gtk.GtkTreeViewColumnI,min_width_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_min_width,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :min_width_))
            return tree_column
        end
        function min_width(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_min_width,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function max_width(tree_column::Gtk.GtkTreeViewColumnI,max_width_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_max_width,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :max_width_))
            return tree_column
        end
        function max_width(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_max_width,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function title(tree_column::Gtk.GtkTreeViewColumnI,title_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_title,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :tree_column, :title_))
            return tree_column
        end
        function title(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_title,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :tree_column))
        end
        function expand(tree_column::Gtk.GtkTreeViewColumnI,expand_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_expand,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :expand_))
            return tree_column
        end
        function expand(tree_column::Gtk.GtkTreeViewColumnI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_column_get_expand,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column)))
        end
        function clickable(tree_column::Gtk.GtkTreeViewColumnI,clickable_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_clickable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :clickable_))
            return tree_column
        end
        function clickable(tree_column::Gtk.GtkTreeViewColumnI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_column_get_clickable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column)))
        end
        function widget(tree_column::Gtk.GtkTreeViewColumnI,widget_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_widget,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :tree_column, :widget_))
            return tree_column
        end
        function widget(tree_column::Gtk.GtkTreeViewColumnI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_tree_view_column_get_widget,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :tree_column)))
        end
        function alignment(tree_column::Gtk.GtkTreeViewColumnI,xalign)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_alignment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cfloat), :tree_column, :xalign))
            return tree_column
        end
        function alignment(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_alignment,Gtk.libgtk), :Cfloat, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function reorderable(tree_column::Gtk.GtkTreeViewColumnI,reorderable_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_reorderable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :reorderable_))
            return tree_column
        end
        function reorderable(tree_column::Gtk.GtkTreeViewColumnI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_column_get_reorderable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column)))
        end
        function sort_column_id(tree_column::Gtk.GtkTreeViewColumnI,sort_column_id_)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_sort_column_id,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :sort_column_id_))
            return tree_column
        end
        function sort_column_id(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_sort_column_id,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function sort_indicator(tree_column::Gtk.GtkTreeViewColumnI,setting)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_sort_indicator,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :setting))
            return tree_column
        end
        function sort_indicator(tree_column::Gtk.GtkTreeViewColumnI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_column_get_sort_indicator,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column)))
        end
        function sort_order(tree_column::Gtk.GtkTreeViewColumnI,order)
            $(Expr(:ccall, :(:gtk_tree_view_column_set_sort_order,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_column, :order))
            return tree_column
        end
        function sort_order(tree_column::Gtk.GtkTreeViewColumnI)
            return $(Expr(:ccall, :(:gtk_tree_view_column_get_sort_order,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_column))
        end
        function cell_data(tree_column::Gtk.GtkTreeViewColumnI,tree_model,iter,is_expander,is_expanded)
            $(Expr(:ccall, :(:gtk_tree_view_column_cell_set_cell_data,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Cint,Cint), :tree_column, :tree_model, :iter, :is_expander, :is_expanded))
            return tree_column
        end
        function size(tree_column::Gtk.GtkTreeViewColumnI)
            height = Gtk.mutable(Cint)
            width = Gtk.mutable(Cint)
            y_offset = Gtk.mutable(Cint)
            x_offset = Gtk.mutable(Cint)
            cell_area = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_tree_view_column_cell_get_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle},Ptr{Cint},Ptr{Cint},Ptr{Cint},Ptr{Cint}), :tree_column, :cell_area, :x_offset, :y_offset, :width, :height))
            return (cell_area[],x_offset[],y_offset[],width[],height[])
        end
        function position(tree_column::Gtk.GtkTreeViewColumnI,cell_renderer)
            width = Gtk.mutable(Cint)
            start_pos = Gtk.mutable(Cint)
            return (convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_column_cell_get_position,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :tree_column, :cell_renderer, :start_pos, :width))),start_pos[],width[])
        end
        function tree_view(tree_column::Gtk.GtkTreeViewColumnI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_tree_view_column_get_tree_view,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :tree_column)))
        end
        function mode(toggle_button::Gtk.GtkToggleButtonI,draw_indicator)
            $(Expr(:ccall, :(:gtk_toggle_button_set_mode,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :toggle_button, :draw_indicator))
            return toggle_button
        end
        function mode(toggle_button::Gtk.GtkToggleButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_toggle_button_get_mode,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :toggle_button)))
        end
        function active(toggle_button::Gtk.GtkToggleButtonI,is_active)
            $(Expr(:ccall, :(:gtk_toggle_button_set_active,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :toggle_button, :is_active))
            return toggle_button
        end
        function active(toggle_button::Gtk.GtkToggleButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_toggle_button_get_active,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :toggle_button)))
        end
        function inconsistent(toggle_button::Gtk.GtkToggleButtonI,setting)
            $(Expr(:ccall, :(:gtk_toggle_button_set_inconsistent,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :toggle_button, :setting))
            return toggle_button
        end
        function inconsistent(toggle_button::Gtk.GtkToggleButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_toggle_button_get_inconsistent,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :toggle_button)))
        end
        function priority(tag::Gtk.GtkTextTagI)
            return $(Expr(:ccall, :(:gtk_text_tag_get_priority,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tag))
        end
        function priority(tag::Gtk.GtkTextTagI,priority_)
            $(Expr(:ccall, :(:gtk_text_tag_set_priority,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tag, :priority_))
            return tag
        end
        function data(widget::Gtk.GtkWidgetI,context,target,time_)
            return $(Expr(:ccall, :(:gtk_drag_get_data,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Uint32), :widget, :context, :target, :time_))
        end
        function proxy(widget::Gtk.GtkWidgetI,proxy_window,protocol,use_coordinates)
            $(Expr(:ccall, :(:gtk_drag_dest_set_proxy,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint,Cint), :widget, :proxy_window, :protocol, :use_coordinates))
            return widget
        end
        function target_list(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_drag_dest_get_target_list,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function target_list(widget::Gtk.GtkWidgetI,target_list_)
            $(Expr(:ccall, :(:gtk_drag_dest_set_target_list,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :target_list_))
            return widget
        end
        function track_motion(widget::Gtk.GtkWidgetI,track_motion_)
            $(Expr(:ccall, :(:gtk_drag_dest_set_track_motion,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :widget, :track_motion_))
            return widget
        end
        function track_motion(widget::Gtk.GtkWidgetI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_drag_dest_get_track_motion,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :widget)))
        end
        function target_list(widget::Gtk.GtkWidgetI)
            return $(Expr(:ccall, :(:gtk_drag_source_get_target_list,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :widget))
        end
        function target_list(widget::Gtk.GtkWidgetI,target_list_)
            $(Expr(:ccall, :(:gtk_drag_source_set_target_list,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :widget, :target_list_))
            return widget
        end
        function icon(widget::Gtk.GtkWidgetI,colormap,pixmap,mask)
            $(Expr(:ccall, :(:gtk_drag_source_set_icon,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Ptr{Void}), :widget, :colormap, :pixmap, :mask))
            return widget
        end
        function icon_pixbuf(widget::Gtk.GtkWidgetI,pixbuf)
            $(Expr(:ccall, :(:gtk_drag_source_set_icon_pixbuf,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :widget, :pixbuf))
            return widget
        end
        function icon_stock(widget::Gtk.GtkWidgetI,stock_id)
            $(Expr(:ccall, :(:gtk_drag_source_set_icon_stock,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :widget, :stock_id))
            return widget
        end
        function icon_name(widget::Gtk.GtkWidgetI,icon_name_)
            $(Expr(:ccall, :(:gtk_drag_source_set_icon_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :widget, :icon_name_))
            return widget
        end
        function column_types(list_store::Gtk.GtkListStoreI,n_columns,types)
            $(Expr(:ccall, :(:gtk_list_store_set_column_types,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Culong}), :list_store, :n_columns, :types))
            return list_store
        end
        function value(list_store::Gtk.GtkListStoreI,iter,column,value_)
            $(Expr(:ccall, :(:gtk_list_store_set_value,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint,Ptr{Void}), :list_store, :iter, :column, :value_))
            return list_store
        end
        function valuesv(list_store::Gtk.GtkListStoreI,iter,columns,values,n_values)
            $(Expr(:ccall, :(:gtk_list_store_set_valuesv,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Cint},Ptr{Void},Cint), :list_store, :iter, :columns, :values, :n_values))
            return list_store
        end
        function buffer(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_buffer,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :entry))
        end
        function buffer(entry::Gtk.GtkEntryI,buffer_)
            $(Expr(:ccall, :(:gtk_entry_set_buffer,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :entry, :buffer_))
            return entry
        end
        function text_window(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_text_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :entry))
        end
        function visibility(entry::Gtk.GtkEntryI,visible)
            $(Expr(:ccall, :(:gtk_entry_set_visibility,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :entry, :visible))
            return entry
        end
        function visibility(entry::Gtk.GtkEntryI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_entry_get_visibility,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :entry)))
        end
        function invisible_char(entry::Gtk.GtkEntryI,ch)
            $(Expr(:ccall, :(:gtk_entry_set_invisible_char,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :entry, :ch))
            return entry
        end
        function invisible_char(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_invisible_char,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},), :entry))
        end
        function has_frame(entry::Gtk.GtkEntryI,setting)
            $(Expr(:ccall, :(:gtk_entry_set_has_frame,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :entry, :setting))
            return entry
        end
        function has_frame(entry::Gtk.GtkEntryI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_entry_get_has_frame,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :entry)))
        end
        function inner_border(entry::Gtk.GtkEntryI,border)
            $(Expr(:ccall, :(:gtk_entry_set_inner_border,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :entry, :border))
            return entry
        end
        function inner_border(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_inner_border,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :entry))
        end
        function overwrite_mode(entry::Gtk.GtkEntryI,overwrite)
            $(Expr(:ccall, :(:gtk_entry_set_overwrite_mode,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :entry, :overwrite))
            return entry
        end
        function overwrite_mode(entry::Gtk.GtkEntryI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_entry_get_overwrite_mode,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :entry)))
        end
        function max_length(entry::Gtk.GtkEntryI,max)
            $(Expr(:ccall, :(:gtk_entry_set_max_length,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :entry, :max))
            return entry
        end
        function max_length(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_max_length,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :entry))
        end
        function text_length(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_text_length,Gtk.libgtk), :Uint16, :(Ptr{Gtk.GObject},), :entry))
        end
        function activates_default(entry::Gtk.GtkEntryI,setting)
            $(Expr(:ccall, :(:gtk_entry_set_activates_default,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :entry, :setting))
            return entry
        end
        function activates_default(entry::Gtk.GtkEntryI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_entry_get_activates_default,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :entry)))
        end
        function width_chars(entry::Gtk.GtkEntryI,n_chars)
            $(Expr(:ccall, :(:gtk_entry_set_width_chars,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :entry, :n_chars))
            return entry
        end
        function width_chars(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_width_chars,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :entry))
        end
        function text(entry::Gtk.GtkEntryI,text_)
            $(Expr(:ccall, :(:gtk_entry_set_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :entry, :text_))
            return entry
        end
        function text(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :entry))
        end
        function layout(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_layout,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :entry))
        end
        function layout_offsets(entry::Gtk.GtkEntryI)
            y = Gtk.mutable(Cint)
            x = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_entry_get_layout_offsets,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :entry, :x, :y))
            return (x[],y[])
        end
        function alignment(entry::Gtk.GtkEntryI,xalign)
            $(Expr(:ccall, :(:gtk_entry_set_alignment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cfloat), :entry, :xalign))
            return entry
        end
        function alignment(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_alignment,Gtk.libgtk), :Cfloat, :(Ptr{Gtk.GObject},), :entry))
        end
        function completion(entry::Gtk.GtkEntryI,completion_)
            $(Expr(:ccall, :(:gtk_entry_set_completion,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :entry, :completion_))
            return entry
        end
        function completion(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_completion,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :entry))
        end
        function cursor_hadjustment(entry::Gtk.GtkEntryI,adjustment)
            $(Expr(:ccall, :(:gtk_entry_set_cursor_hadjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :entry, :adjustment))
            return entry
        end
        function cursor_hadjustment(entry::Gtk.GtkEntryI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_entry_get_cursor_hadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :entry)))
        end
        function progress_fraction(entry::Gtk.GtkEntryI,fraction)
            $(Expr(:ccall, :(:gtk_entry_set_progress_fraction,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :entry, :fraction))
            return entry
        end
        function progress_fraction(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_progress_fraction,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :entry))
        end
        function progress_pulse_step(entry::Gtk.GtkEntryI,fraction)
            $(Expr(:ccall, :(:gtk_entry_set_progress_pulse_step,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :entry, :fraction))
            return entry
        end
        function progress_pulse_step(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_progress_pulse_step,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :entry))
        end
        function icon_from_pixbuf(entry::Gtk.GtkEntryI,icon_pos,pixbuf)
            $(Expr(:ccall, :(:gtk_entry_set_icon_from_pixbuf,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Gtk.GObject}), :entry, :icon_pos, :pixbuf))
            return entry
        end
        function icon_from_stock(entry::Gtk.GtkEntryI,icon_pos,stock_id)
            $(Expr(:ccall, :(:gtk_entry_set_icon_from_stock,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Uint8}), :entry, :icon_pos, :stock_id))
            return entry
        end
        function icon_from_icon_name(entry::Gtk.GtkEntryI,icon_pos,icon_name)
            $(Expr(:ccall, :(:gtk_entry_set_icon_from_icon_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Uint8}), :entry, :icon_pos, :icon_name))
            return entry
        end
        function icon_from_gicon(entry::Gtk.GtkEntryI,icon_pos,icon)
            $(Expr(:ccall, :(:gtk_entry_set_icon_from_gicon,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Void}), :entry, :icon_pos, :icon))
            return entry
        end
        function icon_storage_type(entry::Gtk.GtkEntryI,icon_pos)
            return $(Expr(:ccall, :(:gtk_entry_get_icon_storage_type,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos))
        end
        function icon_pixbuf(entry::Gtk.GtkEntryI,icon_pos)
            return convert(Gtk.GdkPixbufI,$(Expr(:ccall, :(:gtk_entry_get_icon_pixbuf,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos)))
        end
        function icon_stock(entry::Gtk.GtkEntryI,icon_pos)
            return $(Expr(:ccall, :(:gtk_entry_get_icon_stock,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos))
        end
        function icon_name(entry::Gtk.GtkEntryI,icon_pos)
            return $(Expr(:ccall, :(:gtk_entry_get_icon_name,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos))
        end
        function icon_gicon(entry::Gtk.GtkEntryI,icon_pos)
            return $(Expr(:ccall, :(:gtk_entry_get_icon_gicon,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos))
        end
        function icon_activatable(entry::Gtk.GtkEntryI,icon_pos,activatable)
            $(Expr(:ccall, :(:gtk_entry_set_icon_activatable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :entry, :icon_pos, :activatable))
            return entry
        end
        function icon_activatable(entry::Gtk.GtkEntryI,icon_pos)
            return convert(Bool,$(Expr(:ccall, :(:gtk_entry_get_icon_activatable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos)))
        end
        function icon_sensitive(entry::Gtk.GtkEntryI,icon_pos,sensitive)
            $(Expr(:ccall, :(:gtk_entry_set_icon_sensitive,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :entry, :icon_pos, :sensitive))
            return entry
        end
        function icon_sensitive(entry::Gtk.GtkEntryI,icon_pos)
            return convert(Bool,$(Expr(:ccall, :(:gtk_entry_get_icon_sensitive,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos)))
        end
        function icon_at_pos(entry::Gtk.GtkEntryI,x,y)
            return $(Expr(:ccall, :(:gtk_entry_get_icon_at_pos,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Cint,Cint), :entry, :x, :y))
        end
        function icon_tooltip_text(entry::Gtk.GtkEntryI,icon_pos,tooltip)
            $(Expr(:ccall, :(:gtk_entry_set_icon_tooltip_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Uint8}), :entry, :icon_pos, :tooltip))
            return entry
        end
        function icon_tooltip_text(entry::Gtk.GtkEntryI,icon_pos)
            return $(Expr(:ccall, :(:gtk_entry_get_icon_tooltip_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos))
        end
        function icon_tooltip_markup(entry::Gtk.GtkEntryI,icon_pos,tooltip)
            $(Expr(:ccall, :(:gtk_entry_set_icon_tooltip_markup,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Uint8}), :entry, :icon_pos, :tooltip))
            return entry
        end
        function icon_tooltip_markup(entry::Gtk.GtkEntryI,icon_pos)
            return $(Expr(:ccall, :(:gtk_entry_get_icon_tooltip_markup,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos))
        end
        function icon_drag_source(entry::Gtk.GtkEntryI,icon_pos,target_list,actions)
            $(Expr(:ccall, :(:gtk_entry_set_icon_drag_source,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Ptr{Void},Cint), :entry, :icon_pos, :target_list, :actions))
            return entry
        end
        function current_icon_drag_source(entry::Gtk.GtkEntryI)
            return $(Expr(:ccall, :(:gtk_entry_get_current_icon_drag_source,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :entry))
        end
        function icon_window(entry::Gtk.GtkEntryI,icon_pos)
            return $(Expr(:ccall, :(:gtk_entry_get_icon_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},Cint), :entry, :icon_pos))
        end
        function position(entry::Gtk.GtkEntryI,position_)
            $(Expr(:ccall, :(:gtk_entry_set_position,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :entry, :position_))
            return entry
        end
        function editable(entry::Gtk.GtkEntryI,editable_)
            $(Expr(:ccall, :(:gtk_entry_set_editable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :entry, :editable_))
            return entry
        end
        function model(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_model,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :tree_view))
        end
        function model(tree_view::Gtk.GtkTreeViewI,model_)
            $(Expr(:ccall, :(:gtk_tree_view_set_model,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :tree_view, :model_))
            return tree_view
        end
        function selection(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_selection,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :tree_view))
        end
        function hadjustment(tree_view::Gtk.GtkTreeViewI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_tree_view_get_hadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function hadjustment(tree_view::Gtk.GtkTreeViewI,adjustment)
            $(Expr(:ccall, :(:gtk_tree_view_set_hadjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :tree_view, :adjustment))
            return tree_view
        end
        function vadjustment(tree_view::Gtk.GtkTreeViewI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_tree_view_get_vadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function vadjustment(tree_view::Gtk.GtkTreeViewI,adjustment)
            $(Expr(:ccall, :(:gtk_tree_view_set_vadjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :tree_view, :adjustment))
            return tree_view
        end
        function headers_visible(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_headers_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function headers_visible(tree_view::Gtk.GtkTreeViewI,headers_visible_)
            $(Expr(:ccall, :(:gtk_tree_view_set_headers_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :headers_visible_))
            return tree_view
        end
        function headers_clickable(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_headers_clickable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function headers_clickable(tree_view::Gtk.GtkTreeViewI,setting)
            $(Expr(:ccall, :(:gtk_tree_view_set_headers_clickable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :setting))
            return tree_view
        end
        function rules_hint(tree_view::Gtk.GtkTreeViewI,setting)
            $(Expr(:ccall, :(:gtk_tree_view_set_rules_hint,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :setting))
            return tree_view
        end
        function rules_hint(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_rules_hint,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function column(tree_view::Gtk.GtkTreeViewI,n)
            return convert(Gtk.GtkTreeViewColumnI,$(Expr(:ccall, :(:gtk_tree_view_get_column,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Cint), :tree_view, :n)))
        end
        function columns(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_columns,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :tree_view))
        end
        function expander_column(tree_view::Gtk.GtkTreeViewI,column)
            $(Expr(:ccall, :(:gtk_tree_view_set_expander_column,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :tree_view, :column))
            return tree_view
        end
        function expander_column(tree_view::Gtk.GtkTreeViewI)
            return convert(Gtk.GtkTreeViewColumnI,$(Expr(:ccall, :(:gtk_tree_view_get_expander_column,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function column_drag_function(tree_view::Gtk.GtkTreeViewI,func,user_data,destroy)
            $(Expr(:ccall, :(:gtk_tree_view_set_column_drag_function,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Ptr{Void}), :tree_view, :func, :user_data, :destroy))
            return tree_view
        end
        function reorderable(tree_view::Gtk.GtkTreeViewI,reorderable_)
            $(Expr(:ccall, :(:gtk_tree_view_set_reorderable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :reorderable_))
            return tree_view
        end
        function reorderable(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_reorderable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function cursor(tree_view::Gtk.GtkTreeViewI,path,focus_column,start_editing)
            $(Expr(:ccall, :(:gtk_tree_view_set_cursor,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Gtk.GObject},Cint), :tree_view, :path, :focus_column, :start_editing))
            return tree_view
        end
        function cursor_on_cell(tree_view::Gtk.GtkTreeViewI,path,focus_column,focus_cell,start_editing)
            $(Expr(:ccall, :(:gtk_tree_view_set_cursor_on_cell,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Gtk.GObject},Ptr{Gtk.GObject},Cint), :tree_view, :path, :focus_column, :focus_cell, :start_editing))
            return tree_view
        end
        function cursor(tree_view::Gtk.GtkTreeViewI)
            focus_column = Gtk.mutable(Ptr{Gtk.GObject})
            path = Gtk.mutable(Ptr{Void})
            $(Expr(:ccall, :(:gtk_tree_view_get_cursor,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Ptr{Gtk.GObject}}), :tree_view, :path, :focus_column))
            return (path[],convert(Gtk.GtkTreeViewColumnI,focus_column[]))
        end
        function bin_window(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_bin_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :tree_view))
        end
        function path_at_pos(tree_view::Gtk.GtkTreeViewI,x,y)
            cell_y = Gtk.mutable(Cint)
            cell_x = Gtk.mutable(Cint)
            column = Gtk.mutable(Ptr{Gtk.GObject})
            path = Gtk.mutable(Ptr{Void})
            return (convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_path_at_pos,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Cint,Cint,Ptr{Ptr{Void}},Ptr{Ptr{Gtk.GObject}},Ptr{Cint},Ptr{Cint}), :tree_view, :x, :y, :path, :column, :cell_x, :cell_y))),path[],convert(Gtk.GtkTreeViewColumnI,column[]),cell_x[],cell_y[])
        end
        function cell_area(tree_view::Gtk.GtkTreeViewI,path,column)
            rect = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_tree_view_get_cell_area,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle}), :tree_view, :path, :column, :rect))
            return rect[]
        end
        function background_area(tree_view::Gtk.GtkTreeViewI,path,column)
            rect = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_tree_view_get_background_area,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle}), :tree_view, :path, :column, :rect))
            return rect[]
        end
        function visible_rect(tree_view::Gtk.GtkTreeViewI)
            visible_rect_ = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_tree_view_get_visible_rect,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle}), :tree_view, :visible_rect_))
            return visible_rect_[]
        end
        function visible_range(tree_view::Gtk.GtkTreeViewI)
            end_path = Gtk.mutable(Ptr{Void})
            start_path = Gtk.mutable(Ptr{Void})
            return (convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_visible_range,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Ptr{Void}}), :tree_view, :start_path, :end_path))),start_path[],end_path[])
        end
        function drag_dest_row(tree_view::Gtk.GtkTreeViewI,path,pos)
            $(Expr(:ccall, :(:gtk_tree_view_set_drag_dest_row,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint), :tree_view, :path, :pos))
            return tree_view
        end
        function drag_dest_row(tree_view::Gtk.GtkTreeViewI)
            pos = Gtk.mutable(Cint)
            path = Gtk.mutable(Ptr{Void})
            $(Expr(:ccall, :(:gtk_tree_view_get_drag_dest_row,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Cint}), :tree_view, :path, :pos))
            return (path[],pos[])
        end
        function dest_row_at_pos(tree_view::Gtk.GtkTreeViewI,drag_x,drag_y)
            pos = Gtk.mutable(Cint)
            path = Gtk.mutable(Ptr{Void})
            return (convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_dest_row_at_pos,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Cint,Cint,Ptr{Ptr{Void}},Ptr{Cint}), :tree_view, :drag_x, :drag_y, :path, :pos))),path[],pos[])
        end
        function enable_search(tree_view::Gtk.GtkTreeViewI,enable_search_)
            $(Expr(:ccall, :(:gtk_tree_view_set_enable_search,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :enable_search_))
            return tree_view
        end
        function enable_search(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_enable_search,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function search_column(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_search_column,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view))
        end
        function search_column(tree_view::Gtk.GtkTreeViewI,column)
            $(Expr(:ccall, :(:gtk_tree_view_set_search_column,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :column))
            return tree_view
        end
        function search_equal_func(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_search_equal_func,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :tree_view))
        end
        function search_equal_func(tree_view::Gtk.GtkTreeViewI,search_equal_func_,search_user_data,search_destroy)
            $(Expr(:ccall, :(:gtk_tree_view_set_search_equal_func,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Ptr{Void}), :tree_view, :search_equal_func_, :search_user_data, :search_destroy))
            return tree_view
        end
        function search_entry(tree_view::Gtk.GtkTreeViewI)
            return convert(Gtk.GtkEntryI,$(Expr(:ccall, :(:gtk_tree_view_get_search_entry,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function search_entry(tree_view::Gtk.GtkTreeViewI,entry)
            $(Expr(:ccall, :(:gtk_tree_view_set_search_entry,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :tree_view, :entry))
            return tree_view
        end
        function search_position_func(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_search_position_func,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :tree_view))
        end
        function search_position_func(tree_view::Gtk.GtkTreeViewI,func,data,destroy)
            $(Expr(:ccall, :(:gtk_tree_view_set_search_position_func,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Ptr{Void}), :tree_view, :func, :data, :destroy))
            return tree_view
        end
        function destroy_count_func(tree_view::Gtk.GtkTreeViewI,func,data,destroy)
            $(Expr(:ccall, :(:gtk_tree_view_set_destroy_count_func,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Ptr{Void}), :tree_view, :func, :data, :destroy))
            return tree_view
        end
        function fixed_height_mode(tree_view::Gtk.GtkTreeViewI,enable)
            $(Expr(:ccall, :(:gtk_tree_view_set_fixed_height_mode,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :enable))
            return tree_view
        end
        function fixed_height_mode(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_fixed_height_mode,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function hover_selection(tree_view::Gtk.GtkTreeViewI,hover)
            $(Expr(:ccall, :(:gtk_tree_view_set_hover_selection,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :hover))
            return tree_view
        end
        function hover_selection(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_hover_selection,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function hover_expand(tree_view::Gtk.GtkTreeViewI,expand)
            $(Expr(:ccall, :(:gtk_tree_view_set_hover_expand,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :expand))
            return tree_view
        end
        function hover_expand(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_hover_expand,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function rubber_banding(tree_view::Gtk.GtkTreeViewI,enable)
            $(Expr(:ccall, :(:gtk_tree_view_set_rubber_banding,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :enable))
            return tree_view
        end
        function rubber_banding(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_rubber_banding,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function row_separator_func(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_row_separator_func,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :tree_view))
        end
        function row_separator_func(tree_view::Gtk.GtkTreeViewI,func,data,destroy)
            $(Expr(:ccall, :(:gtk_tree_view_set_row_separator_func,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Ptr{Void}), :tree_view, :func, :data, :destroy))
            return tree_view
        end
        function grid_lines(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_grid_lines,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view))
        end
        function grid_lines(tree_view::Gtk.GtkTreeViewI,grid_lines_)
            $(Expr(:ccall, :(:gtk_tree_view_set_grid_lines,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :grid_lines_))
            return tree_view
        end
        function enable_tree_lines(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_enable_tree_lines,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function enable_tree_lines(tree_view::Gtk.GtkTreeViewI,enabled)
            $(Expr(:ccall, :(:gtk_tree_view_set_enable_tree_lines,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :enabled))
            return tree_view
        end
        function show_expanders(tree_view::Gtk.GtkTreeViewI,enabled)
            $(Expr(:ccall, :(:gtk_tree_view_set_show_expanders,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :enabled))
            return tree_view
        end
        function show_expanders(tree_view::Gtk.GtkTreeViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_show_expanders,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view)))
        end
        function level_indentation(tree_view::Gtk.GtkTreeViewI,indentation)
            $(Expr(:ccall, :(:gtk_tree_view_set_level_indentation,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :indentation))
            return tree_view
        end
        function level_indentation(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_level_indentation,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view))
        end
        function tooltip_row(tree_view::Gtk.GtkTreeViewI,tooltip,path)
            $(Expr(:ccall, :(:gtk_tree_view_set_tooltip_row,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void}), :tree_view, :tooltip, :path))
            return tree_view
        end
        function tooltip_cell(tree_view::Gtk.GtkTreeViewI,tooltip,path,column,cell)
            $(Expr(:ccall, :(:gtk_tree_view_set_tooltip_cell,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :tree_view, :tooltip, :path, :column, :cell))
            return tree_view
        end
        function tooltip_context(tree_view::Gtk.GtkTreeViewI,keyboard_tip,iter)
            path = Gtk.mutable(Ptr{Void})
            model = Gtk.mutable(Ptr{Void})
            y = Gtk.mutable(Cint)
            x = Gtk.mutable(Cint)
            return (convert(Bool,$(Expr(:ccall, :(:gtk_tree_view_get_tooltip_context,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint},Cint,Ptr{Ptr{Void}},Ptr{Ptr{Void}},Ptr{Void}), :tree_view, :x, :y, :keyboard_tip, :model, :path, :iter))),x[],y[],model[],path[])
        end
        function tooltip_column(tree_view::Gtk.GtkTreeViewI,column)
            $(Expr(:ccall, :(:gtk_tree_view_set_tooltip_column,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :tree_view, :column))
            return tree_view
        end
        function tooltip_column(tree_view::Gtk.GtkTreeViewI)
            return $(Expr(:ccall, :(:gtk_tree_view_get_tooltip_column,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :tree_view))
        end
        function active_text(combo_box::Gtk.GtkComboBoxTextI)
            return $(Expr(:ccall, :(:gtk_combo_box_text_get_active_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :combo_box))
        end
        function expanded(expander::Gtk.GtkExpanderI,expanded_)
            $(Expr(:ccall, :(:gtk_expander_set_expanded,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :expander, :expanded_))
            return expander
        end
        function expanded(expander::Gtk.GtkExpanderI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_expander_get_expanded,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :expander)))
        end
        function spacing(expander::Gtk.GtkExpanderI,spacing_)
            $(Expr(:ccall, :(:gtk_expander_set_spacing,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :expander, :spacing_))
            return expander
        end
        function spacing(expander::Gtk.GtkExpanderI)
            return $(Expr(:ccall, :(:gtk_expander_get_spacing,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :expander))
        end
        function label(expander::Gtk.GtkExpanderI,label_)
            $(Expr(:ccall, :(:gtk_expander_set_label,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :expander, :label_))
            return expander
        end
        function label(expander::Gtk.GtkExpanderI)
            return $(Expr(:ccall, :(:gtk_expander_get_label,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :expander))
        end
        function use_underline(expander::Gtk.GtkExpanderI,use_underline_)
            $(Expr(:ccall, :(:gtk_expander_set_use_underline,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :expander, :use_underline_))
            return expander
        end
        function use_underline(expander::Gtk.GtkExpanderI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_expander_get_use_underline,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :expander)))
        end
        function use_markup(expander::Gtk.GtkExpanderI,use_markup_)
            $(Expr(:ccall, :(:gtk_expander_set_use_markup,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :expander, :use_markup_))
            return expander
        end
        function use_markup(expander::Gtk.GtkExpanderI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_expander_get_use_markup,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :expander)))
        end
        function label_widget(expander::Gtk.GtkExpanderI,label_widget_)
            $(Expr(:ccall, :(:gtk_expander_set_label_widget,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :expander, :label_widget_))
            return expander
        end
        function label_widget(expander::Gtk.GtkExpanderI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_expander_get_label_widget,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :expander)))
        end
        function label_fill(expander::Gtk.GtkExpanderI,label_fill_)
            $(Expr(:ccall, :(:gtk_expander_set_label_fill,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :expander, :label_fill_))
            return expander
        end
        function label_fill(expander::Gtk.GtkExpanderI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_expander_get_label_fill,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :expander)))
        end
        function action(chooser::Gtk.GtkFileChooserDialogI,action_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_action,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :chooser, :action_))
            return chooser
        end
        function action(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_action,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :chooser))
        end
        function local_only(chooser::Gtk.GtkFileChooserDialogI,local_only_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_local_only,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :chooser, :local_only_))
            return chooser
        end
        function local_only(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_file_chooser_get_local_only,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :chooser)))
        end
        function select_multiple(chooser::Gtk.GtkFileChooserDialogI,select_multiple_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_select_multiple,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :chooser, :select_multiple_))
            return chooser
        end
        function select_multiple(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_file_chooser_get_select_multiple,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :chooser)))
        end
        function show_hidden(chooser::Gtk.GtkFileChooserDialogI,show_hidden_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_show_hidden,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :chooser, :show_hidden_))
            return chooser
        end
        function show_hidden(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_file_chooser_get_show_hidden,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :chooser)))
        end
        function do_overwrite_confirmation(chooser::Gtk.GtkFileChooserDialogI,do_overwrite_confirmation_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_do_overwrite_confirmation,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :chooser, :do_overwrite_confirmation_))
            return chooser
        end
        function do_overwrite_confirmation(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_file_chooser_get_do_overwrite_confirmation,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :chooser)))
        end
        function create_folders(chooser::Gtk.GtkFileChooserDialogI,create_folders_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_create_folders,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :chooser, :create_folders_))
            return chooser
        end
        function create_folders(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_file_chooser_get_create_folders,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :chooser)))
        end
        function current_name(chooser::Gtk.GtkFileChooserDialogI,name)
            $(Expr(:ccall, :(:gtk_file_chooser_set_current_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :chooser, :name))
            return chooser
        end
        function filename(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_filename,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function filename(chooser::Gtk.GtkFileChooserDialogI,filename_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_filename,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Uint8}), :chooser, :filename_))
            return chooser
        end
        function filenames(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_filenames,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function current_folder(chooser::Gtk.GtkFileChooserDialogI,filename)
            $(Expr(:ccall, :(:gtk_file_chooser_set_current_folder,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Uint8}), :chooser, :filename))
            return chooser
        end
        function current_folder(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_current_folder,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function uri(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_uri,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function uri(chooser::Gtk.GtkFileChooserDialogI,uri_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_uri,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Uint8}), :chooser, :uri_))
            return chooser
        end
        function uris(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_uris,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function current_folder_uri(chooser::Gtk.GtkFileChooserDialogI,uri)
            $(Expr(:ccall, :(:gtk_file_chooser_set_current_folder_uri,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Uint8}), :chooser, :uri))
            return chooser
        end
        function current_folder_uri(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_current_folder_uri,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function file(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_file,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function file(chooser::Gtk.GtkFileChooserDialogI,file_,error)
            $(Expr(:ccall, :(:gtk_file_chooser_set_file,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Ptr{Gtk.GError}}), :chooser, :file_, :error))
            return chooser
        end
        function files(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_files,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function current_folder_file(chooser::Gtk.GtkFileChooserDialogI,file,error)
            $(Expr(:ccall, :(:gtk_file_chooser_set_current_folder_file,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Ptr{Gtk.GError}}), :chooser, :file, :error))
            return chooser
        end
        function current_folder_file(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_current_folder_file,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function preview_widget(chooser::Gtk.GtkFileChooserDialogI,preview_widget_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_preview_widget,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :chooser, :preview_widget_))
            return chooser
        end
        function preview_widget(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_file_chooser_get_preview_widget,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :chooser)))
        end
        function preview_widget_active(chooser::Gtk.GtkFileChooserDialogI,active)
            $(Expr(:ccall, :(:gtk_file_chooser_set_preview_widget_active,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :chooser, :active))
            return chooser
        end
        function preview_widget_active(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_file_chooser_get_preview_widget_active,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :chooser)))
        end
        function use_preview_label(chooser::Gtk.GtkFileChooserDialogI,use_label)
            $(Expr(:ccall, :(:gtk_file_chooser_set_use_preview_label,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :chooser, :use_label))
            return chooser
        end
        function use_preview_label(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_file_chooser_get_use_preview_label,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :chooser)))
        end
        function preview_filename(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_preview_filename,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function preview_uri(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_preview_uri,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function preview_file(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_preview_file,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function extra_widget(chooser::Gtk.GtkFileChooserDialogI,extra_widget_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_extra_widget,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :chooser, :extra_widget_))
            return chooser
        end
        function extra_widget(chooser::Gtk.GtkFileChooserDialogI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_file_chooser_get_extra_widget,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :chooser)))
        end
        function filter(chooser::Gtk.GtkFileChooserDialogI,filter_)
            $(Expr(:ccall, :(:gtk_file_chooser_set_filter,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :chooser, :filter_))
            return chooser
        end
        function filter(chooser::Gtk.GtkFileChooserDialogI)
            return $(Expr(:ccall, :(:gtk_file_chooser_get_filter,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :chooser))
        end
        function position(paned::Gtk.GtkPanedI)
            return $(Expr(:ccall, :(:gtk_paned_get_position,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :paned))
        end
        function position(paned::Gtk.GtkPanedI,position_)
            $(Expr(:ccall, :(:gtk_paned_set_position,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :paned, :position_))
            return paned
        end
        function child1(paned::Gtk.GtkPanedI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_paned_get_child1,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :paned)))
        end
        function child2(paned::Gtk.GtkPanedI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_paned_get_child2,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :paned)))
        end
        function handle_window(paned::Gtk.GtkPanedI)
            return $(Expr(:ccall, :(:gtk_paned_get_handle_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :paned))
        end
        function update_policy(range::Gtk.GtkScaleI,policy)
            $(Expr(:ccall, :(:gtk_range_set_update_policy,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :policy))
            return range
        end
        function update_policy(range::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_range_get_update_policy,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range))
        end
        function adjustment(range::Gtk.GtkScaleI,adjustment_)
            $(Expr(:ccall, :(:gtk_range_set_adjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :range, :adjustment_))
            return range
        end
        function adjustment(range::Gtk.GtkScaleI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_range_get_adjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :range)))
        end
        function inverted(range::Gtk.GtkScaleI,setting)
            $(Expr(:ccall, :(:gtk_range_set_inverted,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :setting))
            return range
        end
        function inverted(range::Gtk.GtkScaleI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_range_get_inverted,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range)))
        end
        function flippable(range::Gtk.GtkScaleI,flippable_)
            $(Expr(:ccall, :(:gtk_range_set_flippable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :flippable_))
            return range
        end
        function flippable(range::Gtk.GtkScaleI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_range_get_flippable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range)))
        end
        function slider_size_fixed(range::Gtk.GtkScaleI,size_fixed)
            $(Expr(:ccall, :(:gtk_range_set_slider_size_fixed,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :size_fixed))
            return range
        end
        function slider_size_fixed(range::Gtk.GtkScaleI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_range_get_slider_size_fixed,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range)))
        end
        function min_slider_size(range::Gtk.GtkScaleI,min_size)
            $(Expr(:ccall, :(:gtk_range_set_min_slider_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :min_size))
            return range
        end
        function min_slider_size(range::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_range_get_min_slider_size,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range))
        end
        function range_rect(range::Gtk.GtkScaleI)
            range_rect_ = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_range_get_range_rect,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle}), :range, :range_rect_))
            return range_rect_[]
        end
        function slider_range(range::Gtk.GtkScaleI)
            slider_end = Gtk.mutable(Cint)
            slider_start = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_range_get_slider_range,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :range, :slider_start, :slider_end))
            return (slider_start[],slider_end[])
        end
        function lower_stepper_sensitivity(range::Gtk.GtkScaleI,sensitivity)
            $(Expr(:ccall, :(:gtk_range_set_lower_stepper_sensitivity,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :sensitivity))
            return range
        end
        function lower_stepper_sensitivity(range::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_range_get_lower_stepper_sensitivity,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range))
        end
        function upper_stepper_sensitivity(range::Gtk.GtkScaleI,sensitivity)
            $(Expr(:ccall, :(:gtk_range_set_upper_stepper_sensitivity,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :sensitivity))
            return range
        end
        function upper_stepper_sensitivity(range::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_range_get_upper_stepper_sensitivity,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range))
        end
        function increments(range::Gtk.GtkScaleI,step,page)
            $(Expr(:ccall, :(:gtk_range_set_increments,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble,Cdouble), :range, :step, :page))
            return range
        end
        function range(range_::Gtk.GtkScaleI,min,max)
            $(Expr(:ccall, :(:gtk_range_set_range,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble,Cdouble), :range_, :min, :max))
            return range_
        end
        function value(range::Gtk.GtkScaleI,value_)
            $(Expr(:ccall, :(:gtk_range_set_value,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :range, :value_))
            return range
        end
        function value(range::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_range_get_value,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :range))
        end
        function show_fill_level(range::Gtk.GtkScaleI,show_fill_level_)
            $(Expr(:ccall, :(:gtk_range_set_show_fill_level,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :show_fill_level_))
            return range
        end
        function show_fill_level(range::Gtk.GtkScaleI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_range_get_show_fill_level,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range)))
        end
        function restrict_to_fill_level(range::Gtk.GtkScaleI,restrict_to_fill_level_)
            $(Expr(:ccall, :(:gtk_range_set_restrict_to_fill_level,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :restrict_to_fill_level_))
            return range
        end
        function restrict_to_fill_level(range::Gtk.GtkScaleI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_range_get_restrict_to_fill_level,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range)))
        end
        function fill_level(range::Gtk.GtkScaleI,fill_level_)
            $(Expr(:ccall, :(:gtk_range_set_fill_level,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :range, :fill_level_))
            return range
        end
        function fill_level(range::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_range_get_fill_level,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :range))
        end
        function round_digits(range::Gtk.GtkScaleI,round_digits_)
            $(Expr(:ccall, :(:gtk_range_set_round_digits,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :range, :round_digits_))
            return range
        end
        function round_digits(range::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_range_get_round_digits,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :range))
        end
        function digits(scale::Gtk.GtkScaleI,digits_)
            $(Expr(:ccall, :(:gtk_scale_set_digits,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :scale, :digits_))
            return scale
        end
        function digits(scale::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_scale_get_digits,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :scale))
        end
        function draw_value(scale::Gtk.GtkScaleI,draw_value_)
            $(Expr(:ccall, :(:gtk_scale_set_draw_value,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :scale, :draw_value_))
            return scale
        end
        function draw_value(scale::Gtk.GtkScaleI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_scale_get_draw_value,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :scale)))
        end
        function value_pos(scale::Gtk.GtkScaleI,pos)
            $(Expr(:ccall, :(:gtk_scale_set_value_pos,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :scale, :pos))
            return scale
        end
        function value_pos(scale::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_scale_get_value_pos,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :scale))
        end
        function layout(scale::Gtk.GtkScaleI)
            return $(Expr(:ccall, :(:gtk_scale_get_layout,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :scale))
        end
        function layout_offsets(scale::Gtk.GtkScaleI)
            y = Gtk.mutable(Cint)
            x = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_scale_get_layout_offsets,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cint},Ptr{Cint}), :scale, :x, :y))
            return (x[],y[])
        end
        function new_from_pixbuf(pixbuf::Gtk.GdkPixbufI)
            $(Expr(:ccall, :(:gtk_icon_set_new_from_pixbuf,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :pixbuf))
            return pixbuf
        end
        function bin_window(layout::Gtk.GtkLayoutI)
            return $(Expr(:ccall, :(:gtk_layout_get_bin_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :layout))
        end
        function size(layout::Gtk.GtkLayoutI,width,height)
            $(Expr(:ccall, :(:gtk_layout_set_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32,Uint32), :layout, :width, :height))
            return layout
        end
        function size(layout::Gtk.GtkLayoutI)
            height = Gtk.mutable(Uint32)
            width = Gtk.mutable(Uint32)
            $(Expr(:ccall, :(:gtk_layout_get_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint32},Ptr{Uint32}), :layout, :width, :height))
            return (width[],height[])
        end
        function hadjustment(layout::Gtk.GtkLayoutI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_layout_get_hadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :layout)))
        end
        function vadjustment(layout::Gtk.GtkLayoutI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_layout_get_vadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :layout)))
        end
        function hadjustment(layout::Gtk.GtkLayoutI,adjustment)
            $(Expr(:ccall, :(:gtk_layout_set_hadjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :layout, :adjustment))
            return layout
        end
        function vadjustment(layout::Gtk.GtkLayoutI,adjustment)
            $(Expr(:ccall, :(:gtk_layout_set_vadjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :layout, :adjustment))
            return layout
        end
        function uri(link_button::Gtk.GtkLinkButtonI)
            return $(Expr(:ccall, :(:gtk_link_button_get_uri,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :link_button))
        end
        function uri(link_button::Gtk.GtkLinkButtonI,uri_)
            $(Expr(:ccall, :(:gtk_link_button_set_uri,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :link_button, :uri_))
            return link_button
        end
        function visited(link_button::Gtk.GtkLinkButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_link_button_get_visited,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :link_button)))
        end
        function visited(link_button::Gtk.GtkLinkButtonI,visited_)
            $(Expr(:ccall, :(:gtk_link_button_set_visited,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :link_button, :visited_))
            return link_button
        end
        function option_group(open_default_display::Bool)
            return $(Expr(:ccall, :(:gtk_get_option_group,Gtk.libgtk), :(Ptr{Void}), :(Cint,), :open_default_display))
        end
        function info_from_tip_window(tip_window::Gtk.GtkWindowI)
            current_widget = Gtk.mutable(Ptr{Gtk.GObject})
            tooltips = Gtk.mutable(Ptr{Void})
            return (convert(Bool,$(Expr(:ccall, :(:gtk_tooltips_get_info_from_tip_window,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Ptr{Gtk.GObject}}), :tip_window, :tooltips, :current_widget))),tooltips[],convert(Gtk.GtkWidgetI,current_widget[]))
        end
        function group_id(notebook::Gtk.GtkNotebookI,group_id_)
            $(Expr(:ccall, :(:gtk_notebook_set_group_id,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :notebook, :group_id_))
            return notebook
        end
        function group_id(notebook::Gtk.GtkNotebookI)
            return $(Expr(:ccall, :(:gtk_notebook_get_group_id,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :notebook))
        end
        function group(notebook::Gtk.GtkNotebookI,group_)
            $(Expr(:ccall, :(:gtk_notebook_set_group,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :notebook, :group_))
            return notebook
        end
        function group(notebook::Gtk.GtkNotebookI)
            return $(Expr(:ccall, :(:gtk_notebook_get_group,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :notebook))
        end
        function group_name(notebook::Gtk.GtkNotebookI,group_name_)
            $(Expr(:ccall, :(:gtk_notebook_set_group_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :notebook, :group_name_))
            return notebook
        end
        function group_name(notebook::Gtk.GtkNotebookI)
            return $(Expr(:ccall, :(:gtk_notebook_get_group_name,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :notebook))
        end
        function current_page(notebook::Gtk.GtkNotebookI)
            return $(Expr(:ccall, :(:gtk_notebook_get_current_page,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :notebook))
        end
        function nth_page(notebook::Gtk.GtkNotebookI,page_num)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_notebook_get_nth_page,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Cint), :notebook, :page_num)))
        end
        function n_pages(notebook::Gtk.GtkNotebookI)
            return $(Expr(:ccall, :(:gtk_notebook_get_n_pages,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :notebook))
        end
        function current_page(notebook::Gtk.GtkNotebookI,page_num)
            $(Expr(:ccall, :(:gtk_notebook_set_current_page,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :notebook, :page_num))
            return notebook
        end
        function show_border(notebook::Gtk.GtkNotebookI,show_border_)
            $(Expr(:ccall, :(:gtk_notebook_set_show_border,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :notebook, :show_border_))
            return notebook
        end
        function show_border(notebook::Gtk.GtkNotebookI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_notebook_get_show_border,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :notebook)))
        end
        function show_tabs(notebook::Gtk.GtkNotebookI,show_tabs_)
            $(Expr(:ccall, :(:gtk_notebook_set_show_tabs,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :notebook, :show_tabs_))
            return notebook
        end
        function show_tabs(notebook::Gtk.GtkNotebookI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_notebook_get_show_tabs,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :notebook)))
        end
        function tab_pos(notebook::Gtk.GtkNotebookI,pos)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_pos,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :notebook, :pos))
            return notebook
        end
        function tab_pos(notebook::Gtk.GtkNotebookI)
            return $(Expr(:ccall, :(:gtk_notebook_get_tab_pos,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :notebook))
        end
        function homogeneous_tabs(notebook::Gtk.GtkNotebookI,homogeneous)
            $(Expr(:ccall, :(:gtk_notebook_set_homogeneous_tabs,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :notebook, :homogeneous))
            return notebook
        end
        function tab_border(notebook::Gtk.GtkNotebookI,border_width)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_border,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :notebook, :border_width))
            return notebook
        end
        function tab_hborder(notebook::Gtk.GtkNotebookI,tab_hborder_)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_hborder,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :notebook, :tab_hborder_))
            return notebook
        end
        function tab_vborder(notebook::Gtk.GtkNotebookI,tab_vborder_)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_vborder,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :notebook, :tab_vborder_))
            return notebook
        end
        function scrollable(notebook::Gtk.GtkNotebookI,scrollable_)
            $(Expr(:ccall, :(:gtk_notebook_set_scrollable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :notebook, :scrollable_))
            return notebook
        end
        function scrollable(notebook::Gtk.GtkNotebookI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_notebook_get_scrollable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :notebook)))
        end
        function tab_hborder(notebook::Gtk.GtkNotebookI)
            return $(Expr(:ccall, :(:gtk_notebook_get_tab_hborder,Gtk.libgtk), :Uint16, :(Ptr{Gtk.GObject},), :notebook))
        end
        function tab_vborder(notebook::Gtk.GtkNotebookI)
            return $(Expr(:ccall, :(:gtk_notebook_get_tab_vborder,Gtk.libgtk), :Uint16, :(Ptr{Gtk.GObject},), :notebook))
        end
        function tab_label(notebook::Gtk.GtkNotebookI,child)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_notebook_get_tab_label,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :notebook, :child)))
        end
        function tab_label(notebook::Gtk.GtkNotebookI,child,tab_label_)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_label,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :notebook, :child, :tab_label_))
            return notebook
        end
        function tab_label_text(notebook::Gtk.GtkNotebookI,child,tab_text)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_label_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Uint8}), :notebook, :child, :tab_text))
            return notebook
        end
        function tab_label_text(notebook::Gtk.GtkNotebookI,child)
            return $(Expr(:ccall, :(:gtk_notebook_get_tab_label_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :notebook, :child))
        end
        function menu_label(notebook::Gtk.GtkNotebookI,child)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_notebook_get_menu_label,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :notebook, :child)))
        end
        function menu_label(notebook::Gtk.GtkNotebookI,child,menu_label_)
            $(Expr(:ccall, :(:gtk_notebook_set_menu_label,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :notebook, :child, :menu_label_))
            return notebook
        end
        function menu_label_text(notebook::Gtk.GtkNotebookI,child,menu_text)
            $(Expr(:ccall, :(:gtk_notebook_set_menu_label_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Ptr{Uint8}), :notebook, :child, :menu_text))
            return notebook
        end
        function menu_label_text(notebook::Gtk.GtkNotebookI,child)
            return $(Expr(:ccall, :(:gtk_notebook_get_menu_label_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :notebook, :child))
        end
        function tab_label_packing(notebook::Gtk.GtkNotebookI,child,expand,fill,pack_type)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_label_packing,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Cint,Cint,Cint), :notebook, :child, :expand, :fill, :pack_type))
            return notebook
        end
        function tab_reorderable(notebook::Gtk.GtkNotebookI,child)
            return convert(Bool,$(Expr(:ccall, :(:gtk_notebook_get_tab_reorderable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :notebook, :child)))
        end
        function tab_reorderable(notebook::Gtk.GtkNotebookI,child,reorderable)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_reorderable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Cint), :notebook, :child, :reorderable))
            return notebook
        end
        function tab_detachable(notebook::Gtk.GtkNotebookI,child)
            return convert(Bool,$(Expr(:ccall, :(:gtk_notebook_get_tab_detachable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :notebook, :child)))
        end
        function tab_detachable(notebook::Gtk.GtkNotebookI,child,detachable)
            $(Expr(:ccall, :(:gtk_notebook_set_tab_detachable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Cint), :notebook, :child, :detachable))
            return notebook
        end
        function action_widget(notebook::Gtk.GtkNotebookI,pack_type)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_notebook_get_action_widget,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Cint), :notebook, :pack_type)))
        end
        function action_widget(notebook::Gtk.GtkNotebookI,widget,pack_type)
            $(Expr(:ccall, :(:gtk_notebook_set_action_widget,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject},Cint), :notebook, :widget, :pack_type))
            return notebook
        end
        function paper_sizes(include_custom::Bool)
            return $(Expr(:ccall, :(:gtk_paper_size_get_paper_sizes,Gtk.libgtk), :(Ptr{Void}), :(Cint,), :include_custom))
        end
        function text(pbar::Gtk.GtkProgressBarI,text_)
            $(Expr(:ccall, :(:gtk_progress_bar_set_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :pbar, :text_))
            return pbar
        end
        function fraction(pbar::Gtk.GtkProgressBarI,fraction_)
            $(Expr(:ccall, :(:gtk_progress_bar_set_fraction,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :pbar, :fraction_))
            return pbar
        end
        function pulse_step(pbar::Gtk.GtkProgressBarI,fraction)
            $(Expr(:ccall, :(:gtk_progress_bar_set_pulse_step,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :pbar, :fraction))
            return pbar
        end
        function orientation(pbar::Gtk.GtkProgressBarI,orientation_)
            $(Expr(:ccall, :(:gtk_progress_bar_set_orientation,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :pbar, :orientation_))
            return pbar
        end
        function text(pbar::Gtk.GtkProgressBarI)
            return $(Expr(:ccall, :(:gtk_progress_bar_get_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :pbar))
        end
        function fraction(pbar::Gtk.GtkProgressBarI)
            return $(Expr(:ccall, :(:gtk_progress_bar_get_fraction,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :pbar))
        end
        function pulse_step(pbar::Gtk.GtkProgressBarI)
            return $(Expr(:ccall, :(:gtk_progress_bar_get_pulse_step,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :pbar))
        end
        function orientation(pbar::Gtk.GtkProgressBarI)
            return $(Expr(:ccall, :(:gtk_progress_bar_get_orientation,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :pbar))
        end
        function ellipsize(pbar::Gtk.GtkProgressBarI,mode)
            $(Expr(:ccall, :(:gtk_progress_bar_set_ellipsize,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :pbar, :mode))
            return pbar
        end
        function ellipsize(pbar::Gtk.GtkProgressBarI)
            return $(Expr(:ccall, :(:gtk_progress_bar_get_ellipsize,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :pbar))
        end
        function bar_style(pbar::Gtk.GtkProgressBarI,style)
            $(Expr(:ccall, :(:gtk_progress_bar_set_bar_style,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :pbar, :style))
            return pbar
        end
        function discrete_blocks(pbar::Gtk.GtkProgressBarI,blocks)
            $(Expr(:ccall, :(:gtk_progress_bar_set_discrete_blocks,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :pbar, :blocks))
            return pbar
        end
        function activity_step(pbar::Gtk.GtkProgressBarI,step)
            $(Expr(:ccall, :(:gtk_progress_bar_set_activity_step,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :pbar, :step))
            return pbar
        end
        function activity_blocks(pbar::Gtk.GtkProgressBarI,blocks)
            $(Expr(:ccall, :(:gtk_progress_bar_set_activity_blocks,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :pbar, :blocks))
            return pbar
        end
        function group(radio_button::Gtk.GtkRadioButtonI)
            return $(Expr(:ccall, :(:gtk_radio_button_get_group,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :radio_button))
        end
        function group(radio_button::Gtk.GtkRadioButtonI,group_)
            $(Expr(:ccall, :(:gtk_radio_button_set_group,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :radio_button, :group_))
            return radio_button
        end
        function adjustment(spin_button::Gtk.GtkSpinButtonI,adjustment_)
            $(Expr(:ccall, :(:gtk_spin_button_set_adjustment,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :spin_button, :adjustment_))
            return spin_button
        end
        function adjustment(spin_button::Gtk.GtkSpinButtonI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_spin_button_get_adjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :spin_button)))
        end
        function digits(spin_button::Gtk.GtkSpinButtonI,digits_)
            $(Expr(:ccall, :(:gtk_spin_button_set_digits,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :spin_button, :digits_))
            return spin_button
        end
        function digits(spin_button::Gtk.GtkSpinButtonI)
            return $(Expr(:ccall, :(:gtk_spin_button_get_digits,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},), :spin_button))
        end
        function increments(spin_button::Gtk.GtkSpinButtonI,step,page)
            $(Expr(:ccall, :(:gtk_spin_button_set_increments,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble,Cdouble), :spin_button, :step, :page))
            return spin_button
        end
        function increments(spin_button::Gtk.GtkSpinButtonI)
            page = Gtk.mutable(Cdouble)
            step = Gtk.mutable(Cdouble)
            $(Expr(:ccall, :(:gtk_spin_button_get_increments,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cdouble},Ptr{Cdouble}), :spin_button, :step, :page))
            return (step[],page[])
        end
        function range(spin_button::Gtk.GtkSpinButtonI,min,max)
            $(Expr(:ccall, :(:gtk_spin_button_set_range,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble,Cdouble), :spin_button, :min, :max))
            return spin_button
        end
        function range(spin_button::Gtk.GtkSpinButtonI)
            max = Gtk.mutable(Cdouble)
            min = Gtk.mutable(Cdouble)
            $(Expr(:ccall, :(:gtk_spin_button_get_range,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Cdouble},Ptr{Cdouble}), :spin_button, :min, :max))
            return (min[],max[])
        end
        function value(spin_button::Gtk.GtkSpinButtonI)
            return $(Expr(:ccall, :(:gtk_spin_button_get_value,Gtk.libgtk), :Cdouble, :(Ptr{Gtk.GObject},), :spin_button))
        end
        function value_as_int(spin_button::Gtk.GtkSpinButtonI)
            return $(Expr(:ccall, :(:gtk_spin_button_get_value_as_int,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :spin_button))
        end
        function value(spin_button::Gtk.GtkSpinButtonI,value_)
            $(Expr(:ccall, :(:gtk_spin_button_set_value,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cdouble), :spin_button, :value_))
            return spin_button
        end
        function update_policy(spin_button::Gtk.GtkSpinButtonI,policy)
            $(Expr(:ccall, :(:gtk_spin_button_set_update_policy,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :spin_button, :policy))
            return spin_button
        end
        function update_policy(spin_button::Gtk.GtkSpinButtonI)
            return $(Expr(:ccall, :(:gtk_spin_button_get_update_policy,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :spin_button))
        end
        function numeric(spin_button::Gtk.GtkSpinButtonI,numeric_)
            $(Expr(:ccall, :(:gtk_spin_button_set_numeric,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :spin_button, :numeric_))
            return spin_button
        end
        function numeric(spin_button::Gtk.GtkSpinButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_spin_button_get_numeric,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :spin_button)))
        end
        function wrap(spin_button::Gtk.GtkSpinButtonI,wrap_)
            $(Expr(:ccall, :(:gtk_spin_button_set_wrap,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :spin_button, :wrap_))
            return spin_button
        end
        function wrap(spin_button::Gtk.GtkSpinButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_spin_button_get_wrap,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :spin_button)))
        end
        function snap_to_ticks(spin_button::Gtk.GtkSpinButtonI,snap_to_ticks_)
            $(Expr(:ccall, :(:gtk_spin_button_set_snap_to_ticks,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :spin_button, :snap_to_ticks_))
            return spin_button
        end
        function snap_to_ticks(spin_button::Gtk.GtkSpinButtonI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_spin_button_get_snap_to_ticks,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :spin_button)))
        end
        function context_id(statusbar::Gtk.GtkStatusbarI,context_description)
            return $(Expr(:ccall, :(:gtk_statusbar_get_context_id,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},Ptr{Uint8}), :statusbar, :context_description))
        end
        function has_resize_grip(statusbar::Gtk.GtkStatusbarI,setting)
            $(Expr(:ccall, :(:gtk_statusbar_set_has_resize_grip,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :statusbar, :setting))
            return statusbar
        end
        function has_resize_grip(statusbar::Gtk.GtkStatusbarI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_statusbar_get_has_resize_grip,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :statusbar)))
        end
        function message_area(statusbar::Gtk.GtkStatusbarI)
            return convert(Gtk.GtkWidgetI,$(Expr(:ccall, :(:gtk_statusbar_get_message_area,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :statusbar)))
        end
        function from_pixbuf(status_icon::Gtk.GtkStatusIconI,pixbuf)
            $(Expr(:ccall, :(:gtk_status_icon_set_from_pixbuf,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :status_icon, :pixbuf))
            return status_icon
        end
        function from_file(status_icon::Gtk.GtkStatusIconI,filename)
            $(Expr(:ccall, :(:gtk_status_icon_set_from_file,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :status_icon, :filename))
            return status_icon
        end
        function from_stock(status_icon::Gtk.GtkStatusIconI,stock_id)
            $(Expr(:ccall, :(:gtk_status_icon_set_from_stock,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :status_icon, :stock_id))
            return status_icon
        end
        function from_icon_name(status_icon::Gtk.GtkStatusIconI,icon_name)
            $(Expr(:ccall, :(:gtk_status_icon_set_from_icon_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :status_icon, :icon_name))
            return status_icon
        end
        function from_gicon(status_icon::Gtk.GtkStatusIconI,icon)
            $(Expr(:ccall, :(:gtk_status_icon_set_from_gicon,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :status_icon, :icon))
            return status_icon
        end
        function storage_type(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_storage_type,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :status_icon))
        end
        function pixbuf(status_icon::Gtk.GtkStatusIconI)
            return convert(Gtk.GdkPixbufI,$(Expr(:ccall, :(:gtk_status_icon_get_pixbuf,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :status_icon)))
        end
        function stock(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_stock,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :status_icon))
        end
        function icon_name(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_icon_name,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :status_icon))
        end
        function gicon(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_gicon,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :status_icon))
        end
        function size(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_size,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :status_icon))
        end
        function screen(status_icon::Gtk.GtkStatusIconI,screen_)
            $(Expr(:ccall, :(:gtk_status_icon_set_screen,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :status_icon, :screen_))
            return status_icon
        end
        function screen(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_screen,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :status_icon))
        end
        function tooltip(status_icon::Gtk.GtkStatusIconI,tooltip_text)
            $(Expr(:ccall, :(:gtk_status_icon_set_tooltip,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :status_icon, :tooltip_text))
            return status_icon
        end
        function has_tooltip(status_icon::Gtk.GtkStatusIconI,has_tooltip_)
            $(Expr(:ccall, :(:gtk_status_icon_set_has_tooltip,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :status_icon, :has_tooltip_))
            return status_icon
        end
        function tooltip_text(status_icon::Gtk.GtkStatusIconI,text)
            $(Expr(:ccall, :(:gtk_status_icon_set_tooltip_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :status_icon, :text))
            return status_icon
        end
        function tooltip_markup(status_icon::Gtk.GtkStatusIconI,markup)
            $(Expr(:ccall, :(:gtk_status_icon_set_tooltip_markup,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :status_icon, :markup))
            return status_icon
        end
        function title(status_icon::Gtk.GtkStatusIconI,title_)
            $(Expr(:ccall, :(:gtk_status_icon_set_title,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :status_icon, :title_))
            return status_icon
        end
        function title(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_title,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :status_icon))
        end
        function name(status_icon::Gtk.GtkStatusIconI,name_)
            $(Expr(:ccall, :(:gtk_status_icon_set_name,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8}), :status_icon, :name_))
            return status_icon
        end
        function visible(status_icon::Gtk.GtkStatusIconI,visible_)
            $(Expr(:ccall, :(:gtk_status_icon_set_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :status_icon, :visible_))
            return status_icon
        end
        function visible(status_icon::Gtk.GtkStatusIconI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_status_icon_get_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :status_icon)))
        end
        function blinking(status_icon::Gtk.GtkStatusIconI,blinking_)
            $(Expr(:ccall, :(:gtk_status_icon_set_blinking,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :status_icon, :blinking_))
            return status_icon
        end
        function blinking(status_icon::Gtk.GtkStatusIconI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_status_icon_get_blinking,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :status_icon)))
        end
        function geometry(status_icon::Gtk.GtkStatusIconI)
            orientation = Gtk.mutable(Cint)
            area = Gtk.mutable(Gtk.GdkRectangle)
            screen = Gtk.mutable(Ptr{Void})
            return (convert(Bool,$(Expr(:ccall, :(:gtk_status_icon_get_geometry,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Ptr{Void}},Ptr{Gtk.GdkRectangle},Ptr{Cint}), :status_icon, :screen, :area, :orientation))),screen[],area[],orientation[])
        end
        function has_tooltip(status_icon::Gtk.GtkStatusIconI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_status_icon_get_has_tooltip,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :status_icon)))
        end
        function tooltip_text(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_tooltip_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :status_icon))
        end
        function tooltip_markup(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_tooltip_markup,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :status_icon))
        end
        function x11_window_id(status_icon::Gtk.GtkStatusIconI)
            return $(Expr(:ccall, :(:gtk_status_icon_get_x11_window_id,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},), :status_icon))
        end
        function row_spacing(table::Gtk.GtkTableI,row,spacing)
            $(Expr(:ccall, :(:gtk_table_set_row_spacing,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32,Uint32), :table, :row, :spacing))
            return table
        end
        function row_spacing(table::Gtk.GtkTableI,row)
            return $(Expr(:ccall, :(:gtk_table_get_row_spacing,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},Uint32), :table, :row))
        end
        function col_spacing(table::Gtk.GtkTableI,column,spacing)
            $(Expr(:ccall, :(:gtk_table_set_col_spacing,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32,Uint32), :table, :column, :spacing))
            return table
        end
        function col_spacing(table::Gtk.GtkTableI,column)
            return $(Expr(:ccall, :(:gtk_table_get_col_spacing,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},Uint32), :table, :column))
        end
        function row_spacings(table::Gtk.GtkTableI,spacing)
            $(Expr(:ccall, :(:gtk_table_set_row_spacings,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :table, :spacing))
            return table
        end
        function default_row_spacing(table::Gtk.GtkTableI)
            return $(Expr(:ccall, :(:gtk_table_get_default_row_spacing,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},), :table))
        end
        function col_spacings(table::Gtk.GtkTableI,spacing)
            $(Expr(:ccall, :(:gtk_table_set_col_spacings,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Uint32), :table, :spacing))
            return table
        end
        function default_col_spacing(table::Gtk.GtkTableI)
            return $(Expr(:ccall, :(:gtk_table_get_default_col_spacing,Gtk.libgtk), :Uint32, :(Ptr{Gtk.GObject},), :table))
        end
        function homogeneous(table::Gtk.GtkTableI,homogeneous_)
            $(Expr(:ccall, :(:gtk_table_set_homogeneous,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :table, :homogeneous_))
            return table
        end
        function homogeneous(table::Gtk.GtkTableI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_table_get_homogeneous,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :table)))
        end
        function size(table::Gtk.GtkTableI)
            columns = Gtk.mutable(Uint32)
            rows = Gtk.mutable(Uint32)
            $(Expr(:ccall, :(:gtk_table_get_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint32},Ptr{Uint32}), :table, :rows, :columns))
            return (rows[],columns[])
        end
        function visible(mark::Gtk.GtkTextMarkI,setting)
            $(Expr(:ccall, :(:gtk_text_mark_set_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :mark, :setting))
            return mark
        end
        function visible(mark::Gtk.GtkTextMarkI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_mark_get_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :mark)))
        end
        function name(mark::Gtk.GtkTextMarkI)
            return $(Expr(:ccall, :(:gtk_text_mark_get_name,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},), :mark))
        end
        function deleted(mark::Gtk.GtkTextMarkI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_mark_get_deleted,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :mark)))
        end
        function buffer(mark::Gtk.GtkTextMarkI)
            return convert(Gtk.GtkTextBufferI,$(Expr(:ccall, :(:gtk_text_mark_get_buffer,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :mark)))
        end
        function left_gravity(mark::Gtk.GtkTextMarkI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_mark_get_left_gravity,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :mark)))
        end
        function line_count(buffer::Gtk.GtkTextBufferI)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_line_count,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :buffer))
        end
        function char_count(buffer::Gtk.GtkTextBufferI)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_char_count,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :buffer))
        end
        function tag_table(buffer::Gtk.GtkTextBufferI)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_tag_table,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :buffer))
        end
        function text(buffer::Gtk.GtkTextBufferI,text_,len)
            $(Expr(:ccall, :(:gtk_text_buffer_set_text,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Uint8},Cint), :buffer, :text_, :len))
            return buffer
        end
        function text(buffer::Gtk.GtkTextBufferI,start_,end_,include_hidden_chars)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_text,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Cint), :buffer, :start_, :end_, :include_hidden_chars))
        end
        function slice(buffer::Gtk.GtkTextBufferI,start_,end_,include_hidden_chars)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_slice,Gtk.libgtk), :(Ptr{Uint8}), :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void},Cint), :buffer, :start_, :end_, :include_hidden_chars))
        end
        function mark(buffer::Gtk.GtkTextBufferI,name)
            return convert(Gtk.GtkTextMarkI,$(Expr(:ccall, :(:gtk_text_buffer_get_mark,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},Ptr{Uint8}), :buffer, :name)))
        end
        function insert(buffer::Gtk.GtkTextBufferI)
            return convert(Gtk.GtkTextMarkI,$(Expr(:ccall, :(:gtk_text_buffer_get_insert,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :buffer)))
        end
        function selection_bound(buffer::Gtk.GtkTextBufferI)
            return convert(Gtk.GtkTextMarkI,$(Expr(:ccall, :(:gtk_text_buffer_get_selection_bound,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :buffer)))
        end
        function iter_at_line_offset(buffer::Gtk.GtkTextBufferI,iter,line_number,char_offset)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_iter_at_line_offset,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint,Cint), :buffer, :iter, :line_number, :char_offset))
        end
        function iter_at_line_index(buffer::Gtk.GtkTextBufferI,iter,line_number,byte_index)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_iter_at_line_index,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint,Cint), :buffer, :iter, :line_number, :byte_index))
        end
        function iter_at_offset(buffer::Gtk.GtkTextBufferI,iter,char_offset)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_iter_at_offset,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint), :buffer, :iter, :char_offset))
        end
        function iter_at_line(buffer::Gtk.GtkTextBufferI,iter,line_number)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_iter_at_line,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint), :buffer, :iter, :line_number))
        end
        function start_iter(buffer::Gtk.GtkTextBufferI,iter)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_start_iter,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :buffer, :iter))
        end
        function end_iter(buffer::Gtk.GtkTextBufferI,iter)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_end_iter,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :buffer, :iter))
        end
        function bounds(buffer::Gtk.GtkTextBufferI,start_,end_)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_bounds,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void}), :buffer, :start_, :end_))
        end
        function iter_at_mark(buffer::Gtk.GtkTextBufferI,iter,mark)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_iter_at_mark,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Gtk.GObject}), :buffer, :iter, :mark))
        end
        function iter_at_child_anchor(buffer::Gtk.GtkTextBufferI,iter,anchor)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_iter_at_child_anchor,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void}), :buffer, :iter, :anchor))
        end
        function modified(buffer::Gtk.GtkTextBufferI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_buffer_get_modified,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :buffer)))
        end
        function modified(buffer::Gtk.GtkTextBufferI,setting)
            $(Expr(:ccall, :(:gtk_text_buffer_set_modified,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :buffer, :setting))
            return buffer
        end
        function has_selection(buffer::Gtk.GtkTextBufferI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_buffer_get_has_selection,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :buffer)))
        end
        function selection_bounds(buffer::Gtk.GtkTextBufferI,start_,end_)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_buffer_get_selection_bounds,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Void}), :buffer, :start_, :end_)))
        end
        function copy_target_list(buffer::Gtk.GtkTextBufferI)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_copy_target_list,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :buffer))
        end
        function paste_target_list(buffer::Gtk.GtkTextBufferI)
            return $(Expr(:ccall, :(:gtk_text_buffer_get_paste_target_list,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :buffer))
        end
        function can_create_tags(buffer::Gtk.GtkTextBufferI,format,can_create_tags_)
            $(Expr(:ccall, :(:gtk_text_buffer_deserialize_set_can_create_tags,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint), :buffer, :format, :can_create_tags_))
            return buffer
        end
        function can_create_tags(buffer::Gtk.GtkTextBufferI,format)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_buffer_deserialize_get_can_create_tags,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Void}), :buffer, :format)))
        end
        function serialize_formats(buffer::Gtk.GtkTextBufferI)
            n_formats = Gtk.mutable(Cint)
            return ($(Expr(:ccall, :(:gtk_text_buffer_get_serialize_formats,Gtk.libgtk), :(Ptr{Ptr{Void}}), :(Ptr{Gtk.GObject},Ptr{Cint}), :buffer, :n_formats)),n_formats[])
        end
        function deserialize_formats(buffer::Gtk.GtkTextBufferI)
            n_formats = Gtk.mutable(Cint)
            return ($(Expr(:ccall, :(:gtk_text_buffer_get_deserialize_formats,Gtk.libgtk), :(Ptr{Ptr{Void}}), :(Ptr{Gtk.GObject},Ptr{Cint}), :buffer, :n_formats)),n_formats[])
        end
        function buffer(text_view::Gtk.GtkTextViewI,buffer_)
            $(Expr(:ccall, :(:gtk_text_view_set_buffer,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GObject}), :text_view, :buffer_))
            return text_view
        end
        function buffer(text_view::Gtk.GtkTextViewI)
            return convert(Gtk.GtkTextBufferI,$(Expr(:ccall, :(:gtk_text_view_get_buffer,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :text_view)))
        end
        function visible_rect(text_view::Gtk.GtkTextViewI)
            visible_rect_ = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_text_view_get_visible_rect,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Gtk.GdkRectangle}), :text_view, :visible_rect_))
            return visible_rect_[]
        end
        function cursor_visible(text_view::Gtk.GtkTextViewI,setting)
            $(Expr(:ccall, :(:gtk_text_view_set_cursor_visible,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :setting))
            return text_view
        end
        function cursor_visible(text_view::Gtk.GtkTextViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_view_get_cursor_visible,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view)))
        end
        function iter_location(text_view::Gtk.GtkTextViewI,iter)
            location = Gtk.mutable(Gtk.GdkRectangle)
            $(Expr(:ccall, :(:gtk_text_view_get_iter_location,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Gtk.GdkRectangle}), :text_view, :iter, :location))
            return location[]
        end
        function iter_at_location(text_view::Gtk.GtkTextViewI,iter,x,y)
            return $(Expr(:ccall, :(:gtk_text_view_get_iter_at_location,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint,Cint), :text_view, :iter, :x, :y))
        end
        function iter_at_position(text_view::Gtk.GtkTextViewI,iter,x,y)
            trailing = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_text_view_get_iter_at_position,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Cint},Cint,Cint), :text_view, :iter, :trailing, :x, :y))
            return trailing[]
        end
        function line_yrange(text_view::Gtk.GtkTextViewI,iter)
            height = Gtk.mutable(Cint)
            y = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_text_view_get_line_yrange,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Ptr{Cint},Ptr{Cint}), :text_view, :iter, :y, :height))
            return (y[],height[])
        end
        function line_at_y(text_view::Gtk.GtkTextViewI,target_iter,y)
            line_top = Gtk.mutable(Cint)
            $(Expr(:ccall, :(:gtk_text_view_get_line_at_y,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void},Cint,Ptr{Cint}), :text_view, :target_iter, :y, :line_top))
            return line_top[]
        end
        function hadjustment(text_view::Gtk.GtkTextViewI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_text_view_get_hadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :text_view)))
        end
        function vadjustment(text_view::Gtk.GtkTextViewI)
            return convert(Gtk.GtkAdjustmentI,$(Expr(:ccall, :(:gtk_text_view_get_vadjustment,Gtk.libgtk), :(Ptr{Gtk.GObject}), :(Ptr{Gtk.GObject},), :text_view)))
        end
        function window(text_view::Gtk.GtkTextViewI,win)
            return $(Expr(:ccall, :(:gtk_text_view_get_window,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},Cint), :text_view, :win))
        end
        function window_type(text_view::Gtk.GtkTextViewI,window)
            return $(Expr(:ccall, :(:gtk_text_view_get_window_type,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Ptr{Void}), :text_view, :window))
        end
        function border_window_size(text_view::Gtk.GtkTextViewI,type_,size)
            $(Expr(:ccall, :(:gtk_text_view_set_border_window_size,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint,Cint), :text_view, :type_, :size))
            return text_view
        end
        function border_window_size(text_view::Gtk.GtkTextViewI,type_)
            return $(Expr(:ccall, :(:gtk_text_view_get_border_window_size,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},Cint), :text_view, :type_))
        end
        function wrap_mode(text_view::Gtk.GtkTextViewI,wrap_mode_)
            $(Expr(:ccall, :(:gtk_text_view_set_wrap_mode,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :wrap_mode_))
            return text_view
        end
        function wrap_mode(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_wrap_mode,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view))
        end
        function editable(text_view::Gtk.GtkTextViewI,setting)
            $(Expr(:ccall, :(:gtk_text_view_set_editable,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :setting))
            return text_view
        end
        function editable(text_view::Gtk.GtkTextViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_view_get_editable,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view)))
        end
        function overwrite(text_view::Gtk.GtkTextViewI,overwrite_)
            $(Expr(:ccall, :(:gtk_text_view_set_overwrite,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :overwrite_))
            return text_view
        end
        function overwrite(text_view::Gtk.GtkTextViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_view_get_overwrite,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view)))
        end
        function accepts_tab(text_view::Gtk.GtkTextViewI,accepts_tab_)
            $(Expr(:ccall, :(:gtk_text_view_set_accepts_tab,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :accepts_tab_))
            return text_view
        end
        function accepts_tab(text_view::Gtk.GtkTextViewI)
            return convert(Bool,$(Expr(:ccall, :(:gtk_text_view_get_accepts_tab,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view)))
        end
        function pixels_above_lines(text_view::Gtk.GtkTextViewI,pixels_above_lines_)
            $(Expr(:ccall, :(:gtk_text_view_set_pixels_above_lines,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :pixels_above_lines_))
            return text_view
        end
        function pixels_above_lines(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_pixels_above_lines,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view))
        end
        function pixels_below_lines(text_view::Gtk.GtkTextViewI,pixels_below_lines_)
            $(Expr(:ccall, :(:gtk_text_view_set_pixels_below_lines,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :pixels_below_lines_))
            return text_view
        end
        function pixels_below_lines(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_pixels_below_lines,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view))
        end
        function pixels_inside_wrap(text_view::Gtk.GtkTextViewI,pixels_inside_wrap_)
            $(Expr(:ccall, :(:gtk_text_view_set_pixels_inside_wrap,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :pixels_inside_wrap_))
            return text_view
        end
        function pixels_inside_wrap(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_pixels_inside_wrap,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view))
        end
        function justification(text_view::Gtk.GtkTextViewI,justification_)
            $(Expr(:ccall, :(:gtk_text_view_set_justification,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :justification_))
            return text_view
        end
        function justification(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_justification,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view))
        end
        function left_margin(text_view::Gtk.GtkTextViewI,left_margin_)
            $(Expr(:ccall, :(:gtk_text_view_set_left_margin,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :left_margin_))
            return text_view
        end
        function left_margin(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_left_margin,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view))
        end
        function right_margin(text_view::Gtk.GtkTextViewI,right_margin_)
            $(Expr(:ccall, :(:gtk_text_view_set_right_margin,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :right_margin_))
            return text_view
        end
        function right_margin(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_right_margin,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view))
        end
        function indent(text_view::Gtk.GtkTextViewI,indent_)
            $(Expr(:ccall, :(:gtk_text_view_set_indent,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Cint), :text_view, :indent_))
            return text_view
        end
        function indent(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_indent,Gtk.libgtk), :Cint, :(Ptr{Gtk.GObject},), :text_view))
        end
        function tabs(text_view::Gtk.GtkTextViewI,tabs_)
            $(Expr(:ccall, :(:gtk_text_view_set_tabs,Gtk.libgtk), :Void, :(Ptr{Gtk.GObject},Ptr{Void}), :text_view, :tabs_))
            return text_view
        end
        function tabs(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_tabs,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :text_view))
        end
        function default_attributes(text_view::Gtk.GtkTextViewI)
            return $(Expr(:ccall, :(:gtk_text_view_get_default_attributes,Gtk.libgtk), :(Ptr{Void}), :(Ptr{Gtk.GObject},), :text_view))
        end
    end)))))
end
